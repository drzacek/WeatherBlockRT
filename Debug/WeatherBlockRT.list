
WeatherBlockRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004fec  08004fec  00014fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000330  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001658  20000330  08005600  00020330  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001988  08005600  00021988  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026df4  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004d69  00000000  00000000  0004714d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c8cb  00000000  00000000  0004beb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001030  00000000  00000000  00058788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001778  00000000  00000000  000597b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b513  00000000  00000000  0005af30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005bab  00000000  00000000  00066443  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006bfee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000037d0  00000000  00000000  0006c06c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000df  00000000  00000000  0006f83c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000330 	.word	0x20000330
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fd4 	.word	0x08004fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000334 	.word	0x20000334
 8000148:	08004fd4 	.word	0x08004fd4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000170:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <HAL_InitTick+0x3c>)
{
 8000174:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000176:	7818      	ldrb	r0, [r3, #0]
 8000178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <HAL_InitTick+0x40>)
 8000182:	6810      	ldr	r0, [r2, #0]
 8000184:	fbb0 f0f3 	udiv	r0, r0, r3
 8000188:	f000 f89e 	bl	80002c8 <HAL_SYSTICK_Config>
 800018c:	4604      	mov	r4, r0
 800018e:	b958      	cbnz	r0, 80001a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000190:	2d0f      	cmp	r5, #15
 8000192:	d809      	bhi.n	80001a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000194:	4602      	mov	r2, r0
 8000196:	4629      	mov	r1, r5
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 f854 	bl	8000248 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <HAL_InitTick+0x44>)
 80001a2:	4620      	mov	r0, r4
 80001a4:	601d      	str	r5, [r3, #0]
 80001a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80001a8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001aa:	bd38      	pop	{r3, r4, r5, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000118 	.word	0x20000118
 80001b4:	20000004 	.word	0x20000004

080001b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <HAL_Init+0x20>)
{
 80001ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c6:	f000 f82d 	bl	8000224 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ca:	2000      	movs	r0, #0
 80001cc:	f7ff ffd0 	bl	8000170 <HAL_InitTick>
  HAL_MspInit();
 80001d0:	f003 f966 	bl	80034a0 <HAL_MspInit>
}
 80001d4:	2000      	movs	r0, #0
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	40022000 	.word	0x40022000

080001dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <HAL_IncTick+0x10>)
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_IncTick+0x14>)
 80001e0:	6811      	ldr	r1, [r2, #0]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	440b      	add	r3, r1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	200006a0 	.word	0x200006a0
 80001f0:	20000000 	.word	0x20000000

080001f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f4:	4b01      	ldr	r3, [pc, #4]	; (80001fc <HAL_GetTick+0x8>)
 80001f6:	6818      	ldr	r0, [r3, #0]
}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	200006a0 	.word	0x200006a0

08000200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000200:	b538      	push	{r3, r4, r5, lr}
 8000202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000204:	f7ff fff6 	bl	80001f4 <HAL_GetTick>
 8000208:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800020a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800020c:	bf1e      	ittt	ne
 800020e:	4b04      	ldrne	r3, [pc, #16]	; (8000220 <HAL_Delay+0x20>)
 8000210:	781b      	ldrbne	r3, [r3, #0]
 8000212:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000214:	f7ff ffee 	bl	80001f4 <HAL_GetTick>
 8000218:	1b40      	subs	r0, r0, r5
 800021a:	4284      	cmp	r4, r0
 800021c:	d8fa      	bhi.n	8000214 <HAL_Delay+0x14>
  {
  }
}
 800021e:	bd38      	pop	{r3, r4, r5, pc}
 8000220:	20000000 	.word	0x20000000

08000224 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000226:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800022a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000232:	041b      	lsls	r3, r3, #16
 8000234:	0c1b      	lsrs	r3, r3, #16
 8000236:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800023e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000240:	60d3      	str	r3, [r2, #12]
 8000242:	4770      	bx	lr
 8000244:	e000ed00 	.word	0xe000ed00

08000248 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800024a:	b530      	push	{r4, r5, lr}
 800024c:	68dc      	ldr	r4, [r3, #12]
 800024e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000252:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000256:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000258:	2b04      	cmp	r3, #4
 800025a:	bf28      	it	cs
 800025c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000264:	bf98      	it	ls
 8000266:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	fa05 f303 	lsl.w	r3, r5, r3
 800026c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf88      	it	hi
 8000272:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	4019      	ands	r1, r3
 8000276:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000278:	fa05 f404 	lsl.w	r4, r5, r4
 800027c:	3c01      	subs	r4, #1
 800027e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000280:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000282:	ea42 0201 	orr.w	r2, r2, r1
 8000286:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	bfaf      	iteee	ge
 800028c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4b06      	ldrlt	r3, [pc, #24]	; (80002ac <HAL_NVIC_SetPriority+0x64>)
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	bfa5      	ittet	ge
 800029a:	b2d2      	uxtbge	r2, r2
 800029c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000ed14 	.word	0xe000ed14

080002b0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b0:	2301      	movs	r3, #1
 80002b2:	0942      	lsrs	r2, r0, #5
 80002b4:	f000 001f 	and.w	r0, r0, #31
 80002b8:	fa03 f000 	lsl.w	r0, r3, r0
 80002bc:	4b01      	ldr	r3, [pc, #4]	; (80002c4 <HAL_NVIC_EnableIRQ+0x14>)
 80002be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002c8:	3801      	subs	r0, #1
 80002ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ce:	d20a      	bcs.n	80002e6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e010 	.word	0xe000e010
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002f6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	bf0c      	ite	eq
 80002fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000300:	f022 0204 	bicne.w	r2, r2, #4
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	4770      	bx	lr
 8000308:	e000e010 	.word	0xe000e010

0800030c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800030c:	4770      	bx	lr

0800030e <HAL_SYSTICK_IRQHandler>:
{
 800030e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000310:	f7ff fffc 	bl	800030c <HAL_SYSTICK_Callback>
 8000314:	bd08      	pop	{r3, pc}
	...

08000318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800031c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800031e:	4616      	mov	r6, r2
 8000320:	4b65      	ldr	r3, [pc, #404]	; (80004b8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000322:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004c8 <HAL_GPIO_Init+0x1b0>
 8000326:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004cc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800032a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800032e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000330:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000334:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000338:	45a0      	cmp	r8, r4
 800033a:	d17f      	bne.n	800043c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800033c:	684d      	ldr	r5, [r1, #4]
 800033e:	2d12      	cmp	r5, #18
 8000340:	f000 80af 	beq.w	80004a2 <HAL_GPIO_Init+0x18a>
 8000344:	f200 8088 	bhi.w	8000458 <HAL_GPIO_Init+0x140>
 8000348:	2d02      	cmp	r5, #2
 800034a:	f000 80a7 	beq.w	800049c <HAL_GPIO_Init+0x184>
 800034e:	d87c      	bhi.n	800044a <HAL_GPIO_Init+0x132>
 8000350:	2d00      	cmp	r5, #0
 8000352:	f000 808e 	beq.w	8000472 <HAL_GPIO_Init+0x15a>
 8000356:	2d01      	cmp	r5, #1
 8000358:	f000 809e 	beq.w	8000498 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800035c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000360:	2cff      	cmp	r4, #255	; 0xff
 8000362:	bf93      	iteet	ls
 8000364:	4682      	movls	sl, r0
 8000366:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800036a:	3d08      	subhi	r5, #8
 800036c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000370:	bf92      	itee	ls
 8000372:	00b5      	lslls	r5, r6, #2
 8000374:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000378:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800037a:	fa09 f805 	lsl.w	r8, r9, r5
 800037e:	ea2b 0808 	bic.w	r8, fp, r8
 8000382:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000386:	bf88      	it	hi
 8000388:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800038c:	ea48 0505 	orr.w	r5, r8, r5
 8000390:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000394:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000398:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800039c:	d04e      	beq.n	800043c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4d47      	ldr	r5, [pc, #284]	; (80004bc <HAL_GPIO_Init+0x1a4>)
 80003a0:	4f46      	ldr	r7, [pc, #280]	; (80004bc <HAL_GPIO_Init+0x1a4>)
 80003a2:	69ad      	ldr	r5, [r5, #24]
 80003a4:	f026 0803 	bic.w	r8, r6, #3
 80003a8:	f045 0501 	orr.w	r5, r5, #1
 80003ac:	61bd      	str	r5, [r7, #24]
 80003ae:	69bd      	ldr	r5, [r7, #24]
 80003b0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003b4:	f005 0501 	and.w	r5, r5, #1
 80003b8:	9501      	str	r5, [sp, #4]
 80003ba:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003be:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003c8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003cc:	fa09 f90b 	lsl.w	r9, r9, fp
 80003d0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003d4:	4d3a      	ldr	r5, [pc, #232]	; (80004c0 <HAL_GPIO_Init+0x1a8>)
 80003d6:	42a8      	cmp	r0, r5
 80003d8:	d068      	beq.n	80004ac <HAL_GPIO_Init+0x194>
 80003da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003de:	42a8      	cmp	r0, r5
 80003e0:	d066      	beq.n	80004b0 <HAL_GPIO_Init+0x198>
 80003e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e6:	42a8      	cmp	r0, r5
 80003e8:	d064      	beq.n	80004b4 <HAL_GPIO_Init+0x19c>
 80003ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ee:	42a8      	cmp	r0, r5
 80003f0:	bf0c      	ite	eq
 80003f2:	2503      	moveq	r5, #3
 80003f4:	2504      	movne	r5, #4
 80003f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003fa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003fe:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000402:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000404:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000408:	bf14      	ite	ne
 800040a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800040c:	43a5      	biceq	r5, r4
 800040e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000410:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000412:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000416:	bf14      	ite	ne
 8000418:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800041a:	43a5      	biceq	r5, r4
 800041c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800041e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000420:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000424:	bf14      	ite	ne
 8000426:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000428:	43a5      	biceq	r5, r4
 800042a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800042c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800042e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000432:	bf14      	ite	ne
 8000434:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000436:	ea25 0404 	biceq.w	r4, r5, r4
 800043a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043c:	3601      	adds	r6, #1
 800043e:	2e10      	cmp	r6, #16
 8000440:	f47f af73 	bne.w	800032a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000444:	b003      	add	sp, #12
 8000446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800044a:	2d03      	cmp	r5, #3
 800044c:	d022      	beq.n	8000494 <HAL_GPIO_Init+0x17c>
 800044e:	2d11      	cmp	r5, #17
 8000450:	d184      	bne.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000452:	68ca      	ldr	r2, [r1, #12]
 8000454:	3204      	adds	r2, #4
          break;
 8000456:	e781      	b.n	800035c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000458:	4f1a      	ldr	r7, [pc, #104]	; (80004c4 <HAL_GPIO_Init+0x1ac>)
 800045a:	42bd      	cmp	r5, r7
 800045c:	d009      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800045e:	d812      	bhi.n	8000486 <HAL_GPIO_Init+0x16e>
 8000460:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004d0 <HAL_GPIO_Init+0x1b8>
 8000464:	454d      	cmp	r5, r9
 8000466:	d004      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 8000468:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800046c:	454d      	cmp	r5, r9
 800046e:	f47f af75 	bne.w	800035c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000472:	688a      	ldr	r2, [r1, #8]
 8000474:	b1c2      	cbz	r2, 80004a8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000476:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000478:	bf0c      	ite	eq
 800047a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800047e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000482:	2208      	movs	r2, #8
 8000484:	e76a      	b.n	800035c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000486:	4575      	cmp	r5, lr
 8000488:	d0f3      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800048a:	4565      	cmp	r5, ip
 800048c:	d0f1      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800048e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004d4 <HAL_GPIO_Init+0x1bc>
 8000492:	e7eb      	b.n	800046c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000494:	2200      	movs	r2, #0
 8000496:	e761      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000498:	68ca      	ldr	r2, [r1, #12]
          break;
 800049a:	e75f      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800049c:	68ca      	ldr	r2, [r1, #12]
 800049e:	3208      	adds	r2, #8
          break;
 80004a0:	e75c      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004a2:	68ca      	ldr	r2, [r1, #12]
 80004a4:	320c      	adds	r2, #12
          break;
 80004a6:	e759      	b.n	800035c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004a8:	2204      	movs	r2, #4
 80004aa:	e757      	b.n	800035c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ac:	2500      	movs	r5, #0
 80004ae:	e7a2      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b0:	2501      	movs	r5, #1
 80004b2:	e7a0      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b4:	2502      	movs	r5, #2
 80004b6:	e79e      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b8:	40010400 	.word	0x40010400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800
 80004c4:	10210000 	.word	0x10210000
 80004c8:	10310000 	.word	0x10310000
 80004cc:	10320000 	.word	0x10320000
 80004d0:	10110000 	.word	0x10110000
 80004d4:	10220000 	.word	0x10220000

080004d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004d8:	b10a      	cbz	r2, 80004de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004da:	6101      	str	r1, [r0, #16]
 80004dc:	4770      	bx	lr
 80004de:	0409      	lsls	r1, r1, #16
 80004e0:	e7fb      	b.n	80004da <HAL_GPIO_WritePin+0x2>

080004e2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004e2:	6802      	ldr	r2, [r0, #0]
 80004e4:	6953      	ldr	r3, [r2, #20]
 80004e6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004ea:	d00d      	beq.n	8000508 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ec:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004f0:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004f2:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80004f4:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004f6:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000500:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
 8000506:	4770      	bx	lr
  }
  return HAL_OK;
 8000508:	4618      	mov	r0, r3
}
 800050a:	4770      	bx	lr

0800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800050c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000510:	4604      	mov	r4, r0
 8000512:	4617      	mov	r7, r2
 8000514:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000516:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800051a:	b28e      	uxth	r6, r1
 800051c:	6825      	ldr	r5, [r4, #0]
 800051e:	f1b8 0f01 	cmp.w	r8, #1
 8000522:	bf0c      	ite	eq
 8000524:	696b      	ldreq	r3, [r5, #20]
 8000526:	69ab      	ldrne	r3, [r5, #24]
 8000528:	ea36 0303 	bics.w	r3, r6, r3
 800052c:	bf14      	ite	ne
 800052e:	2001      	movne	r0, #1
 8000530:	2000      	moveq	r0, #0
 8000532:	b908      	cbnz	r0, 8000538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000538:	696b      	ldr	r3, [r5, #20]
 800053a:	055a      	lsls	r2, r3, #21
 800053c:	d512      	bpl.n	8000564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800053e:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000540:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000546:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000548:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800054c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800054e:	2304      	movs	r3, #4
 8000550:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000552:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000556:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000558:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800055c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000564:	1c7b      	adds	r3, r7, #1
 8000566:	d0d9      	beq.n	800051c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000568:	b94f      	cbnz	r7, 800057e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800056a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800056c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800056e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000570:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000574:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000578:	2003      	movs	r0, #3
 800057a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800057e:	f7ff fe39 	bl	80001f4 <HAL_GetTick>
 8000582:	eba0 0009 	sub.w	r0, r0, r9
 8000586:	4287      	cmp	r7, r0
 8000588:	d2c8      	bcs.n	800051c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800058a:	e7ee      	b.n	800056a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800058c <I2C_WaitOnFlagUntilTimeout>:
{
 800058c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000590:	4604      	mov	r4, r0
 8000592:	4690      	mov	r8, r2
 8000594:	461f      	mov	r7, r3
 8000596:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000598:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800059c:	b28d      	uxth	r5, r1
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	f1b9 0f01 	cmp.w	r9, #1
 80005a4:	bf0c      	ite	eq
 80005a6:	695b      	ldreq	r3, [r3, #20]
 80005a8:	699b      	ldrne	r3, [r3, #24]
 80005aa:	ea35 0303 	bics.w	r3, r5, r3
 80005ae:	bf0c      	ite	eq
 80005b0:	2301      	moveq	r3, #1
 80005b2:	2300      	movne	r3, #0
 80005b4:	4543      	cmp	r3, r8
 80005b6:	d002      	beq.n	80005be <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80005b8:	2000      	movs	r0, #0
}
 80005ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80005be:	1c7b      	adds	r3, r7, #1
 80005c0:	d0ed      	beq.n	800059e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005c2:	b95f      	cbnz	r7, 80005dc <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005c4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80005c6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80005c8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80005d2:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80005d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005dc:	f7ff fe0a 	bl	80001f4 <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	4287      	cmp	r7, r0
 80005e4:	d2db      	bcs.n	800059e <I2C_WaitOnFlagUntilTimeout+0x12>
 80005e6:	e7ed      	b.n	80005c4 <I2C_WaitOnFlagUntilTimeout+0x38>

080005e8 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4604      	mov	r4, r0
 80005ec:	460d      	mov	r5, r1
 80005ee:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	d501      	bpl.n	80005fc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80005f8:	2000      	movs	r0, #0
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005fc:	4620      	mov	r0, r4
 80005fe:	f7ff ff70 	bl	80004e2 <I2C_IsAcknowledgeFailed>
 8000602:	b9a8      	cbnz	r0, 8000630 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	d0f3      	beq.n	80005f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000608:	b965      	cbnz	r5, 8000624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800060c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000614:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000616:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000618:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800061a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800061e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000622:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000624:	f7ff fde6 	bl	80001f4 <HAL_GetTick>
 8000628:	1b80      	subs	r0, r0, r6
 800062a:	4285      	cmp	r5, r0
 800062c:	d2e0      	bcs.n	80005f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800062e:	e7ec      	b.n	800060a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000630:	2001      	movs	r0, #1
}
 8000632:	bd70      	pop	{r4, r5, r6, pc}

08000634 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	4604      	mov	r4, r0
 8000638:	460d      	mov	r5, r1
 800063a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	6943      	ldr	r3, [r0, #20]
 8000640:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000644:	d001      	beq.n	800064a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000646:	2000      	movs	r0, #0
}
 8000648:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800064a:	6942      	ldr	r2, [r0, #20]
 800064c:	06d2      	lsls	r2, r2, #27
 800064e:	d50b      	bpl.n	8000668 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000650:	f06f 0210 	mvn.w	r2, #16
 8000654:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000656:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000658:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800065a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800065e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000660:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000662:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000666:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000668:	b95d      	cbnz	r5, 8000682 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800066a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800066c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800066e:	f043 0320 	orr.w	r3, r3, #32
 8000672:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000674:	2320      	movs	r3, #32
 8000676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800067a:	2300      	movs	r3, #0
 800067c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000680:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000682:	f7ff fdb7 	bl	80001f4 <HAL_GetTick>
 8000686:	1b80      	subs	r0, r0, r6
 8000688:	4285      	cmp	r5, r0
 800068a:	d2d7      	bcs.n	800063c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800068c:	e7ed      	b.n	800066a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800068e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800068e:	b570      	push	{r4, r5, r6, lr}
 8000690:	4604      	mov	r4, r0
 8000692:	460d      	mov	r5, r1
 8000694:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	075b      	lsls	r3, r3, #29
 800069c:	d501      	bpl.n	80006a2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800069e:	2000      	movs	r0, #0
 80006a0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006a2:	4620      	mov	r0, r4
 80006a4:	f7ff ff1d 	bl	80004e2 <I2C_IsAcknowledgeFailed>
 80006a8:	b9a8      	cbnz	r0, 80006d6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80006aa:	1c6a      	adds	r2, r5, #1
 80006ac:	d0f3      	beq.n	8000696 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006ae:	b965      	cbnz	r5, 80006ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80006b2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80006ba:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80006bc:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80006be:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80006c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80006c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006ca:	f7ff fd93 	bl	80001f4 <HAL_GetTick>
 80006ce:	1b80      	subs	r0, r0, r6
 80006d0:	4285      	cmp	r5, r0
 80006d2:	d2e0      	bcs.n	8000696 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80006d4:	e7ec      	b.n	80006b0 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
}
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080006dc <HAL_I2C_Init>:
{
 80006dc:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80006de:	4604      	mov	r4, r0
 80006e0:	b908      	cbnz	r0, 80006e6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80006e2:	2001      	movs	r0, #1
 80006e4:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80006e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80006ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006ee:	b91b      	cbnz	r3, 80006f8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80006f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80006f4:	f002 ff1a 	bl	800352c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006f8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006fa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000700:	6813      	ldr	r3, [r2, #0]
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000708:	f001 f91c 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800070c:	6863      	ldr	r3, [r4, #4]
 800070e:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <HAL_I2C_Init+0xf0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d830      	bhi.n	8000776 <HAL_I2C_Init+0x9a>
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <HAL_I2C_Init+0xf4>)
 8000716:	4290      	cmp	r0, r2
 8000718:	d9e3      	bls.n	80006e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800071a:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800071c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800071e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000722:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000724:	3201      	adds	r2, #1
 8000726:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <HAL_I2C_Init+0xf0>)
 800072a:	3801      	subs	r0, #1
 800072c:	4293      	cmp	r3, r2
 800072e:	d832      	bhi.n	8000796 <HAL_I2C_Init+0xba>
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fbb0 f0f3 	udiv	r0, r0, r3
 8000736:	1c43      	adds	r3, r0, #1
 8000738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073c:	2b04      	cmp	r3, #4
 800073e:	bf38      	it	cc
 8000740:	2304      	movcc	r3, #4
 8000742:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000744:	6a22      	ldr	r2, [r4, #32]
 8000746:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000748:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800074a:	4313      	orrs	r3, r2
 800074c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800074e:	68e2      	ldr	r2, [r4, #12]
 8000750:	6923      	ldr	r3, [r4, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000756:	69a2      	ldr	r2, [r4, #24]
 8000758:	6963      	ldr	r3, [r4, #20]
 800075a:	4313      	orrs	r3, r2
 800075c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000766:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000768:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800076a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800076e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000770:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000774:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_I2C_Init+0xfc>)
 8000778:	4290      	cmp	r0, r2
 800077a:	d9b2      	bls.n	80006e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800077c:	4d15      	ldr	r5, [pc, #84]	; (80007d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800077e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000782:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000786:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000788:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800078a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800078c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000790:	fbb2 f2f5 	udiv	r2, r2, r5
 8000794:	e7c6      	b.n	8000724 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000796:	68a2      	ldr	r2, [r4, #8]
 8000798:	b952      	cbnz	r2, 80007b0 <HAL_I2C_Init+0xd4>
 800079a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800079e:	fbb0 f0f3 	udiv	r0, r0, r3
 80007a2:	1c43      	adds	r3, r0, #1
 80007a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a8:	b16b      	cbz	r3, 80007c6 <HAL_I2C_Init+0xea>
 80007aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ae:	e7c8      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007b0:	2219      	movs	r2, #25
 80007b2:	4353      	muls	r3, r2
 80007b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007b8:	1c43      	adds	r3, r0, #1
 80007ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007be:	b113      	cbz	r3, 80007c6 <HAL_I2C_Init+0xea>
 80007c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c4:	e7bd      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e7bb      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007ca:	bf00      	nop
 80007cc:	000186a0 	.word	0x000186a0
 80007d0:	001e847f 	.word	0x001e847f
 80007d4:	000f4240 	.word	0x000f4240
 80007d8:	003d08ff 	.word	0x003d08ff

080007dc <HAL_I2C_Master_Transmit>:
{
 80007dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	461f      	mov	r7, r3
 80007e4:	460d      	mov	r5, r1
 80007e6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80007e8:	f7ff fd04 	bl	80001f4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80007f0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007f2:	2b20      	cmp	r3, #32
 80007f4:	d004      	beq.n	8000800 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80007f6:	2502      	movs	r5, #2
}
 80007f8:	4628      	mov	r0, r5
 80007fa:	b004      	add	sp, #16
 80007fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000800:	9000      	str	r0, [sp, #0]
 8000802:	2319      	movs	r3, #25
 8000804:	2201      	movs	r2, #1
 8000806:	495d      	ldr	r1, [pc, #372]	; (800097c <HAL_I2C_Master_Transmit+0x1a0>)
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff febf 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 800080e:	2800      	cmp	r0, #0
 8000810:	d1f1      	bne.n	80007f6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000812:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000816:	2b01      	cmp	r3, #1
 8000818:	d0ed      	beq.n	80007f6 <HAL_I2C_Master_Transmit+0x1a>
 800081a:	2301      	movs	r3, #1
 800081c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000826:	bf5e      	ittt	pl
 8000828:	681a      	ldrpl	r2, [r3, #0]
 800082a:	f042 0201 	orrpl.w	r2, r2, #1
 800082e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000836:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000838:	2221      	movs	r2, #33	; 0x21
 800083a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800083e:	2210      	movs	r2, #16
 8000840:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000844:	2200      	movs	r2, #0
 8000846:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000848:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800084c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800084e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000850:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000852:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000856:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000858:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800085a:	2a04      	cmp	r2, #4
 800085c:	d004      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
 800085e:	2a01      	cmp	r2, #1
 8000860:	d002      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
 8000862:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000866:	d104      	bne.n	8000872 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e002      	b.n	8000878 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000874:	2a12      	cmp	r2, #18
 8000876:	d0f7      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000878:	9600      	str	r6, [sp, #0]
 800087a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800087c:	2200      	movs	r2, #0
 800087e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fe82 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000888:	bb28      	cbnz	r0, 80008d6 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800088a:	6923      	ldr	r3, [r4, #16]
 800088c:	6822      	ldr	r2, [r4, #0]
 800088e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000892:	d112      	bne.n	80008ba <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000894:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000898:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800089a:	4633      	mov	r3, r6
 800089c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800089e:	4938      	ldr	r1, [pc, #224]	; (8000980 <HAL_I2C_Master_Transmit+0x1a4>)
 80008a0:	4620      	mov	r0, r4
 80008a2:	f7ff fe33 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008a6:	4605      	mov	r5, r0
 80008a8:	b9a0      	cbnz	r0, 80008d4 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	9003      	str	r0, [sp, #12]
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	9203      	str	r2, [sp, #12]
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80008b8:	e050      	b.n	800095c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80008ba:	11eb      	asrs	r3, r5, #7
 80008bc:	f003 0306 	and.w	r3, r3, #6
 80008c0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008c4:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80008c6:	492f      	ldr	r1, [pc, #188]	; (8000984 <HAL_I2C_Master_Transmit+0x1a8>)
 80008c8:	4633      	mov	r3, r6
 80008ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80008cc:	4620      	mov	r0, r4
 80008ce:	f7ff fe1d 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008d2:	b148      	cbz	r0, 80008e8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d8:	2b04      	cmp	r3, #4
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	d107      	bne.n	80008f0 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80008e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80008e4:	2501      	movs	r5, #1
 80008e6:	e787      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	b2ed      	uxtb	r5, r5
 80008ec:	611d      	str	r5, [r3, #16]
 80008ee:	e7d4      	b.n	800089a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80008f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80008f4:	2503      	movs	r5, #3
 80008f6:	e77f      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008f8:	4632      	mov	r2, r6
 80008fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fe73 	bl	80005e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000902:	b140      	cbz	r0, 8000916 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000906:	2b04      	cmp	r3, #4
 8000908:	d1f4      	bne.n	80008f4 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800090a:	6822      	ldr	r2, [r4, #0]
 800090c:	6813      	ldr	r3, [r2, #0]
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e7e6      	b.n	80008e4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000916:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	1c4b      	adds	r3, r1, #1
 800091c:	6263      	str	r3, [r4, #36]	; 0x24
 800091e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000922:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000924:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000926:	3b01      	subs	r3, #1
 8000928:	b29b      	uxth	r3, r3
 800092a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800092c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800092e:	1e53      	subs	r3, r2, #1
 8000930:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000932:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000934:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000936:	d50a      	bpl.n	800094e <HAL_I2C_Master_Transmit+0x172>
 8000938:	b14b      	cbz	r3, 800094e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800093a:	1c8b      	adds	r3, r1, #2
 800093c:	6263      	str	r3, [r4, #36]	; 0x24
 800093e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000940:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000942:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000946:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800094e:	4632      	mov	r2, r6
 8000950:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000952:	4620      	mov	r0, r4
 8000954:	f7ff fe9b 	bl	800068e <I2C_WaitOnBTFFlagUntilTimeout>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1d3      	bne.n	8000904 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 800095c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ca      	bne.n	80008f8 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000962:	6821      	ldr	r1, [r4, #0]
 8000964:	680a      	ldr	r2, [r1, #0]
 8000966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800096c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800096e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000972:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000976:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800097a:	e73d      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
 800097c:	00100002 	.word	0x00100002
 8000980:	00010002 	.word	0x00010002
 8000984:	00010008 	.word	0x00010008

08000988 <HAL_I2C_Master_Receive>:
{
 8000988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	4698      	mov	r8, r3
 8000992:	460d      	mov	r5, r1
 8000994:	4691      	mov	r9, r2
 8000996:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000998:	f7ff fc2c 	bl	80001f4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800099c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80009a0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	d004      	beq.n	80009b0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80009a6:	2502      	movs	r5, #2
}
 80009a8:	4628      	mov	r0, r5
 80009aa:	b009      	add	sp, #36	; 0x24
 80009ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009b0:	9000      	str	r0, [sp, #0]
 80009b2:	2319      	movs	r3, #25
 80009b4:	2201      	movs	r2, #1
 80009b6:	49a2      	ldr	r1, [pc, #648]	; (8000c40 <HAL_I2C_Master_Receive+0x2b8>)
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fde7 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d1f1      	bne.n	80009a6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80009c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d0ed      	beq.n	80009a6 <HAL_I2C_Master_Receive+0x1e>
 80009ca:	2301      	movs	r3, #1
 80009cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80009d6:	bf5e      	ittt	pl
 80009d8:	681a      	ldrpl	r2, [r3, #0]
 80009da:	f042 0201 	orrpl.w	r2, r2, #1
 80009de:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009e6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80009e8:	2222      	movs	r2, #34	; 0x22
 80009ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80009ee:	2210      	movs	r2, #16
 80009f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80009f4:	2200      	movs	r2, #0
 80009f6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009f8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80009fc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a00:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000a02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000a04:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000a08:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000a0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a0c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a0e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a10:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000a14:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a16:	d004      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d002      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
 8000a1c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000a20:	d104      	bne.n	8000a2c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000a2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000a2e:	2a11      	cmp	r2, #17
 8000a30:	d0f7      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a32:	9600      	str	r6, [sp, #0]
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fda5 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d14d      	bne.n	8000ae2 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a46:	6923      	ldr	r3, [r4, #16]
 8000a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	d139      	bne.n	8000ac4 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000a50:	f045 0501 	orr.w	r5, r5, #1
 8000a54:	b2ed      	uxtb	r5, r5
 8000a56:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a58:	4633      	mov	r3, r6
 8000a5a:	463a      	mov	r2, r7
 8000a5c:	4979      	ldr	r1, [pc, #484]	; (8000c44 <HAL_I2C_Master_Receive+0x2bc>)
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fd54 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a64:	4605      	mov	r5, r0
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d13a      	bne.n	8000ae0 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8000a6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d069      	beq.n	8000b46 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d17a      	bne.n	8000b6c <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a7c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	9504      	str	r5, [sp, #16]
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	9204      	str	r2, [sp, #16]
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	9204      	str	r2, [sp, #16]
 8000a8c:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a96:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000a98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000c4c <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8000a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d05b      	beq.n	8000b5a <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	f200 80d4 	bhi.w	8000c50 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d17b      	bne.n	8000ba4 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000aac:	4632      	mov	r2, r6
 8000aae:	4639      	mov	r1, r7
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f7ff fdbf 	bl	8000634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	f000 8093 	beq.w	8000be2 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d116      	bne.n	8000af0 <HAL_I2C_Master_Receive+0x168>
 8000ac2:	e03e      	b.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000ac4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000ac8:	f008 0806 	and.w	r8, r8, #6
 8000acc:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000ad0:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000ad2:	495d      	ldr	r1, [pc, #372]	; (8000c48 <HAL_I2C_Master_Receive+0x2c0>)
 8000ad4:	4633      	mov	r3, r6
 8000ad6:	463a      	mov	r2, r7
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff fd17 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ade:	b148      	cbz	r0, 8000af4 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	d128      	bne.n	8000b3e <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8000aec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8000af0:	2501      	movs	r5, #1
 8000af2:	e759      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	b2ed      	uxtb	r5, r5
 8000af8:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000afa:	463a      	mov	r2, r7
 8000afc:	4633      	mov	r3, r6
 8000afe:	4951      	ldr	r1, [pc, #324]	; (8000c44 <HAL_I2C_Master_Receive+0x2bc>)
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff fd03 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b06:	4602      	mov	r2, r0
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d1e9      	bne.n	8000ae0 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	9007      	str	r0, [sp, #28]
 8000b10:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b12:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b14:	9107      	str	r1, [sp, #28]
 8000b16:	6999      	ldr	r1, [r3, #24]
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000b22:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b24:	9600      	str	r6, [sp, #0]
 8000b26:	463b      	mov	r3, r7
 8000b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b2c:	f7ff fd2e 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1d6      	bne.n	8000ae2 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000b3a:	6113      	str	r3, [r2, #16]
 8000b3c:	e78c      	b.n	8000a58 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8000b3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8000b42:	2503      	movs	r5, #3
 8000b44:	e730      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b46:	9503      	str	r5, [sp, #12]
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	9203      	str	r2, [sp, #12]
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	9203      	str	r2, [sp, #12]
 8000b50:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b58:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000b66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000b6a:	e71d      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8000b6c:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b6e:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000b70:	d10e      	bne.n	8000b90 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	9505      	str	r5, [sp, #20]
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	9205      	str	r2, [sp, #20]
 8000b82:	699a      	ldr	r2, [r3, #24]
 8000b84:	9205      	str	r2, [sp, #20]
 8000b86:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b8e:	e781      	b.n	8000a94 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b94:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b96:	9506      	str	r5, [sp, #24]
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	9206      	str	r2, [sp, #24]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	9306      	str	r3, [sp, #24]
 8000ba0:	9b06      	ldr	r3, [sp, #24]
 8000ba2:	e779      	b.n	8000a98 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8000ba4:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ba6:	9600      	str	r6, [sp, #0]
 8000ba8:	463b      	mov	r3, r7
 8000baa:	f04f 0200 	mov.w	r2, #0
 8000bae:	4641      	mov	r1, r8
 8000bb0:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000bb2:	d124      	bne.n	8000bfe <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bb4:	f7ff fcea 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1c2      	bne.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
 8000bbc:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	1c51      	adds	r1, r2, #1
 8000bce:	6261      	str	r1, [r4, #36]	; 0x24
 8000bd0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000bd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000be0:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	6262      	str	r2, [r4, #36]	; 0x24
 8000be8:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bea:	6912      	ldr	r2, [r2, #16]
 8000bec:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8000bee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000bfc:	e74e      	b.n	8000a9c <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bfe:	f7ff fcc5 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000c02:	4602      	mov	r2, r0
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d19c      	bne.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000c08:	6821      	ldr	r1, [r4, #0]
 8000c0a:	680b      	ldr	r3, [r1, #0]
 8000c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c10:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c12:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c16:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c18:	1c59      	adds	r1, r3, #1
 8000c1a:	6261      	str	r1, [r4, #36]	; 0x24
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	6909      	ldr	r1, [r1, #16]
 8000c20:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8000c22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c24:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8000c26:	3b01      	subs	r3, #1
 8000c28:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c2c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	f7ff fca9 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d0bf      	beq.n	8000bbe <HAL_I2C_Master_Receive+0x236>
 8000c3e:	e780      	b.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
 8000c40:	00100002 	.word	0x00100002
 8000c44:	00010002 	.word	0x00010002
 8000c48:	00010008 	.word	0x00010008
 8000c4c:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000c50:	4632      	mov	r2, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff fced 	bl	8000634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f47f af2e 	bne.w	8000abc <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	6262      	str	r2, [r4, #36]	; 0x24
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	6912      	ldr	r2, [r2, #16]
 8000c6a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8000c6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c6e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8000c70:	3b01      	subs	r3, #1
 8000c72:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c7c:	6953      	ldr	r3, [r2, #20]
 8000c7e:	075b      	lsls	r3, r3, #29
 8000c80:	f57f af0c 	bpl.w	8000a9c <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c86:	1c59      	adds	r1, r3, #1
 8000c88:	6261      	str	r1, [r4, #36]	; 0x24
 8000c8a:	e7ae      	b.n	8000bea <HAL_I2C_Master_Receive+0x262>

08000c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000c90:	4604      	mov	r4, r0
{
 8000c92:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d060      	beq.n	8000d5a <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000c98:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000c9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ca0:	b91b      	cbnz	r3, 8000caa <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ca2:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ca6:	f002 fe93 	bl	80039d0 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000caa:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cac:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000cae:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000cb0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cb4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000cb8:	f001 f89c 	bl	8001df4 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	f104 0804 	add.w	r8, r4, #4
 8000cc6:	6033      	str	r3, [r6, #0]
 8000cc8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f001 f881 	bl	8001dd4 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	6820      	ldr	r0, [r4, #0]
 8000cd6:	f001 f897 	bl	8001e08 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000cde:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000ce0:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000ce8:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000cec:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000cee:	3101      	adds	r1, #1
 8000cf0:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000cf2:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000cf6:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000cfa:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000cfc:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000cfe:	6410      	str	r0, [r2, #64]	; 0x40
 8000d00:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_PCD_Init+0x5c>
 8000d06:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000d08:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000d0a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000d0e:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000d10:	3201      	adds	r2, #1
 8000d12:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000d14:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000d18:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000d1c:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000d20:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000d24:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000d28:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000d2c:	d1ed      	bne.n	8000d0a <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d2e:	466e      	mov	r6, sp
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	6033      	str	r3, [r6, #0]
 8000d38:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	f001 f865 	bl	8001e0c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000d42:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000d44:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000d48:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000d4a:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000d4e:	f001 fb35 	bl	80023bc <USB_DevDisconnect>
  return HAL_OK;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	b006      	add	sp, #24
 8000d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	e7fa      	b.n	8000d54 <HAL_PCD_Init+0xc8>

08000d5e <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000d5e:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000d62:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d64:	2b01      	cmp	r3, #1
{
 8000d66:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d68:	d00e      	beq.n	8000d88 <HAL_PCD_Start+0x2a>
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000d70:	f002 ff5b 	bl	8003c2a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000d74:	6820      	ldr	r0, [r4, #0]
 8000d76:	f001 fb1f 	bl	80023b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	f001 f831 	bl	8001de2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d88:	2002      	movs	r0, #2
}
 8000d8a:	bd10      	pop	{r4, pc}

08000d8c <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000d8c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000d90:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d92:	2a01      	cmp	r2, #1
{
 8000d94:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d96:	d00b      	beq.n	8000db0 <HAL_PCD_SetAddress+0x24>
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000d9e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000da2:	6800      	ldr	r0, [r0, #0]
 8000da4:	f001 fb02 	bl	80023ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000dae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000db0:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000db8:	b248      	sxtb	r0, r1
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dc0:	bfb5      	itete	lt
 8000dc2:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000dc6:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000dcc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000dd0:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000dd2:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000dd4:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000dd6:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000dd8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000ddc:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d009      	beq.n	8000df6 <HAL_PCD_EP_Open+0x42>
 8000de2:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000de4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000de6:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000dea:	f001 f82b 	bl	8001e44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000df6:	2002      	movs	r0, #2
}
 8000df8:	bd38      	pop	{r3, r4, r5, pc}

08000dfa <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000dfa:	b24b      	sxtb	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e02:	bfb5      	itete	lt
 8000e04:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e08:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e0c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e0e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000e12:	0fdb      	lsrs	r3, r3, #31
{  
 8000e14:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000e16:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000e18:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000e1a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000e1e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d009      	beq.n	8000e38 <HAL_PCD_EP_Close+0x3e>
 8000e24:	2301      	movs	r3, #1
 8000e26:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000e2a:	6800      	ldr	r0, [r0, #0]
 8000e2c:	f001 f97c 	bl	8002128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000e36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000e38:	2002      	movs	r0, #2
}
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000e3e:	2600      	movs	r6, #0
 8000e40:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e44:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000e46:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000e48:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e4c:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e50:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000e52:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000e56:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000e5a:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000e5e:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e62:	6800      	ldr	r0, [r0, #0]
 8000e64:	f001 fac4 	bl	80023f0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000e68:	4630      	mov	r0, r6
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}

08000e6c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000e6c:	f001 010f 	and.w	r1, r1, #15
 8000e70:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000e74:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000e78:	4770      	bx	lr

08000e7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e7e:	b570      	push	{r4, r5, r6, lr}
 8000e80:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000e82:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000e84:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000e86:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000e88:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000e8a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e8e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e92:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000e94:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000e96:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000e98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e9c:	6800      	ldr	r0, [r0, #0]
 8000e9e:	f001 faa7 	bl	80023f0 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ea8 <HAL_PCD_IRQHandler>:
{ 
 8000ea8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eae:	6800      	ldr	r0, [r0, #0]
 8000eb0:	f001 fa86 	bl	80023c0 <USB_ReadInterrupts>
 8000eb4:	0400      	lsls	r0, r0, #16
 8000eb6:	f100 8098 	bmi.w	8000fea <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	f001 fa80 	bl	80023c0 <USB_ReadInterrupts>
 8000ec0:	0541      	lsls	r1, r0, #21
 8000ec2:	d50f      	bpl.n	8000ee4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000ec6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c1b      	lsrs	r3, r3, #16
 8000ed4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000ed8:	f002 fdb1 	bl	8003a3e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff ff54 	bl	8000d8c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f001 fa6b 	bl	80023c0 <USB_ReadInterrupts>
 8000eea:	0447      	lsls	r7, r0, #17
 8000eec:	d508      	bpl.n	8000f00 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	f001 fa5d 	bl	80023c0 <USB_ReadInterrupts>
 8000f06:	0486      	lsls	r6, r0, #18
 8000f08:	d508      	bpl.n	8000f1c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	f001 fa4f 	bl	80023c0 <USB_ReadInterrupts>
 8000f22:	04c5      	lsls	r5, r0, #19
 8000f24:	d51c      	bpl.n	8000f60 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000f26:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000f28:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000f2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	041b      	lsls	r3, r3, #16
 8000f34:	0c1b      	lsrs	r3, r3, #16
 8000f36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000f3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f3e:	f023 0308 	bic.w	r3, r3, #8
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	0c1b      	lsrs	r3, r3, #16
 8000f46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000f4a:	f002 fd95 	bl	8003a78 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000f4e:	6822      	ldr	r2, [r4, #0]
 8000f50:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f58:	041b      	lsls	r3, r3, #16
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	f001 fa2d 	bl	80023c0 <USB_ReadInterrupts>
 8000f66:	0500      	lsls	r0, r0, #20
 8000f68:	d51d      	bpl.n	8000fa6 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000f7a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f82:	041b      	lsls	r3, r3, #16
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f8a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000f98:	f001 fa12 	bl	80023c0 <USB_ReadInterrupts>
 8000f9c:	04c1      	lsls	r1, r0, #19
 8000f9e:	d402      	bmi.n	8000fa6 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f002 fd59 	bl	8003a58 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000fa6:	6820      	ldr	r0, [r4, #0]
 8000fa8:	f001 fa0a 	bl	80023c0 <USB_ReadInterrupts>
 8000fac:	0582      	lsls	r2, r0, #22
 8000fae:	d50b      	bpl.n	8000fc8 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000fb0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000fb2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000fb4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000fc4:	f002 fd37 	bl	8003a36 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f001 f9f9 	bl	80023c0 <USB_ReadInterrupts>
 8000fce:	05c3      	lsls	r3, r0, #23
 8000fd0:	d508      	bpl.n	8000fe4 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fdc:	041b      	lsls	r3, r3, #16
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000fea:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000fec:	4fc8      	ldr	r7, [pc, #800]	; (8001310 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000fee:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001314 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ff2:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001318 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000ff6:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000ffa:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001004:	b29b      	uxth	r3, r3
 8001006:	f8ad 3004 	strh.w	r3, [sp, #4]
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	f57f af55 	bpl.w	8000eba <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001010:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8001014:	f015 050f 	ands.w	r5, r5, #15
 8001018:	f040 80ab 	bne.w	8001172 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800101c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001020:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001022:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001026:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001028:	d126      	bne.n	8001078 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800102a:	403b      	ands	r3, r7
 800102c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800102e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001032:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001036:	b29b      	uxth	r3, r3
 8001038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800103c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001040:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001044:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800104c:	4413      	add	r3, r2
 800104e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001050:	4620      	mov	r0, r4
 8001052:	f002 fce9 	bl	8003a28 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001056:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0cf      	beq.n	8000ffe <HAL_PCD_IRQHandler+0x156>
 800105e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001060:	2a00      	cmp	r2, #0
 8001062:	d1cc      	bne.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001064:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001072:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001076:	e7c2      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001078:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800107c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001080:	051a      	lsls	r2, r3, #20
 8001082:	d51f      	bpl.n	80010c4 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001084:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001088:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800108c:	b29b      	uxth	r3, r3
 800108e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001092:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001096:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800109a:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800109e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80010a6:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80010aa:	f001 faa1 	bl	80025f0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80010ae:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80010b0:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80010b2:	8813      	ldrh	r3, [r2, #0]
 80010b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b8:	051b      	lsls	r3, r3, #20
 80010ba:	0d1b      	lsrs	r3, r3, #20
 80010bc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80010be:	f002 fca5 	bl	8003a0c <HAL_PCD_SetupStageCallback>
 80010c2:	e79c      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	d598      	bpl.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010cc:	8803      	ldrh	r3, [r0, #0]
 80010ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d2:	051b      	lsls	r3, r3, #20
 80010d4:	0d1b      	lsrs	r3, r3, #20
 80010d6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010dc:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80010ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010f2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 80010f6:	b163      	cbz	r3, 8001112 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80010f8:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80010fc:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001100:	f001 fa76 	bl	80025f0 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001104:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001108:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800110c:	4413      	add	r3, r2
 800110e:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001112:	2100      	movs	r1, #0
 8001114:	4620      	mov	r0, r4
 8001116:	f002 fc7f 	bl	8003a18 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800111a:	6822      	ldr	r2, [r4, #0]
 800111c:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8001120:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001124:	2d3e      	cmp	r5, #62	; 0x3e
 8001126:	b289      	uxth	r1, r1
 8001128:	f101 0106 	add.w	r1, r1, #6
 800112c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001130:	d917      	bls.n	8001162 <HAL_PCD_IRQHandler+0x2ba>
 8001132:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001136:	06ee      	lsls	r6, r5, #27
 8001138:	bf04      	itt	eq
 800113a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800113e:	b29b      	uxtheq	r3, r3
 8001140:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001144:	b29b      	uxth	r3, r3
 8001146:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800114a:	8813      	ldrh	r3, [r2, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	ea03 0308 	and.w	r3, r3, r8
 8001152:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115e:	8013      	strh	r3, [r2, #0]
 8001160:	e74d      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001162:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001166:	07ed      	lsls	r5, r5, #31
 8001168:	bf44      	itt	mi
 800116a:	3301      	addmi	r3, #1
 800116c:	b29b      	uxthmi	r3, r3
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	e7e8      	b.n	8001144 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001172:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001176:	b29b      	uxth	r3, r3
 8001178:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800117c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001180:	0419      	lsls	r1, r3, #16
 8001182:	d53f      	bpl.n	8001204 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001184:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001188:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800118c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001190:	051b      	lsls	r3, r3, #20
 8001192:	0d1b      	lsrs	r3, r3, #20
 8001194:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001198:	eb04 010a 	add.w	r1, r4, sl
 800119c:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d174      	bne.n	800128e <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80011a8:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3306      	adds	r3, #6
 80011b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80011b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011b8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80011bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80011c0:	b136      	cbz	r6, 80011d0 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80011c2:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80011c6:	4633      	mov	r3, r6
 80011c8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80011cc:	f001 fa10 	bl	80025f0 <USB_ReadPMA>
 80011d0:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80011d4:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80011d8:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80011dc:	4433      	add	r3, r6
 80011de:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011e2:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 80011e6:	4432      	add	r2, r6
 80011e8:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011ec:	b123      	cbz	r3, 80011f8 <HAL_PCD_IRQHandler+0x350>
 80011ee:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 80011f2:	4286      	cmp	r6, r0
 80011f4:	f080 8086 	bcs.w	8001304 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80011f8:	44a2      	add	sl, r4
 80011fa:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 80011fe:	4620      	mov	r0, r4
 8001200:	f002 fc0a 	bl	8003a18 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001204:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001208:	061a      	lsls	r2, r3, #24
 800120a:	f57f aef8 	bpl.w	8000ffe <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800120e:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001210:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001212:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001216:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001218:	b29b      	uxth	r3, r3
 800121a:	403b      	ands	r3, r7
 800121c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001220:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001224:	3502      	adds	r5, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d178      	bne.n	800131c <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800122a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800122e:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001232:	b29b      	uxth	r3, r3
 8001234:	3302      	adds	r3, #2
 8001236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800123a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800123e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001242:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800124a:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 800124c:	b11b      	cbz	r3, 8001256 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800124e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001250:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001252:	f001 f8bb 	bl	80023cc <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	4426      	add	r6, r4
 800125a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800125e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001262:	b29b      	uxth	r3, r3
 8001264:	3302      	adds	r3, #2
 8001266:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800126a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800126e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8001272:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001274:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001278:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 800127a:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800127c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800127e:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001280:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8085 	bne.w	8001392 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001288:	f002 fbce 	bl	8003a28 <HAL_PCD_DataInStageCallback>
 800128c:	e6b7      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800128e:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8001292:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800129c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80012a0:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80012a2:	d021      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012a4:	3202      	adds	r2, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012ac:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80012b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80012b4:	b136      	cbz	r6, 80012c4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012b6:	4633      	mov	r3, r6
 80012b8:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012bc:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80012c0:	f001 f996 	bl	80025f0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80012c4:	eb04 030a 	add.w	r3, r4, sl
 80012c8:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80012cc:	6822      	ldr	r2, [r4, #0]
 80012ce:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80012d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012d6:	051b      	lsls	r3, r3, #20
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012e2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012e6:	e773      	b.n	80011d0 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012e8:	3206      	adds	r2, #6
 80012ea:	4413      	add	r3, r2
 80012ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012f0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80012f4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d0e3      	beq.n	80012c4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012fc:	4633      	mov	r3, r6
 80012fe:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001302:	e7db      	b.n	80012bc <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001304:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd97 	bl	8000e3c <HAL_PCD_EP_Receive>
 800130e:	e779      	b.n	8001204 <HAL_PCD_IRQHandler+0x35c>
 8001310:	ffff8f0f 	.word	0xffff8f0f
 8001314:	ffffbf8f 	.word	0xffffbf8f
 8001318:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800131c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001320:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800132a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800132e:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001330:	d020      	beq.n	8001374 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001332:	3202      	adds	r2, #2
 8001334:	4413      	add	r3, r2
 8001336:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800133a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800133e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001346:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001348:	b11b      	cbz	r3, 8001352 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800134a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800134c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800134e:	f001 f83d 	bl	80023cc <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001352:	19a3      	adds	r3, r4, r6
 8001354:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800135e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001362:	051b      	lsls	r3, r3, #20
 8001364:	0d1b      	lsrs	r3, r3, #20
 8001366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001372:	e770      	b.n	8001256 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001374:	3206      	adds	r2, #6
 8001376:	4413      	add	r3, r2
 8001378:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800137c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001380:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001388:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0e1      	beq.n	8001352 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800138e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001390:	e7dc      	b.n	800134c <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001392:	f7ff fd72 	bl	8000e7a <HAL_PCD_EP_Transmit>
 8001396:	e632      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>

08001398 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001398:	2201      	movs	r2, #1
{
 800139a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800139c:	b24b      	sxtb	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013a4:	bfb5      	itete	lt
 80013a6:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80013aa:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013ae:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80013b0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80013b4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80013b6:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80013b8:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80013ba:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80013bc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80013be:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80013c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00e      	beq.n	80013e6 <HAL_PCD_EP_SetStall+0x4e>
 80013c8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80013cc:	6800      	ldr	r0, [r0, #0]
 80013ce:	f000 ff79 	bl	80022c4 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80013d2:	b925      	cbnz	r5, 80013de <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013d4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	f000 fff5 	bl	80023c8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80013de:	2000      	movs	r0, #0
 80013e0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80013e6:	2002      	movs	r0, #2
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}

080013ea <HAL_PCD_EP_ClrStall>:
{
 80013ea:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 80013ec:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 80013ee:	b24b      	sxtb	r3, r1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013f6:	bfb5      	itete	lt
 80013f8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80013fc:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001400:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001402:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001406:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001408:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800140a:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800140c:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800140e:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001412:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001414:	2b01      	cmp	r3, #1
 8001416:	d009      	beq.n	800142c <HAL_PCD_EP_ClrStall+0x42>
 8001418:	2301      	movs	r3, #1
 800141a:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800141e:	6800      	ldr	r0, [r0, #0]
 8001420:	f000 ff82 	bl	8002328 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001424:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001428:	4620      	mov	r0, r4
 800142a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800142c:	2002      	movs	r0, #2
}
 800142e:	bd38      	pop	{r3, r4, r5, pc}

08001430 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001430:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001434:	bf1b      	ittet	ne
 8001436:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800143a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800143e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001442:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001444:	bf08      	it	eq
 8001446:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800144a:	b91a      	cbnz	r2, 8001454 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800144c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800144e:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001450:	2000      	movs	r0, #0
 8001452:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001454:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001456:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001458:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800145a:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800145c:	8103      	strh	r3, [r0, #8]
 800145e:	e7f7      	b.n	8001450 <HAL_PCDEx_PMAConfig+0x20>

08001460 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001460:	6803      	ldr	r3, [r0, #0]
{
 8001462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	07db      	lsls	r3, r3, #31
{
 8001468:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	d410      	bmi.n	800148e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	079f      	lsls	r7, r3, #30
 8001470:	d45e      	bmi.n	8001530 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	0719      	lsls	r1, r3, #28
 8001476:	f100 8095 	bmi.w	80015a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	075a      	lsls	r2, r3, #29
 800147e:	f100 80bf 	bmi.w	8001600 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001482:	69ea      	ldr	r2, [r5, #28]
 8001484:	2a00      	cmp	r2, #0
 8001486:	f040 812d 	bne.w	80016e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	e014      	b.n	80014b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800148e:	4c90      	ldr	r4, [pc, #576]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d007      	beq.n	80014aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 80014a4:	6863      	ldr	r3, [r4, #4]
 80014a6:	03de      	lsls	r6, r3, #15
 80014a8:	d509      	bpl.n	80014be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	039c      	lsls	r4, r3, #14
 80014ae:	d5dd      	bpl.n	800146c <HAL_RCC_OscConfig+0xc>
 80014b0:	686b      	ldr	r3, [r5, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1da      	bne.n	800146c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	b002      	add	sp, #8
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	686b      	ldr	r3, [r5, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d110      	bne.n	80014e8 <HAL_RCC_OscConfig+0x88>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7fe fe91 	bl	80001f4 <HAL_GetTick>
 80014d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	0398      	lsls	r0, r3, #14
 80014d8:	d4c8      	bmi.n	800146c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014da:	f7fe fe8b 	bl	80001f4 <HAL_GetTick>
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	2864      	cmp	r0, #100	; 0x64
 80014e2:	d9f7      	bls.n	80014d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80014e4:	2003      	movs	r0, #3
 80014e6:	e7e7      	b.n	80014b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e8:	b99b      	cbnz	r3, 8001512 <HAL_RCC_OscConfig+0xb2>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014fa:	f7fe fe7b 	bl	80001f4 <HAL_GetTick>
 80014fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	0399      	lsls	r1, r3, #14
 8001504:	d5b2      	bpl.n	800146c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001506:	f7fe fe75 	bl	80001f4 <HAL_GetTick>
 800150a:	1b80      	subs	r0, r0, r6
 800150c:	2864      	cmp	r0, #100	; 0x64
 800150e:	d9f7      	bls.n	8001500 <HAL_RCC_OscConfig+0xa0>
 8001510:	e7e8      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	d103      	bne.n	8001522 <HAL_RCC_OscConfig+0xc2>
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	e7d1      	b.n	80014c6 <HAL_RCC_OscConfig+0x66>
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152e:	e7cd      	b.n	80014cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001530:	4c67      	ldr	r4, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	f013 0f0c 	tst.w	r3, #12
 8001538:	d007      	beq.n	800154a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d110      	bne.n	8001566 <HAL_RCC_OscConfig+0x106>
 8001544:	6863      	ldr	r3, [r4, #4]
 8001546:	03da      	lsls	r2, r3, #15
 8001548:	d40d      	bmi.n	8001566 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	d502      	bpl.n	8001556 <HAL_RCC_OscConfig+0xf6>
 8001550:	692b      	ldr	r3, [r5, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1af      	bne.n	80014b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	696a      	ldr	r2, [r5, #20]
 800155a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800155e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001562:	6023      	str	r3, [r4, #0]
 8001564:	e785      	b.n	8001472 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	692a      	ldr	r2, [r5, #16]
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 800156a:	b16a      	cbz	r2, 8001588 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001570:	f7fe fe40 	bl	80001f4 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	079f      	lsls	r7, r3, #30
 800157a:	d4ec      	bmi.n	8001556 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7fe fe3a 	bl	80001f4 <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	2802      	cmp	r0, #2
 8001584:	d9f7      	bls.n	8001576 <HAL_RCC_OscConfig+0x116>
 8001586:	e7ad      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001588:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800158a:	f7fe fe33 	bl	80001f4 <HAL_GetTick>
 800158e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	0798      	lsls	r0, r3, #30
 8001594:	f57f af6d 	bpl.w	8001472 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7fe fe2c 	bl	80001f4 <HAL_GetTick>
 800159c:	1b80      	subs	r0, r0, r6
 800159e:	2802      	cmp	r0, #2
 80015a0:	d9f6      	bls.n	8001590 <HAL_RCC_OscConfig+0x130>
 80015a2:	e79f      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	69aa      	ldr	r2, [r5, #24]
 80015a6:	4c4a      	ldr	r4, [pc, #296]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x278>)
 80015aa:	b1da      	cbz	r2, 80015e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015b0:	f7fe fe20 	bl	80001f4 <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d50d      	bpl.n	80015d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80015ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80015cc:	9b01      	ldr	r3, [sp, #4]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_RCC_OscConfig+0x16a>
 80015d6:	e750      	b.n	800147a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d8:	f7fe fe0c 	bl	80001f4 <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9e9      	bls.n	80015b6 <HAL_RCC_OscConfig+0x156>
 80015e2:	e77f      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80015e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015e6:	f7fe fe05 	bl	80001f4 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ee:	079f      	lsls	r7, r3, #30
 80015f0:	f57f af43 	bpl.w	800147a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7fe fdfe 	bl	80001f4 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015fe:	e771      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001600:	4c33      	ldr	r4, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001602:	69e3      	ldr	r3, [r4, #28]
 8001604:	00d8      	lsls	r0, r3, #3
 8001606:	d424      	bmi.n	8001652 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001608:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	69e3      	ldr	r3, [r4, #28]
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61e3      	str	r3, [r4, #28]
 8001612:	69e3      	ldr	r3, [r4, #28]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4e30      	ldr	r6, [pc, #192]	; (80016e0 <HAL_RCC_OscConfig+0x280>)
 800161e:	6833      	ldr	r3, [r6, #0]
 8001620:	05d9      	lsls	r1, r3, #23
 8001622:	d518      	bpl.n	8001656 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	68eb      	ldr	r3, [r5, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d126      	bne.n	8001678 <HAL_RCC_OscConfig+0x218>
 800162a:	6a23      	ldr	r3, [r4, #32]
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001632:	f7fe fddf 	bl	80001f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800163a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	6a23      	ldr	r3, [r4, #32]
 800163e:	079b      	lsls	r3, r3, #30
 8001640:	d53f      	bpl.n	80016c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001642:	2f00      	cmp	r7, #0
 8001644:	f43f af1d 	beq.w	8001482 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	69e3      	ldr	r3, [r4, #28]
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	61e3      	str	r3, [r4, #28]
 8001650:	e717      	b.n	8001482 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2700      	movs	r7, #0
 8001654:	e7e2      	b.n	800161c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	6833      	ldr	r3, [r6, #0]
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800165e:	f7fe fdc9 	bl	80001f4 <HAL_GetTick>
 8001662:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	6833      	ldr	r3, [r6, #0]
 8001666:	05da      	lsls	r2, r3, #23
 8001668:	d4dc      	bmi.n	8001624 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7fe fdc3 	bl	80001f4 <HAL_GetTick>
 800166e:	eba0 0008 	sub.w	r0, r0, r8
 8001672:	2864      	cmp	r0, #100	; 0x64
 8001674:	d9f6      	bls.n	8001664 <HAL_RCC_OscConfig+0x204>
 8001676:	e735      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	b9ab      	cbnz	r3, 80016a6 <HAL_RCC_OscConfig+0x246>
 800167a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6223      	str	r3, [r4, #32]
 8001686:	6a23      	ldr	r3, [r4, #32]
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800168e:	f7fe fdb1 	bl	80001f4 <HAL_GetTick>
 8001692:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	6a23      	ldr	r3, [r4, #32]
 8001696:	0798      	lsls	r0, r3, #30
 8001698:	d5d3      	bpl.n	8001642 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7fe fdab 	bl	80001f4 <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	4540      	cmp	r0, r8
 80016a2:	d9f7      	bls.n	8001694 <HAL_RCC_OscConfig+0x234>
 80016a4:	e71e      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	6a23      	ldr	r3, [r4, #32]
 80016aa:	d103      	bne.n	80016b4 <HAL_RCC_OscConfig+0x254>
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6223      	str	r3, [r4, #32]
 80016b2:	e7ba      	b.n	800162a <HAL_RCC_OscConfig+0x1ca>
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6223      	str	r3, [r4, #32]
 80016ba:	6a23      	ldr	r3, [r4, #32]
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	e7b6      	b.n	8001630 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7fe fd97 	bl	80001f4 <HAL_GetTick>
 80016c6:	eba0 0008 	sub.w	r0, r0, r8
 80016ca:	42b0      	cmp	r0, r6
 80016cc:	d9b6      	bls.n	800163c <HAL_RCC_OscConfig+0x1dc>
 80016ce:	e709      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420000 	.word	0x42420000
 80016d8:	42420480 	.word	0x42420480
 80016dc:	20000118 	.word	0x20000118
 80016e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4c22      	ldr	r4, [pc, #136]	; (8001770 <HAL_RCC_OscConfig+0x310>)
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	f43f aee2 	beq.w	80014b6 <HAL_RCC_OscConfig+0x56>
 80016f2:	2300      	movs	r3, #0
 80016f4:	4e1f      	ldr	r6, [pc, #124]	; (8001774 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	d12b      	bne.n	8001754 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80016fc:	f7fe fd7a 	bl	80001f4 <HAL_GetTick>
 8001700:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	0199      	lsls	r1, r3, #6
 8001706:	d41f      	bmi.n	8001748 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	6a2b      	ldr	r3, [r5, #32]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001710:	6862      	ldr	r2, [r4, #4]
 8001712:	68a9      	ldr	r1, [r5, #8]
 8001714:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001718:	430a      	orrs	r2, r1
 800171a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	430b      	orrs	r3, r1
 8001722:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001726:	4313      	orrs	r3, r2
 8001728:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800172a:	2301      	movs	r3, #1
 800172c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800172e:	f7fe fd61 	bl	80001f4 <HAL_GetTick>
 8001732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	019a      	lsls	r2, r3, #6
 8001738:	f53f aea7 	bmi.w	800148a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7fe fd5a 	bl	80001f4 <HAL_GetTick>
 8001740:	1b40      	subs	r0, r0, r5
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x2d4>
 8001746:	e6cd      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7fe fd54 	bl	80001f4 <HAL_GetTick>
 800174c:	1bc0      	subs	r0, r0, r7
 800174e:	2802      	cmp	r0, #2
 8001750:	d9d7      	bls.n	8001702 <HAL_RCC_OscConfig+0x2a2>
 8001752:	e6c7      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001754:	f7fe fd4e 	bl	80001f4 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	f57f ae94 	bpl.w	800148a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7fe fd47 	bl	80001f4 <HAL_GetTick>
 8001766:	1b40      	subs	r0, r0, r5
 8001768:	2802      	cmp	r0, #2
 800176a:	d9f6      	bls.n	800175a <HAL_RCC_OscConfig+0x2fa>
 800176c:	e6ba      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420060 	.word	0x42420060

08001778 <HAL_RCC_GetSysClockFreq>:
{
 8001778:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800177c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177e:	ac02      	add	r4, sp, #8
 8001780:	f103 0510 	add.w	r5, r3, #16
 8001784:	4622      	mov	r2, r4
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	3308      	adds	r3, #8
 800178c:	c203      	stmia	r2!, {r0, r1}
 800178e:	42ab      	cmp	r3, r5
 8001790:	4614      	mov	r4, r2
 8001792:	d1f7      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001794:	2301      	movs	r3, #1
 8001796:	f88d 3004 	strb.w	r3, [sp, #4]
 800179a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800179c:	4911      	ldr	r1, [pc, #68]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800179e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80017a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017a4:	f003 020c 	and.w	r2, r3, #12
 80017a8:	2a08      	cmp	r2, #8
 80017aa:	d117      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017b0:	a806      	add	r0, sp, #24
 80017b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ba:	d50c      	bpl.n	80017d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c6:	aa06      	add	r2, sp, #24
 80017c8:	4413      	add	r3, r2
 80017ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80017d2:	b007      	add	sp, #28
 80017d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_RCC_GetSysClockFreq+0x74>)
 80017d8:	4350      	muls	r0, r2
 80017da:	e7fa      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80017de:	e7f8      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80017e0:	08004fec 	.word	0x08004fec
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	003d0900 	.word	0x003d0900

080017f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x138>)
{
 80017f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f6:	6813      	ldr	r3, [r2, #0]
{
 80017f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	428b      	cmp	r3, r1
{
 8001800:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001802:	d328      	bcc.n	8001856 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	682a      	ldr	r2, [r5, #0]
 8001806:	0791      	lsls	r1, r2, #30
 8001808:	d432      	bmi.n	8001870 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	07d2      	lsls	r2, r2, #31
 800180c:	d438      	bmi.n	8001880 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_RCC_ClockConfig+0x138>)
 8001810:	6813      	ldr	r3, [r2, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	429e      	cmp	r6, r3
 8001818:	d373      	bcc.n	8001902 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181a:	682a      	ldr	r2, [r5, #0]
 800181c:	4c43      	ldr	r4, [pc, #268]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 800181e:	f012 0f04 	tst.w	r2, #4
 8001822:	d179      	bne.n	8001918 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	0713      	lsls	r3, r2, #28
 8001826:	d506      	bpl.n	8001836 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001828:	6863      	ldr	r3, [r4, #4]
 800182a:	692a      	ldr	r2, [r5, #16]
 800182c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001830:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001834:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f7ff ff9f 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <HAL_RCC_ClockConfig+0x140>)
 800183e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	40d8      	lsrs	r0, r3
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x144>)
 8001848:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f7fe fc90 	bl	8000170 <HAL_InitTick>
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
}
 8001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f023 0307 	bic.w	r3, r3, #7
 800185c:	430b      	orrs	r3, r1
 800185e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	4299      	cmp	r1, r3
 8001868:	d0cc      	beq.n	8001804 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	492e      	ldr	r1, [pc, #184]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 8001872:	68a8      	ldr	r0, [r5, #8]
 8001874:	684b      	ldr	r3, [r1, #4]
 8001876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800187a:	4303      	orrs	r3, r0
 800187c:	604b      	str	r3, [r1, #4]
 800187e:	e7c4      	b.n	800180a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001880:	686a      	ldr	r2, [r5, #4]
 8001882:	4c2a      	ldr	r4, [pc, #168]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 8001884:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	d0ec      	beq.n	800186a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001890:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	4313      	orrs	r3, r2
 800189c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800189e:	f7fe fca9 	bl	80001f4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80018a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d114      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d0ac      	beq.n	800180e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7fe fc9e 	bl	80001f4 <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4540      	cmp	r0, r8
 80018bc:	d9f5      	bls.n	80018aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80018be:	2003      	movs	r0, #3
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c4:	2a02      	cmp	r2, #2
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018cc:	e7df      	b.n	800188e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	f013 0f02 	tst.w	r3, #2
 80018d2:	e7dc      	b.n	800188e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d10f      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	6863      	ldr	r3, [r4, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d095      	beq.n	800180e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7fe fc87 	bl	80001f4 <HAL_GetTick>
 80018e6:	1bc0      	subs	r0, r0, r7
 80018e8:	4540      	cmp	r0, r8
 80018ea:	d9f5      	bls.n	80018d8 <HAL_RCC_ClockConfig+0xe8>
 80018ec:	e7e7      	b.n	80018be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ee:	f7fe fc81 	bl	80001f4 <HAL_GetTick>
 80018f2:	1bc0      	subs	r0, r0, r7
 80018f4:	4540      	cmp	r0, r8
 80018f6:	d8e2      	bhi.n	80018be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	f013 0f0c 	tst.w	r3, #12
 80018fe:	d1f6      	bne.n	80018ee <HAL_RCC_ClockConfig+0xfe>
 8001900:	e785      	b.n	800180e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f023 0307 	bic.w	r3, r3, #7
 8001908:	4333      	orrs	r3, r6
 800190a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	429e      	cmp	r6, r3
 8001914:	d1a9      	bne.n	800186a <HAL_RCC_ClockConfig+0x7a>
 8001916:	e780      	b.n	800181a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	68e9      	ldr	r1, [r5, #12]
 800191c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001920:	430b      	orrs	r3, r1
 8001922:	6063      	str	r3, [r4, #4]
 8001924:	e77e      	b.n	8001824 <HAL_RCC_ClockConfig+0x34>
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	08005008 	.word	0x08005008
 8001934:	20000118 	.word	0x20000118

08001938 <HAL_RCC_GetHCLKFreq>:
}
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <HAL_RCC_GetHCLKFreq+0x8>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000118 	.word	0x20000118

08001944 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001952:	6810      	ldr	r0, [r2, #0]
}    
 8001954:	40d8      	lsrs	r0, r3
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	08005018 	.word	0x08005018
 8001960:	20000118 	.word	0x20000118

08001964 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001972:	6810      	ldr	r0, [r2, #0]
} 
 8001974:	40d8      	lsrs	r0, r3
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	08005018 	.word	0x08005018
 8001980:	20000118 	.word	0x20000118

08001984 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001984:	6803      	ldr	r3, [r0, #0]
{
 8001986:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800198a:	07d9      	lsls	r1, r3, #31
{
 800198c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800198e:	d520      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001990:	4c35      	ldr	r4, [pc, #212]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001992:	69e3      	ldr	r3, [r4, #28]
 8001994:	00da      	lsls	r2, r3, #3
 8001996:	d432      	bmi.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001998:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	69e3      	ldr	r3, [r4, #28]
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61e3      	str	r3, [r4, #28]
 80019a2:	69e3      	ldr	r3, [r4, #28]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4e2f      	ldr	r6, [pc, #188]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80019ae:	6833      	ldr	r3, [r6, #0]
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	d526      	bpl.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019ba:	d136      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80019bc:	6a23      	ldr	r3, [r4, #32]
 80019be:	686a      	ldr	r2, [r5, #4]
 80019c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c4:	4313      	orrs	r3, r2
 80019c6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c8:	b11f      	cbz	r7, 80019d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	69e3      	ldr	r3, [r4, #28]
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019d2:	6828      	ldr	r0, [r5, #0]
 80019d4:	0783      	lsls	r3, r0, #30
 80019d6:	d506      	bpl.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019da:	68a9      	ldr	r1, [r5, #8]
 80019dc:	6853      	ldr	r3, [r2, #4]
 80019de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019e6:	f010 0010 	ands.w	r0, r0, #16
 80019ea:	d01b      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019ee:	68e9      	ldr	r1, [r5, #12]
 80019f0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019f2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6053      	str	r3, [r2, #4]
 80019fc:	e012      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2700      	movs	r7, #0
 8001a00:	e7d4      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	6833      	ldr	r3, [r6, #0]
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fbf3 	bl	80001f4 <HAL_GetTick>
 8001a0e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	6833      	ldr	r3, [r6, #0]
 8001a12:	05d8      	lsls	r0, r3, #23
 8001a14:	d4ce      	bmi.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7fe fbed 	bl	80001f4 <HAL_GetTick>
 8001a1a:	eba0 0008 	sub.w	r0, r0, r8
 8001a1e:	2864      	cmp	r0, #100	; 0x64
 8001a20:	d9f6      	bls.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
}
 8001a24:	b002      	add	sp, #8
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a2a:	686a      	ldr	r2, [r5, #4]
 8001a2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d0c3      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a34:	2001      	movs	r0, #1
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a38:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a3a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a42:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001a44:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a46:	07d9      	lsls	r1, r3, #31
 8001a48:	d5b8      	bpl.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fbd3 	bl	80001f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	6a23      	ldr	r3, [r4, #32]
 8001a56:	079a      	lsls	r2, r3, #30
 8001a58:	d4b0      	bmi.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fbcb 	bl	80001f4 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	4540      	cmp	r0, r8
 8001a62:	d9f7      	bls.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001a64:	e7dd      	b.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42420440 	.word	0x42420440

08001a74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a74:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001a76:	4604      	mov	r4, r0
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d034      	beq.n	8001ae6 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001a80:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001a84:	b90b      	cbnz	r3, 8001a8a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a86:	f001 fd73 	bl	8003570 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a8a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a8c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001a8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001a92:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a94:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a9a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	69a2      	ldr	r2, [r4, #24]
 8001aa0:	4303      	orrs	r3, r0
 8001aa2:	68e0      	ldr	r0, [r4, #12]
 8001aa4:	4303      	orrs	r3, r0
 8001aa6:	6920      	ldr	r0, [r4, #16]
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	6960      	ldr	r0, [r4, #20]
 8001aac:	4303      	orrs	r3, r0
 8001aae:	69e0      	ldr	r0, [r4, #28]
 8001ab0:	4303      	orrs	r3, r0
 8001ab2:	6a20      	ldr	r0, [r4, #32]
 8001ab4:	4303      	orrs	r3, r0
 8001ab6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ab8:	4303      	orrs	r3, r0
 8001aba:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001abe:	4303      	orrs	r3, r0
 8001ac0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ac2:	0c12      	lsrs	r2, r2, #16
 8001ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac6:	f002 0204 	and.w	r2, r2, #4
 8001aca:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ace:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001ad0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ad4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ada:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001adc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ade:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001ae0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001ae4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ae6:	2001      	movs	r0, #1
}
 8001ae8:	bd10      	pop	{r4, pc}

08001aea <HAL_TIM_PeriodElapsedCallback>:
 8001aea:	4770      	bx	lr

08001aec <HAL_TIM_OC_DelayElapsedCallback>:
 8001aec:	4770      	bx	lr

08001aee <HAL_TIM_IC_CaptureCallback>:
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001af0:	4770      	bx	lr

08001af2 <HAL_TIM_TriggerCallback>:
 8001af2:	4770      	bx	lr

08001af4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af4:	6803      	ldr	r3, [r0, #0]
{
 8001af6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af8:	691a      	ldr	r2, [r3, #16]
{
 8001afa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001afc:	0791      	lsls	r1, r2, #30
 8001afe:	d50e      	bpl.n	8001b1e <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	0792      	lsls	r2, r2, #30
 8001b04:	d50b      	bpl.n	8001b1e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b06:	f06f 0202 	mvn.w	r2, #2
 8001b0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b0c:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b0e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b10:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b12:	079b      	lsls	r3, r3, #30
 8001b14:	d077      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	f7ff ffea 	bl	8001aee <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	0750      	lsls	r0, r2, #29
 8001b24:	d510      	bpl.n	8001b48 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	0751      	lsls	r1, r2, #29
 8001b2a:	d50d      	bpl.n	8001b48 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b2c:	f06f 0204 	mvn.w	r2, #4
 8001b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b32:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b36:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b38:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3e:	d068      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	f7ff ffd5 	bl	8001aee <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b44:	2300      	movs	r3, #0
 8001b46:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	0712      	lsls	r2, r2, #28
 8001b4e:	d50f      	bpl.n	8001b70 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	0710      	lsls	r0, r2, #28
 8001b54:	d50c      	bpl.n	8001b70 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b56:	f06f 0208 	mvn.w	r2, #8
 8001b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b5c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b60:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b62:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b64:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b66:	d05a      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b68:	f7ff ffc1 	bl	8001aee <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	06d2      	lsls	r2, r2, #27
 8001b76:	d510      	bpl.n	8001b9a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	06d0      	lsls	r0, r2, #27
 8001b7c:	d50d      	bpl.n	8001b9a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b7e:	f06f 0210 	mvn.w	r2, #16
 8001b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b84:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b86:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b88:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001b8e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	d04b      	beq.n	8001c2a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	f7ff ffac 	bl	8001aee <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b96:	2300      	movs	r3, #0
 8001b98:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	07d1      	lsls	r1, r2, #31
 8001ba0:	d508      	bpl.n	8001bb4 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	07d2      	lsls	r2, r2, #31
 8001ba6:	d505      	bpl.n	8001bb4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bae:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb0:	f7ff ff9b 	bl	8001aea <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	0610      	lsls	r0, r2, #24
 8001bba:	d508      	bpl.n	8001bce <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	0611      	lsls	r1, r2, #24
 8001bc0:	d505      	bpl.n	8001bce <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001bc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bca:	f000 f836 	bl	8001c3a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	0652      	lsls	r2, r2, #25
 8001bd4:	d508      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	0650      	lsls	r0, r2, #25
 8001bda:	d505      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001be0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001be4:	f7ff ff85 	bl	8001af2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	0691      	lsls	r1, r2, #26
 8001bee:	d522      	bpl.n	8001c36 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	0692      	lsls	r2, r2, #26
 8001bf4:	d51f      	bpl.n	8001c36 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001bfa:	4620      	mov	r0, r4
    }
  }
}
 8001bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001c02:	f000 b819 	b.w	8001c38 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	f7ff ff71 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff ff70 	bl	8001af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c10:	e783      	b.n	8001b1a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	f7ff ff6b 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ff6a 	bl	8001af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c1c:	e792      	b.n	8001b44 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	f7ff ff65 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7ff ff64 	bl	8001af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c28:	e7a0      	b.n	8001b6c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	f7ff ff5f 	bl	8001aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff ff5e 	bl	8001af0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c34:	e7af      	b.n	8001b96 <HAL_TIM_IRQHandler+0xa2>
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <HAL_TIMEx_CommutationCallback>:
 8001c38:	4770      	bx	lr

08001c3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c3a:	4770      	bx	lr

08001c3c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c40:	6805      	ldr	r5, [r0, #0]
 8001c42:	68c2      	ldr	r2, [r0, #12]
 8001c44:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c46:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c50:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001c52:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001c58:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001c5c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c60:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c66:	696b      	ldr	r3, [r5, #20]
 8001c68:	6982      	ldr	r2, [r0, #24]
 8001c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <UART_SetConfig+0x138>)
{
 8001c74:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001c76:	429d      	cmp	r5, r3
 8001c78:	f04f 0419 	mov.w	r4, #25
 8001c7c:	d146      	bne.n	8001d0c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c7e:	f7ff fe71 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8001c82:	fb04 f300 	mul.w	r3, r4, r0
 8001c86:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001c8a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c8e:	00b6      	lsls	r6, r6, #2
 8001c90:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c94:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c98:	011e      	lsls	r6, r3, #4
 8001c9a:	f7ff fe63 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8001c9e:	4360      	muls	r0, r4
 8001ca0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	fbb0 f7f3 	udiv	r7, r0, r3
 8001caa:	f7ff fe5b 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8001cae:	4360      	muls	r0, r4
 8001cb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cbe:	fb08 7313 	mls	r3, r8, r3, r7
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	3332      	adds	r3, #50	; 0x32
 8001cc6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cca:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001cce:	f7ff fe49 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8001cd2:	4360      	muls	r0, r4
 8001cd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	fbb0 faf2 	udiv	sl, r0, r2
 8001cde:	f7ff fe41 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ce2:	4360      	muls	r0, r4
 8001ce4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cf2:	fb08 a313 	mls	r3, r8, r3, sl
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	3332      	adds	r3, #50	; 0x32
 8001cfa:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	433b      	orrs	r3, r7
 8001d04:	4433      	add	r3, r6
 8001d06:	60ab      	str	r3, [r5, #8]
 8001d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d0c:	f7ff fe1a 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001d10:	fb04 f300 	mul.w	r3, r4, r0
 8001d14:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001d18:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001d1c:	00b6      	lsls	r6, r6, #2
 8001d1e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d22:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d26:	011e      	lsls	r6, r3, #4
 8001d28:	f7ff fe0c 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001d2c:	4360      	muls	r0, r4
 8001d2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d38:	f7ff fe04 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	4360      	muls	r0, r4
 8001d3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d4c:	fb08 7313 	mls	r3, r8, r3, r7
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	3332      	adds	r3, #50	; 0x32
 8001d54:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d58:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001d5c:	f7ff fdf2 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001d60:	4360      	muls	r0, r4
 8001d62:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	fbb0 faf2 	udiv	sl, r0, r2
 8001d6c:	f7ff fdea 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001d70:	e7b7      	b.n	8001ce2 <UART_SetConfig+0xa6>
 8001d72:	bf00      	nop
 8001d74:	40013800 	.word	0x40013800

08001d78 <HAL_UART_Init>:
{
 8001d78:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	b340      	cbz	r0, 8001dd0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d86:	b91b      	cbnz	r3, 8001d90 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d88:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d8c:	f001 fc1a 	bl	80035c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d90:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d92:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d98:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d9a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001da0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001da2:	f7ff ff4b 	bl	8001c3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001dc2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001dc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001dca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001dce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
}
 8001dd2:	bd10      	pop	{r4, pc}

08001dd4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	a801      	add	r0, sp, #4
 8001dd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001ddc:	b004      	add	sp, #16
 8001dde:	2000      	movs	r0, #0
 8001de0:	4770      	bx	lr

08001de2 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001de2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001dec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr

08001df4 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001df4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001df8:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001dfc:	045b      	lsls	r3, r3, #17
 8001dfe:	0c5b      	lsrs	r3, r3, #17
 8001e00:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	4770      	bx	lr

08001e08 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e08:	2000      	movs	r0, #0
 8001e0a:	4770      	bx	lr

08001e0c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	ac03      	add	r4, sp, #12
 8001e12:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001e1a:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001e22:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001e26:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001e2a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001e2e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001e32:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001e3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4770      	bx	lr
	...

08001e44 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001e44:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001e46:	78cb      	ldrb	r3, [r1, #3]
 8001e48:	780a      	ldrb	r2, [r1, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d80f      	bhi.n	8001e6e <USB_ActivateEndpoint+0x2a>
 8001e4e:	e8df f003 	tbb	[pc, r3]
 8001e52:	6402      	.short	0x6402
 8001e54:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001e56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001e6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001e6e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001e72:	780c      	ldrb	r4, [r1, #0]
 8001e74:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001e78:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001e7c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001e80:	401a      	ands	r2, r3
 8001e82:	432a      	orrs	r2, r5
 8001e84:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001e88:	7a8a      	ldrb	r2, [r1, #10]
 8001e8a:	780d      	ldrb	r5, [r1, #0]
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	f040 8097 	bne.w	8001fc0 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001e92:	784c      	ldrb	r4, [r1, #1]
 8001e94:	888a      	ldrh	r2, [r1, #4]
 8001e96:	2c00      	cmp	r4, #0
 8001e98:	d04a      	beq.n	8001f30 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e9a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001e9e:	0852      	lsrs	r2, r2, #1
 8001ea0:	b2a4      	uxth	r4, r4
 8001ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001ea6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001eaa:	0052      	lsls	r2, r2, #1
 8001eac:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001eb0:	780c      	ldrb	r4, [r1, #0]
 8001eb2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001eb6:	0652      	lsls	r2, r2, #25
 8001eb8:	d508      	bpl.n	8001ecc <USB_ActivateEndpoint+0x88>
 8001eba:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001ecc:	780a      	ldrb	r2, [r1, #0]
 8001ece:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001eee:	2000      	movs	r0, #0
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001ef2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ef6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	e7b2      	b.n	8001e6a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001f04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f08:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001f18:	e7a7      	b.n	8001e6a <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001f1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	e79c      	b.n	8001e6a <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001f30:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f34:	0852      	lsrs	r2, r2, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3304      	adds	r3, #4
 8001f3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001f3e:	0052      	lsls	r2, r2, #1
 8001f40:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001f44:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001f48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001f4c:	690d      	ldr	r5, [r1, #16]
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	780b      	ldrb	r3, [r1, #0]
 8001f52:	3206      	adds	r2, #6
 8001f54:	2d3e      	cmp	r5, #62	; 0x3e
 8001f56:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001f5a:	d929      	bls.n	8001fb0 <USB_ActivateEndpoint+0x16c>
 8001f5c:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001f60:	06eb      	lsls	r3, r5, #27
 8001f62:	bf04      	itt	eq
 8001f64:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001f68:	b29e      	uxtheq	r6, r3
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <USB_ActivateEndpoint+0x2e0>)
 8001f6c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f76:	780a      	ldrb	r2, [r1, #0]
 8001f78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f7c:	045e      	lsls	r6, r3, #17
 8001f7e:	d50b      	bpl.n	8001f98 <USB_ActivateEndpoint+0x154>
 8001f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f88:	051b      	lsls	r3, r3, #20
 8001f8a:	0d1b      	lsrs	r3, r3, #20
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f98:	780a      	ldrb	r2, [r1, #0]
 8001f9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001fae:	e798      	b.n	8001ee2 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001fb0:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001fb4:	07ed      	lsls	r5, r5, #31
 8001fb6:	bf44      	itt	mi
 8001fb8:	3301      	addmi	r3, #1
 8001fba:	b29b      	uxthmi	r3, r3
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	e7d7      	b.n	8001f70 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001fc0:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001fc4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001fc8:	0512      	lsls	r2, r2, #20
 8001fca:	0d12      	lsrs	r2, r2, #20
 8001fcc:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001fd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fd4:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001fd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001fdc:	780c      	ldrb	r4, [r1, #0]
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001fe4:	88cc      	ldrh	r4, [r1, #6]
 8001fe6:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001fea:	0864      	lsrs	r4, r4, #1
 8001fec:	0064      	lsls	r4, r4, #1
 8001fee:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001ff2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ff6:	780c      	ldrb	r4, [r1, #0]
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	3204      	adds	r2, #4
 8001ffc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002000:	890c      	ldrh	r4, [r1, #8]
 8002002:	0864      	lsrs	r4, r4, #1
 8002004:	0064      	lsls	r4, r4, #1
 8002006:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 800200a:	784a      	ldrb	r2, [r1, #1]
 800200c:	780c      	ldrb	r4, [r1, #0]
 800200e:	2a00      	cmp	r2, #0
 8002010:	d147      	bne.n	80020a2 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002012:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002016:	0455      	lsls	r5, r2, #17
 8002018:	d508      	bpl.n	800202c <USB_ActivateEndpoint+0x1e8>
 800201a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800201e:	4013      	ands	r3, r2
 8002020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800202c:	780a      	ldrb	r2, [r1, #0]
 800202e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002032:	065c      	lsls	r4, r3, #25
 8002034:	d50b      	bpl.n	800204e <USB_ActivateEndpoint+0x20a>
 8002036:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800203a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203e:	051b      	lsls	r3, r3, #20
 8002040:	0d1b      	lsrs	r3, r3, #20
 8002042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800204a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800204e:	780a      	ldrb	r2, [r1, #0]
 8002050:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	0d1b      	lsrs	r3, r3, #20
 800205c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002064:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002068:	f248 0280 	movw	r2, #32896	; 0x8080
 800206c:	780c      	ldrb	r4, [r1, #0]
 800206e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002082:	4313      	orrs	r3, r2
 8002084:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002088:	7809      	ldrb	r1, [r1, #0]
 800208a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800208e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	4313      	orrs	r3, r2
 800209c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80020a0:	e725      	b.n	8001eee <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020a2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80020a6:	0452      	lsls	r2, r2, #17
 80020a8:	d508      	bpl.n	80020bc <USB_ActivateEndpoint+0x278>
 80020aa:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020bc:	780a      	ldrb	r2, [r1, #0]
 80020be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020c2:	065b      	lsls	r3, r3, #25
 80020c4:	d50b      	bpl.n	80020de <USB_ActivateEndpoint+0x29a>
 80020c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ce:	051b      	lsls	r3, r3, #20
 80020d0:	0d1b      	lsrs	r3, r3, #20
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80020de:	780a      	ldrb	r2, [r1, #0]
 80020e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e8:	051b      	lsls	r3, r3, #20
 80020ea:	0d1b      	lsrs	r3, r3, #20
 80020ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80020f8:	f248 0280 	movw	r2, #32896	; 0x8080
 80020fc:	780c      	ldrb	r4, [r1, #0]
 80020fe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	4313      	orrs	r3, r2
 8002110:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002114:	7809      	ldrb	r1, [r1, #0]
 8002116:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800211a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	e7b8      	b.n	8002096 <USB_ActivateEndpoint+0x252>
 8002124:	ffff8000 	.word	0xffff8000

08002128 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002128:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 800212a:	7a8c      	ldrb	r4, [r1, #10]
 800212c:	784a      	ldrb	r2, [r1, #1]
 800212e:	780b      	ldrb	r3, [r1, #0]
 8002130:	bbcc      	cbnz	r4, 80021a6 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8002132:	b302      	cbz	r2, 8002176 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002134:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002138:	0652      	lsls	r2, r2, #25
 800213a:	d50b      	bpl.n	8002154 <USB_DeactivateEndpoint+0x2c>
 800213c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002140:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002144:	0512      	lsls	r2, r2, #20
 8002146:	0d12      	lsrs	r2, r2, #20
 8002148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002150:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002154:	780a      	ldrb	r2, [r1, #0]
 8002156:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800215a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002172:	2000      	movs	r0, #0
 8002174:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002176:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800217a:	0454      	lsls	r4, r2, #17
 800217c:	d50b      	bpl.n	8002196 <USB_DeactivateEndpoint+0x6e>
 800217e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002182:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002186:	0512      	lsls	r2, r2, #20
 8002188:	0d12      	lsrs	r2, r2, #20
 800218a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800218e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002192:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002196:	780a      	ldrb	r2, [r1, #0]
 8002198:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800219c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a4:	e7dd      	b.n	8002162 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d148      	bne.n	800223c <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021ae:	0452      	lsls	r2, r2, #17
 80021b0:	d50b      	bpl.n	80021ca <USB_DeactivateEndpoint+0xa2>
 80021b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021ba:	0512      	lsls	r2, r2, #20
 80021bc:	0d12      	lsrs	r2, r2, #20
 80021be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021ca:	780a      	ldrb	r2, [r1, #0]
 80021cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021d0:	065c      	lsls	r4, r3, #25
 80021d2:	d50b      	bpl.n	80021ec <USB_DeactivateEndpoint+0xc4>
 80021d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	0d1b      	lsrs	r3, r3, #20
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80021ec:	780a      	ldrb	r2, [r1, #0]
 80021ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80021f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f6:	051b      	lsls	r3, r3, #20
 80021f8:	0d1b      	lsrs	r3, r3, #20
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002202:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002206:	f248 0280 	movw	r2, #32896	; 0x8080
 800220a:	780c      	ldrb	r4, [r1, #0]
 800220c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	4313      	orrs	r3, r2
 800221e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002222:	7809      	ldrb	r1, [r1, #0]
 8002224:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	4313      	orrs	r3, r2
 8002236:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800223a:	e79a      	b.n	8002172 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800223c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002240:	0452      	lsls	r2, r2, #17
 8002242:	d50b      	bpl.n	800225c <USB_DeactivateEndpoint+0x134>
 8002244:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002248:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800224c:	0512      	lsls	r2, r2, #20
 800224e:	0d12      	lsrs	r2, r2, #20
 8002250:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002258:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800225c:	780a      	ldrb	r2, [r1, #0]
 800225e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002262:	065b      	lsls	r3, r3, #25
 8002264:	d50b      	bpl.n	800227e <USB_DeactivateEndpoint+0x156>
 8002266:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800226a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226e:	051b      	lsls	r3, r3, #20
 8002270:	0d1b      	lsrs	r3, r3, #20
 8002272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002276:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800227a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800227e:	780a      	ldrb	r2, [r1, #0]
 8002280:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	0d1b      	lsrs	r3, r3, #20
 800228c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002294:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002298:	f248 0280 	movw	r2, #32896	; 0x8080
 800229c:	780c      	ldrb	r4, [r1, #0]
 800229e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80022a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b4:	7809      	ldrb	r1, [r1, #0]
 80022b6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80022ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	e7b5      	b.n	8002230 <USB_DeactivateEndpoint+0x108>

080022c4 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80022c4:	780a      	ldrb	r2, [r1, #0]
 80022c6:	b98a      	cbnz	r2, 80022ec <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80022c8:	8803      	ldrh	r3, [r0, #0]
 80022ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022da:	f083 0310 	eor.w	r3, r3, #16
 80022de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e6:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr
    if (ep->is_in)
 80022ec:	784b      	ldrb	r3, [r1, #1]
 80022ee:	b183      	cbz	r3, 8002312 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80022f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	0c1b      	lsrs	r3, r3, #16
 8002300:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002310:	e7ea      	b.n	80022e8 <USB_EPSetStall+0x24>
 8002312:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002326:	e7ed      	b.n	8002304 <USB_EPSetStall+0x40>

08002328 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002328:	784b      	ldrb	r3, [r1, #1]
 800232a:	780a      	ldrb	r2, [r1, #0]
 800232c:	b313      	cbz	r3, 8002374 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800232e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002332:	065b      	lsls	r3, r3, #25
 8002334:	d50b      	bpl.n	800234e <USB_EPClearStall+0x26>
 8002336:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800233a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	0d1b      	lsrs	r3, r3, #20
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800234a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800234e:	780a      	ldrb	r2, [r1, #0]
 8002350:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800236c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002374:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002378:	045b      	lsls	r3, r3, #17
 800237a:	d50b      	bpl.n	8002394 <USB_EPClearStall+0x6c>
 800237c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	0d1b      	lsrs	r3, r3, #20
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002394:	780a      	ldrb	r2, [r1, #0]
 8002396:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800239a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80023aa:	e7db      	b.n	8002364 <USB_EPClearStall+0x3c>

080023ac <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 80023ac:	b911      	cbnz	r1, 80023b4 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	4770      	bx	lr

080023b8 <USB_DevConnect>:
 80023b8:	2000      	movs	r0, #0
 80023ba:	4770      	bx	lr

080023bc <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80023bc:	2000      	movs	r0, #0
 80023be:	4770      	bx	lr

080023c0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 80023c0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80023c4:	b280      	uxth	r0, r0
 80023c6:	4770      	bx	lr

080023c8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80023c8:	2000      	movs	r0, #0
 80023ca:	4770      	bx	lr

080023cc <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80023cc:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80023ce:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80023d0:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80023d2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80023d6:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80023d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d100      	bne.n	80023e2 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 80023e6:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 80023ea:	3401      	adds	r4, #1
 80023ec:	e7f6      	b.n	80023dc <USB_WritePMA+0x10>
	...

080023f0 <USB_EPStartXfer>:
{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 80023f4:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 80023f6:	7849      	ldrb	r1, [r1, #1]
{
 80023f8:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 80023fa:	2901      	cmp	r1, #1
 80023fc:	6933      	ldr	r3, [r6, #16]
 80023fe:	7ab0      	ldrb	r0, [r6, #10]
 8002400:	d166      	bne.n	80024d0 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002402:	429a      	cmp	r2, r3
 8002404:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002406:	bf9b      	ittet	ls
 8002408:	2300      	movls	r3, #0
 800240a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 800240c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 800240e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002410:	bf88      	it	hi
 8002412:	61b2      	strhi	r2, [r6, #24]
 8002414:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002416:	bb10      	cbnz	r0, 800245e <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002418:	88b2      	ldrh	r2, [r6, #4]
 800241a:	6971      	ldr	r1, [r6, #20]
 800241c:	4628      	mov	r0, r5
 800241e:	f7ff ffd5 	bl	80023cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002422:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002426:	7832      	ldrb	r2, [r6, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	3302      	adds	r3, #2
 800242c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002430:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002434:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002438:	7832      	ldrb	r2, [r6, #0]
 800243a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800243e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 800245a:	2000      	movs	r0, #0
 800245c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800245e:	7832      	ldrb	r2, [r6, #0]
 8002460:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800246a:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800246e:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002470:	d01a      	beq.n	80024a8 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002472:	3102      	adds	r1, #2
 8002474:	440a      	add	r2, r1
 8002476:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800247a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 800247e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002480:	6971      	ldr	r1, [r6, #20]
 8002482:	4628      	mov	r0, r5
 8002484:	f7ff ffa2 	bl	80023cc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002488:	7873      	ldrb	r3, [r6, #1]
 800248a:	7832      	ldrb	r2, [r6, #0]
 800248c:	b99b      	cbnz	r3, 80024b6 <USB_EPStartXfer+0xc6>
 800248e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002496:	051b      	lsls	r3, r3, #20
 8002498:	0d1b      	lsrs	r3, r3, #20
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80024a6:	e7c7      	b.n	8002438 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80024a8:	440a      	add	r2, r1
 80024aa:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80024ae:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 80024b2:	88f2      	ldrh	r2, [r6, #6]
 80024b4:	e7e4      	b.n	8002480 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d1be      	bne.n	8002438 <USB_EPStartXfer+0x48>
 80024ba:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80024be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c2:	051b      	lsls	r3, r3, #20
 80024c4:	0d1b      	lsrs	r3, r3, #20
 80024c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ce:	e7e8      	b.n	80024a2 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 80024d0:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 80024d2:	bf93      	iteet	ls
 80024d4:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 80024d6:	1ad2      	subhi	r2, r2, r3
 80024d8:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 80024da:	61b3      	strls	r3, [r6, #24]
 80024dc:	bf98      	it	ls
 80024de:	4613      	movls	r3, r2
 80024e0:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 80024e2:	bb70      	cbnz	r0, 8002542 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80024e4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80024e8:	2b3e      	cmp	r3, #62	; 0x3e
 80024ea:	b289      	uxth	r1, r1
 80024ec:	f101 0106 	add.w	r1, r1, #6
 80024f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80024f4:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80024f8:	d918      	bls.n	800252c <USB_EPStartXfer+0x13c>
 80024fa:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80024fe:	06db      	lsls	r3, r3, #27
 8002500:	bf04      	itt	eq
 8002502:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002506:	b29a      	uxtheq	r2, r3
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <USB_EPStartXfer+0x1fc>)
 800250a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800250e:	b29b      	uxth	r3, r3
 8002510:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002514:	7832      	ldrb	r2, [r6, #0]
 8002516:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800251a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800252a:	e790      	b.n	800244e <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800252c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002530:	07dc      	lsls	r4, r3, #31
 8002532:	bf44      	itt	mi
 8002534:	3201      	addmi	r2, #1
 8002536:	b292      	uxthmi	r2, r2
 8002538:	0292      	lsls	r2, r2, #10
 800253a:	b292      	uxth	r2, r2
 800253c:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002540:	e7e8      	b.n	8002514 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002542:	b9b9      	cbnz	r1, 8002574 <USB_EPStartXfer+0x184>
 8002544:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002548:	2b3e      	cmp	r3, #62	; 0x3e
 800254a:	b289      	uxth	r1, r1
 800254c:	f101 0102 	add.w	r1, r1, #2
 8002550:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002554:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002558:	d928      	bls.n	80025ac <USB_EPStartXfer+0x1bc>
 800255a:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800255e:	06da      	lsls	r2, r3, #27
 8002560:	bf04      	itt	eq
 8002562:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002566:	b290      	uxtheq	r0, r2
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <USB_EPStartXfer+0x1fc>)
 800256a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800256e:	b292      	uxth	r2, r2
 8002570:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002574:	7872      	ldrb	r2, [r6, #1]
 8002576:	7831      	ldrb	r1, [r6, #0]
 8002578:	bb5a      	cbnz	r2, 80025d2 <USB_EPStartXfer+0x1e2>
 800257a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800257e:	2b3e      	cmp	r3, #62	; 0x3e
 8002580:	b292      	uxth	r2, r2
 8002582:	f102 0206 	add.w	r2, r2, #6
 8002586:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800258a:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800258e:	d915      	bls.n	80025bc <USB_EPStartXfer+0x1cc>
 8002590:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002594:	06dc      	lsls	r4, r3, #27
 8002596:	bf04      	itt	eq
 8002598:	f101 33ff 	addeq.w	r3, r1, #4294967295
 800259c:	b299      	uxtheq	r1, r3
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <USB_EPStartXfer+0x1fc>)
 80025a0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 80025aa:	e7b3      	b.n	8002514 <USB_EPStartXfer+0x124>
 80025ac:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80025b0:	07d8      	lsls	r0, r3, #31
 80025b2:	bf44      	itt	mi
 80025b4:	3201      	addmi	r2, #1
 80025b6:	b292      	uxthmi	r2, r2
 80025b8:	0292      	lsls	r2, r2, #10
 80025ba:	e7d8      	b.n	800256e <USB_EPStartXfer+0x17e>
 80025bc:	f3c3 014f 	ubfx	r1, r3, #1, #16
 80025c0:	07db      	lsls	r3, r3, #31
 80025c2:	bf44      	itt	mi
 80025c4:	3101      	addmi	r1, #1
 80025c6:	b289      	uxthmi	r1, r1
 80025c8:	0289      	lsls	r1, r1, #10
 80025ca:	b289      	uxth	r1, r1
 80025cc:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80025d0:	e7a0      	b.n	8002514 <USB_EPStartXfer+0x124>
 80025d2:	2a01      	cmp	r2, #1
 80025d4:	d19e      	bne.n	8002514 <USB_EPStartXfer+0x124>
 80025d6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80025da:	b292      	uxth	r2, r2
 80025dc:	3202      	adds	r2, #2
 80025de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80025e2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80025e6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80025ea:	e793      	b.n	8002514 <USB_EPStartXfer+0x124>
 80025ec:	ffff8000 	.word	0xffff8000

080025f0 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80025f0:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80025f2:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80025f4:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80025f6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80025fa:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80025fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002600:	42a3      	cmp	r3, r4
 8002602:	d100      	bne.n	8002606 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002604:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002606:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800260a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800260e:	3401      	adds	r4, #1
 8002610:	e7f6      	b.n	8002600 <USB_ReadPMA+0x10>

08002612 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002612:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002616:	b11b      	cbz	r3, 8002620 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002618:	2000      	movs	r0, #0
 800261a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800261e:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002620:	2002      	movs	r0, #2
  }
}
 8002622:	4770      	bx	lr

08002624 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002624:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002628:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800262a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800262e:	b15b      	cbz	r3, 8002648 <USBD_CDC_EP0_RxReady+0x24>
 8002630:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002634:	28ff      	cmp	r0, #255	; 0xff
 8002636:	d007      	beq.n	8002648 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800263e:	4621      	mov	r1, r4
 8002640:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002642:	23ff      	movs	r3, #255	; 0xff
 8002644:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002648:	2000      	movs	r0, #0
 800264a:	bd10      	pop	{r4, pc}

0800264c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800264c:	2343      	movs	r3, #67	; 0x43
 800264e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002650:	4800      	ldr	r0, [pc, #0]	; (8002654 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002652:	4770      	bx	lr
 8002654:	20000040 	.word	0x20000040

08002658 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002658:	2343      	movs	r3, #67	; 0x43
 800265a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800265c:	4800      	ldr	r0, [pc, #0]	; (8002660 <USBD_CDC_GetHSCfgDesc+0x8>)
 800265e:	4770      	bx	lr
 8002660:	20000084 	.word	0x20000084

08002664 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002664:	2343      	movs	r3, #67	; 0x43
 8002666:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002668:	4800      	ldr	r0, [pc, #0]	; (800266c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800266a:	4770      	bx	lr
 800266c:	200000d4 	.word	0x200000d4

08002670 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002670:	230a      	movs	r3, #10
 8002672:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002674:	4800      	ldr	r0, [pc, #0]	; (8002678 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002676:	4770      	bx	lr
 8002678:	200000c8 	.word	0x200000c8

0800267c <USBD_CDC_DataOut>:
{      
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002680:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002684:	f001 fac6 	bl	8003c14 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002688:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800268c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002690:	b14b      	cbz	r3, 80026a6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002692:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002696:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80026a0:	4798      	blx	r3
    return USBD_OK;
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80026a6:	2002      	movs	r0, #2
}
 80026a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080026ac <USBD_CDC_Setup>:
{
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026ae:	780f      	ldrb	r7, [r1, #0]
{
 80026b0:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026b2:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80026b6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026b8:	d023      	beq.n	8002702 <USBD_CDC_Setup+0x56>
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d119      	bne.n	80026f2 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80026be:	88ca      	ldrh	r2, [r1, #6]
 80026c0:	784b      	ldrb	r3, [r1, #1]
 80026c2:	b1c2      	cbz	r2, 80026f6 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80026c4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80026c6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80026ca:	d50b      	bpl.n	80026e4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80026cc:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80026d0:	4618      	mov	r0, r3
 80026d2:	688f      	ldr	r7, [r1, #8]
 80026d4:	4629      	mov	r1, r5
 80026d6:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80026d8:	4629      	mov	r1, r5
 80026da:	4630      	mov	r0, r6
 80026dc:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80026de:	f000 fb8a 	bl	8002df6 <USBD_CtlSendData>
      break;
 80026e2:	e006      	b.n	80026f2 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80026e4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80026e8:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80026ec:	4629      	mov	r1, r5
 80026ee:	f000 fb97 	bl	8002e20 <USBD_CtlPrepareRx>
}
 80026f2:	2000      	movs	r0, #0
 80026f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80026f6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80026fa:	6884      	ldr	r4, [r0, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	47a0      	blx	r4
 8002700:	e7f7      	b.n	80026f2 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002702:	784b      	ldrb	r3, [r1, #1]
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d1f4      	bne.n	80026f2 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002708:	2201      	movs	r2, #1
 800270a:	4901      	ldr	r1, [pc, #4]	; (8002710 <USBD_CDC_Setup+0x64>)
 800270c:	e7e7      	b.n	80026de <USBD_CDC_Setup+0x32>
 800270e:	bf00      	nop
 8002710:	2000034c 	.word	0x2000034c

08002714 <USBD_CDC_DeInit>:
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002718:	2181      	movs	r1, #129	; 0x81
 800271a:	f001 fa17 	bl	8003b4c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800271e:	2101      	movs	r1, #1
 8002720:	4620      	mov	r0, r4
 8002722:	f001 fa13 	bl	8003b4c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002726:	2182      	movs	r1, #130	; 0x82
 8002728:	4620      	mov	r0, r4
 800272a:	f001 fa0f 	bl	8003b4c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800272e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002732:	b153      	cbz	r3, 800274a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002734:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800273c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002740:	f001 fa72 	bl	8003c28 <USBD_static_free>
    pdev->pClassData = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800274a:	2000      	movs	r0, #0
 800274c:	bd10      	pop	{r4, pc}

0800274e <USBD_CDC_Init>:
{
 800274e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002750:	7c03      	ldrb	r3, [r0, #16]
{
 8002752:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002754:	bb7b      	cbnz	r3, 80027b6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275a:	2202      	movs	r2, #2
 800275c:	2181      	movs	r1, #129	; 0x81
 800275e:	f001 f9e5 	bl	8003b2c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002762:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002766:	2202      	movs	r2, #2
 8002768:	2101      	movs	r1, #1
 800276a:	4620      	mov	r0, r4
 800276c:	f001 f9de 	bl	8003b2c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002770:	2308      	movs	r3, #8
 8002772:	2203      	movs	r2, #3
 8002774:	2182      	movs	r1, #130	; 0x82
 8002776:	4620      	mov	r0, r4
 8002778:	f001 f9d8 	bl	8003b2c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800277c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002780:	f001 fa4e 	bl	8003c20 <USBD_static_malloc>
 8002784:	4606      	mov	r6, r0
 8002786:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800278a:	b320      	cbz	r0, 80027d6 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 800278c:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800278e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002796:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002798:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800279c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80027a0:	b987      	cbnz	r7, 80027c4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80027a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80027aa:	2101      	movs	r1, #1
 80027ac:	4620      	mov	r0, r4
 80027ae:	f001 fa23 	bl	8003bf8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80027b2:	4638      	mov	r0, r7
 80027b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80027b6:	2340      	movs	r3, #64	; 0x40
 80027b8:	2202      	movs	r2, #2
 80027ba:	2181      	movs	r1, #129	; 0x81
 80027bc:	f001 f9b6 	bl	8003b2c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80027c0:	2340      	movs	r3, #64	; 0x40
 80027c2:	e7d0      	b.n	8002766 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80027ca:	2101      	movs	r1, #1
 80027cc:	4620      	mov	r0, r4
 80027ce:	f001 fa13 	bl	8003bf8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80027d2:	4628      	mov	r0, r5
 80027d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80027d6:	2001      	movs	r0, #1
}
 80027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027da <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80027da:	b119      	cbz	r1, 80027e4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80027dc:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80027e0:	2000      	movs	r0, #0
 80027e2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80027e4:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80027e6:	4770      	bx	lr

080027e8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80027e8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80027ec:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80027ee:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80027f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80027f6:	4770      	bx	lr

080027f8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80027f8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80027fc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80027fe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002802:	4770      	bx	lr

08002804 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002804:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002808:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 800280a:	b172      	cbz	r2, 800282a <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800280c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002810:	2301      	movs	r3, #1
 8002812:	b964      	cbnz	r4, 800282e <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002814:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002818:	2181      	movs	r1, #129	; 0x81
 800281a:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800281e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002822:	f001 f9db 	bl	8003bdc <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002826:	4620      	mov	r0, r4
 8002828:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800282a:	2002      	movs	r0, #2
 800282c:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800282e:	4618      	mov	r0, r3
  }
}
 8002830:	bd10      	pop	{r4, pc}

08002832 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002832:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002836:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002838:	b162      	cbz	r2, 8002854 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800283a:	7c04      	ldrb	r4, [r0, #16]
 800283c:	b944      	cbnz	r4, 8002850 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800283e:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002842:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002846:	2101      	movs	r1, #1
 8002848:	f001 f9d6 	bl	8003bf8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800284c:	2000      	movs	r0, #0
 800284e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002850:	2340      	movs	r3, #64	; 0x40
 8002852:	e7f6      	b.n	8002842 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002854:	2002      	movs	r0, #2
  }
}
 8002856:	bd10      	pop	{r4, pc}

08002858 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002858:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800285a:	b180      	cbz	r0, 800287e <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800285c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002860:	b113      	cbz	r3, 8002868 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002868:	b109      	cbz	r1, 800286e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800286a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800286e:	2301      	movs	r3, #1
  pdev->id = id;
 8002870:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002872:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002876:	f001 f903 	bl	8003a80 <USBD_LL_Init>
  
  return USBD_OK; 
 800287a:	2000      	movs	r0, #0
 800287c:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800287e:	2002      	movs	r0, #2
}
 8002880:	bd08      	pop	{r3, pc}

08002882 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002882:	b119      	cbz	r1, 800288c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002884:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002888:	2000      	movs	r0, #0
 800288a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800288c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800288e:	4770      	bx	lr

08002890 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002890:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002892:	f001 f93d 	bl	8003b10 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002896:	2000      	movs	r0, #0
 8002898:	bd08      	pop	{r3, pc}

0800289a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800289a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800289c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028a0:	b90b      	cbnz	r3, 80028a6 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80028a2:	2002      	movs	r0, #2
 80028a4:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4798      	blx	r3
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d1f9      	bne.n	80028a2 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80028ae:	bd08      	pop	{r3, pc}

080028b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80028b0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80028b2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4798      	blx	r3
  return USBD_OK;
}
 80028ba:	2000      	movs	r0, #0
 80028bc:	bd08      	pop	{r3, pc}

080028be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80028be:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80028c0:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80028c4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80028c6:	4628      	mov	r0, r5
 80028c8:	f000 fa65 	bl	8002d96 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80028cc:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80028ce:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80028d2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80028d6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80028da:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80028de:	f001 031f 	and.w	r3, r1, #31
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d00e      	beq.n	8002904 <USBD_LL_SetupStage+0x46>
 80028e6:	d307      	bcc.n	80028f8 <USBD_LL_SetupStage+0x3a>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d010      	beq.n	800290e <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80028ec:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80028f0:	4620      	mov	r0, r4
 80028f2:	f001 f939 	bl	8003b68 <USBD_LL_StallEP>
    break;
 80028f6:	e003      	b.n	8002900 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80028f8:	4629      	mov	r1, r5
 80028fa:	4620      	mov	r0, r4
 80028fc:	f000 f8d6 	bl	8002aac <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002900:	2000      	movs	r0, #0
 8002902:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002904:	4629      	mov	r1, r5
 8002906:	4620      	mov	r0, r4
 8002908:	f000 f9ca 	bl	8002ca0 <USBD_StdItfReq>
    break;
 800290c:	e7f8      	b.n	8002900 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800290e:	4629      	mov	r1, r5
 8002910:	4620      	mov	r0, r4
 8002912:	f000 f9dd 	bl	8002cd0 <USBD_StdEPReq>
    break;
 8002916:	e7f3      	b.n	8002900 <USBD_LL_SetupStage+0x42>

08002918 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800291e:	bb11      	cbnz	r1, 8002966 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002920:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002924:	2b03      	cmp	r3, #3
 8002926:	d10f      	bne.n	8002948 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002928:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800292c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002930:	4293      	cmp	r3, r2
 8002932:	d90b      	bls.n	800294c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002934:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002936:	429a      	cmp	r2, r3
 8002938:	bf28      	it	cs
 800293a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800293c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002940:	b292      	uxth	r2, r2
 8002942:	4629      	mov	r1, r5
 8002944:	f000 fa7b 	bl	8002e3e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002948:	2000      	movs	r0, #0
 800294a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800294c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	b123      	cbz	r3, 800295e <USBD_LL_DataOutStage+0x46>
 8002954:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002958:	2a03      	cmp	r2, #3
 800295a:	d100      	bne.n	800295e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800295c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800295e:	4620      	mov	r0, r4
 8002960:	f000 fa75 	bl	8002e4e <USBD_CtlSendStatus>
 8002964:	e7f0      	b.n	8002948 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002966:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0eb      	beq.n	8002948 <USBD_LL_DataOutStage+0x30>
 8002970:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002974:	2a03      	cmp	r2, #3
 8002976:	d1e7      	bne.n	8002948 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002978:	4798      	blx	r3
 800297a:	e7e5      	b.n	8002948 <USBD_LL_DataOutStage+0x30>

0800297c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4613      	mov	r3, r2
 8002980:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002982:	460e      	mov	r6, r1
 8002984:	2900      	cmp	r1, #0
 8002986:	d13d      	bne.n	8002a04 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002988:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800298c:	2a02      	cmp	r2, #2
 800298e:	d10f      	bne.n	80029b0 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002990:	69c5      	ldr	r5, [r0, #28]
 8002992:	6a02      	ldr	r2, [r0, #32]
 8002994:	4295      	cmp	r5, r2
 8002996:	d914      	bls.n	80029c2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002998:	1aaa      	subs	r2, r5, r2
 800299a:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800299c:	4619      	mov	r1, r3
 800299e:	b292      	uxth	r2, r2
 80029a0:	f000 fa36 	bl	8002e10 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80029a4:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80029a6:	461a      	mov	r2, r3
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f001 f924 	bl	8003bf8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80029b0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d102      	bne.n	80029be <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80029be:	2000      	movs	r0, #0
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80029c2:	6983      	ldr	r3, [r0, #24]
 80029c4:	fbb3 f5f2 	udiv	r5, r3, r2
 80029c8:	fb02 3515 	mls	r5, r2, r5, r3
 80029cc:	b965      	cbnz	r5, 80029e8 <USBD_LL_DataInStage+0x6c>
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d80a      	bhi.n	80029e8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80029d2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d206      	bcs.n	80029e8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80029da:	462a      	mov	r2, r5
 80029dc:	f000 fa18 	bl	8002e10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80029e0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80029e4:	462b      	mov	r3, r5
 80029e6:	e7de      	b.n	80029a6 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80029e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	b12b      	cbz	r3, 80029fc <USBD_LL_DataInStage+0x80>
 80029f0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80029f4:	2a03      	cmp	r2, #3
 80029f6:	d101      	bne.n	80029fc <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80029f8:	4620      	mov	r0, r4
 80029fa:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80029fc:	4620      	mov	r0, r4
 80029fe:	f000 fa31 	bl	8002e64 <USBD_CtlReceiveStatus>
 8002a02:	e7d5      	b.n	80029b0 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002a04:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0d7      	beq.n	80029be <USBD_LL_DataInStage+0x42>
 8002a0e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a12:	2a03      	cmp	r2, #3
 8002a14:	d1d3      	bne.n	80029be <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002a16:	4798      	blx	r3
 8002a18:	e7d1      	b.n	80029be <USBD_LL_DataInStage+0x42>

08002a1a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002a1a:	2200      	movs	r2, #0
{
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a20:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002a22:	4611      	mov	r1, r2
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	f001 f881 	bl	8003b2c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002a2a:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a2c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	4620      	mov	r0, r4
 8002a36:	f001 f879 	bl	8003b2c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002a40:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002a44:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002a46:	b12b      	cbz	r3, 8002a54 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002a48:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a4c:	7921      	ldrb	r1, [r4, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4620      	mov	r0, r4
 8002a52:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002a54:	2000      	movs	r0, #0
 8002a56:	bd38      	pop	{r3, r4, r5, pc}

08002a58 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002a58:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	4770      	bx	lr

08002a5e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002a5e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a62:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002a66:	2304      	movs	r3, #4
 8002a68:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	4770      	bx	lr

08002a70 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002a70:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002a74:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002a78:	2000      	movs	r0, #0
 8002a7a:	4770      	bx	lr

08002a7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002a7c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002a7e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a82:	2a03      	cmp	r2, #3
 8002a84:	d104      	bne.n	8002a90 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002a86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	b103      	cbz	r3, 8002a90 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002a8e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002a90:	2000      	movs	r0, #0
 8002a92:	bd08      	pop	{r3, pc}

08002a94 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	f001 f865 	bl	8003b68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002a9e:	4620      	mov	r0, r4
}
 8002aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f001 b85f 	b.w	8003b68 <USBD_LL_StallEP>
	...

08002aac <USBD_StdDevReq>:
{
 8002aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002aae:	784b      	ldrb	r3, [r1, #1]
{
 8002ab0:	4604      	mov	r4, r0
 8002ab2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d879      	bhi.n	8002bac <USBD_StdDevReq+0x100>
 8002ab8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002abc:	00e500c9 	.word	0x00e500c9
 8002ac0:	00d90078 	.word	0x00d90078
 8002ac4:	006d0078 	.word	0x006d0078
 8002ac8:	0078000a 	.word	0x0078000a
 8002acc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002ad0:	884b      	ldrh	r3, [r1, #2]
 8002ad2:	0a1a      	lsrs	r2, r3, #8
 8002ad4:	3a01      	subs	r2, #1
 8002ad6:	2a06      	cmp	r2, #6
 8002ad8:	d868      	bhi.n	8002bac <USBD_StdDevReq+0x100>
 8002ada:	e8df f002 	tbb	[pc, r2]
 8002ade:	1c04      	.short	0x1c04
 8002ae0:	49676729 	.word	0x49676729
 8002ae4:	52          	.byte	0x52
 8002ae5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ae6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002aea:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002aec:	f10d 0106 	add.w	r1, sp, #6
 8002af0:	7c20      	ldrb	r0, [r4, #16]
 8002af2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002af4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d067      	beq.n	8002bcc <USBD_StdDevReq+0x120>
 8002afc:	88eb      	ldrh	r3, [r5, #6]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d064      	beq.n	8002bcc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002b02:	429a      	cmp	r2, r3
 8002b04:	bf28      	it	cs
 8002b06:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002b08:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002b0a:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f000 f971 	bl	8002df6 <USBD_CtlSendData>
 8002b14:	e05a      	b.n	8002bcc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002b16:	7c02      	ldrb	r2, [r0, #16]
 8002b18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b1c:	b932      	cbnz	r2, 8002b2c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002b20:	f10d 0006 	add.w	r0, sp, #6
 8002b24:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002b26:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b28:	7043      	strb	r3, [r0, #1]
 8002b2a:	e7e3      	b.n	8002af4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	e7f7      	b.n	8002b20 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d83a      	bhi.n	8002bac <USBD_StdDevReq+0x100>
 8002b36:	e8df f003 	tbb	[pc, r3]
 8002b3a:	0703      	.short	0x0703
 8002b3c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002b40:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	e7d1      	b.n	8002aec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002b48:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	e7cd      	b.n	8002aec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002b50:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	e7c9      	b.n	8002aec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002b58:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	e7c5      	b.n	8002aec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002b60:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	e7c1      	b.n	8002aec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002b68:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	e7bd      	b.n	8002aec <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002b70:	7c03      	ldrb	r3, [r0, #16]
 8002b72:	b9db      	cbnz	r3, 8002bac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002b74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b78:	f10d 0006 	add.w	r0, sp, #6
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	4798      	blx	r3
 8002b80:	e7b8      	b.n	8002af4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002b82:	7c03      	ldrb	r3, [r0, #16]
 8002b84:	b993      	cbnz	r3, 8002bac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002b86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b8a:	f10d 0006 	add.w	r0, sp, #6
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002b92:	2307      	movs	r3, #7
 8002b94:	e7c8      	b.n	8002b28 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002b96:	888b      	ldrh	r3, [r1, #4]
 8002b98:	b943      	cbnz	r3, 8002bac <USBD_StdDevReq+0x100>
 8002b9a:	88cb      	ldrh	r3, [r1, #6]
 8002b9c:	b933      	cbnz	r3, 8002bac <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002b9e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002ba2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002ba4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002ba6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002baa:	d103      	bne.n	8002bb4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7ff ff71 	bl	8002a94 <USBD_CtlError.constprop.0>
    break;
 8002bb2:	e00b      	b.n	8002bcc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002bb4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f001 f801 	bl	8003bc0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f000 f945 	bl	8002e4e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002bc4:	b12d      	cbz	r5, 8002bd2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002bc6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002bc8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002bcc:	2000      	movs	r0, #0
 8002bce:	b003      	add	sp, #12
 8002bd0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e7f8      	b.n	8002bc8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002bd6:	7889      	ldrb	r1, [r1, #2]
 8002bd8:	4d30      	ldr	r5, [pc, #192]	; (8002c9c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002bda:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002bdc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002bde:	d8e5      	bhi.n	8002bac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002be0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d00c      	beq.n	8002c02 <USBD_StdDevReq+0x156>
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d1df      	bne.n	8002bac <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002bec:	b9b1      	cbnz	r1, 8002c1c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bee:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8002bf0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002bf2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8002bf6:	f7ff fe5b 	bl	80028b0 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f927 	bl	8002e4e <USBD_CtlSendStatus>
 8002c00:	e7e4      	b.n	8002bcc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d0f9      	beq.n	8002bfa <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002c06:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c08:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002c0a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002c0c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff fe42 	bl	800289a <USBD_SetClassConfig>
 8002c16:	2802      	cmp	r0, #2
 8002c18:	d1ef      	bne.n	8002bfa <USBD_StdDevReq+0x14e>
 8002c1a:	e7c7      	b.n	8002bac <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002c1c:	6841      	ldr	r1, [r0, #4]
 8002c1e:	2901      	cmp	r1, #1
 8002c20:	d0eb      	beq.n	8002bfa <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002c22:	b2c9      	uxtb	r1, r1
 8002c24:	f7ff fe44 	bl	80028b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002c28:	7829      	ldrb	r1, [r5, #0]
 8002c2a:	6061      	str	r1, [r4, #4]
 8002c2c:	e7f0      	b.n	8002c10 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002c2e:	88ca      	ldrh	r2, [r1, #6]
 8002c30:	2a01      	cmp	r2, #1
 8002c32:	d1bb      	bne.n	8002bac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002c34:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d003      	beq.n	8002c44 <USBD_StdDevReq+0x198>
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d1b5      	bne.n	8002bac <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002c40:	1d01      	adds	r1, r0, #4
 8002c42:	e764      	b.n	8002b0e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002c44:	4601      	mov	r1, r0
 8002c46:	2300      	movs	r3, #0
 8002c48:	f841 3f08 	str.w	r3, [r1, #8]!
 8002c4c:	e75f      	b.n	8002b0e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002c4e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c52:	3b02      	subs	r3, #2
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d8a9      	bhi.n	8002bac <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002c5c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002c60:	b10b      	cbz	r3, 8002c66 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002c62:	2303      	movs	r3, #3
 8002c64:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002c66:	2202      	movs	r2, #2
 8002c68:	f104 010c 	add.w	r1, r4, #12
 8002c6c:	e74f      	b.n	8002b0e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002c6e:	884b      	ldrh	r3, [r1, #2]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d1ab      	bne.n	8002bcc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002c74:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002c78:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4620      	mov	r0, r4
 8002c82:	4798      	blx	r3
 8002c84:	e7b9      	b.n	8002bfa <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002c86:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c8a:	3b02      	subs	r3, #2
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d88d      	bhi.n	8002bac <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002c90:	884b      	ldrh	r3, [r1, #2]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d19a      	bne.n	8002bcc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002c96:	2300      	movs	r3, #0
 8002c98:	e7ec      	b.n	8002c74 <USBD_StdDevReq+0x1c8>
 8002c9a:	bf00      	nop
 8002c9c:	2000034d 	.word	0x2000034d

08002ca0 <USBD_StdItfReq>:
{
 8002ca0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002ca2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002ca6:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002ca8:	2b03      	cmp	r3, #3
{
 8002caa:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002cac:	d10d      	bne.n	8002cca <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002cae:	790b      	ldrb	r3, [r1, #4]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d80a      	bhi.n	8002cca <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002cb4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002cbc:	88eb      	ldrh	r3, [r5, #6]
 8002cbe:	b913      	cbnz	r3, 8002cc6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f000 f8c4 	bl	8002e4e <USBD_CtlSendStatus>
}
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002cca:	f7ff fee3 	bl	8002a94 <USBD_CtlError.constprop.0>
    break;
 8002cce:	e7fa      	b.n	8002cc6 <USBD_StdItfReq+0x26>

08002cd0 <USBD_StdEPReq>:
{
 8002cd0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002cd2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002cd4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002cd6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002cda:	2a20      	cmp	r2, #32
{
 8002cdc:	4604      	mov	r4, r0
 8002cde:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002ce0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002ce2:	d105      	bne.n	8002cf0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002ce4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4798      	blx	r3
}
 8002cec:	2000      	movs	r0, #0
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002cf0:	784a      	ldrb	r2, [r1, #1]
 8002cf2:	2a01      	cmp	r2, #1
 8002cf4:	d01c      	beq.n	8002d30 <USBD_StdEPReq+0x60>
 8002cf6:	d32a      	bcc.n	8002d4e <USBD_StdEPReq+0x7e>
 8002cf8:	2a03      	cmp	r2, #3
 8002cfa:	d1f7      	bne.n	8002cec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002cfc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d00:	2a02      	cmp	r2, #2
 8002d02:	d040      	beq.n	8002d86 <USBD_StdEPReq+0xb6>
 8002d04:	2a03      	cmp	r2, #3
 8002d06:	d002      	beq.n	8002d0e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002d08:	f7ff fec4 	bl	8002a94 <USBD_CtlError.constprop.0>
      break;
 8002d0c:	e7ee      	b.n	8002cec <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002d0e:	884a      	ldrh	r2, [r1, #2]
 8002d10:	b922      	cbnz	r2, 8002d1c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002d12:	065e      	lsls	r6, r3, #25
 8002d14:	d002      	beq.n	8002d1c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002d16:	4619      	mov	r1, r3
 8002d18:	f000 ff26 	bl	8003b68 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002d1c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002d20:	4629      	mov	r1, r5
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4620      	mov	r0, r4
 8002d26:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 f890 	bl	8002e4e <USBD_CtlSendStatus>
 8002d2e:	e7dd      	b.n	8002cec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002d30:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d34:	2a02      	cmp	r2, #2
 8002d36:	d026      	beq.n	8002d86 <USBD_StdEPReq+0xb6>
 8002d38:	2a03      	cmp	r2, #3
 8002d3a:	d1e5      	bne.n	8002d08 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002d3c:	884a      	ldrh	r2, [r1, #2]
 8002d3e:	2a00      	cmp	r2, #0
 8002d40:	d1d4      	bne.n	8002cec <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002d42:	0659      	lsls	r1, r3, #25
 8002d44:	d0f0      	beq.n	8002d28 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002d46:	4619      	mov	r1, r3
 8002d48:	f000 ff1c 	bl	8003b84 <USBD_LL_ClearStallEP>
 8002d4c:	e7e6      	b.n	8002d1c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002d4e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d52:	2a02      	cmp	r2, #2
 8002d54:	d017      	beq.n	8002d86 <USBD_StdEPReq+0xb6>
 8002d56:	2a03      	cmp	r2, #3
 8002d58:	d1d6      	bne.n	8002d08 <USBD_StdEPReq+0x38>
 8002d5a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002d5e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002d62:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002d66:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002d68:	bf14      	ite	ne
 8002d6a:	3514      	addne	r5, #20
 8002d6c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002d70:	f000 ff16 	bl	8003ba0 <USBD_LL_IsStallEP>
 8002d74:	b168      	cbz	r0, 8002d92 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002d76:	2301      	movs	r3, #1
 8002d78:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f000 f839 	bl	8002df6 <USBD_CtlSendData>
      break;
 8002d84:	e7b2      	b.n	8002cec <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002d86:	065a      	lsls	r2, r3, #25
 8002d88:	d0b0      	beq.n	8002cec <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f000 feec 	bl	8003b68 <USBD_LL_StallEP>
 8002d90:	e7ac      	b.n	8002cec <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002d92:	6028      	str	r0, [r5, #0]
 8002d94:	e7f1      	b.n	8002d7a <USBD_StdEPReq+0xaa>

08002d96 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002d96:	780b      	ldrb	r3, [r1, #0]
 8002d98:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002d9a:	784b      	ldrb	r3, [r1, #1]
 8002d9c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002d9e:	78ca      	ldrb	r2, [r1, #3]
 8002da0:	788b      	ldrb	r3, [r1, #2]
 8002da2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002da6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002da8:	794a      	ldrb	r2, [r1, #5]
 8002daa:	790b      	ldrb	r3, [r1, #4]
 8002dac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002db0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002db2:	79ca      	ldrb	r2, [r1, #7]
 8002db4:	798b      	ldrb	r3, [r1, #6]
 8002db6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002dba:	80c3      	strh	r3, [r0, #6]
 8002dbc:	4770      	bx	lr

08002dbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002dbe:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002dc0:	b188      	cbz	r0, 8002de6 <USBD_GetString+0x28>
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002dc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	d1f9      	bne.n	8002dc4 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002dd6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	704b      	strb	r3, [r1, #1]
 8002ddc:	2302      	movs	r3, #2
 8002dde:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002de0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002de4:	b905      	cbnz	r5, 8002de8 <USBD_GetString+0x2a>
 8002de6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	54cd      	strb	r5, [r1, r3]
 8002dec:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002dee:	3302      	adds	r3, #2
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	548c      	strb	r4, [r1, r2]
 8002df4:	e7f4      	b.n	8002de0 <USBD_GetString+0x22>

08002df6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002df6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002df8:	2202      	movs	r2, #2
{
 8002dfa:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002dfc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002e00:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e02:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002e04:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002e06:	2100      	movs	r1, #0
 8002e08:	f000 fee8 	bl	8003bdc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002e10:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002e12:	4613      	mov	r3, r2
 8002e14:	460a      	mov	r2, r1
 8002e16:	2100      	movs	r1, #0
 8002e18:	f000 fee0 	bl	8003bdc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	bd08      	pop	{r3, pc}

08002e20 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002e20:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002e22:	2203      	movs	r2, #3
{
 8002e24:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002e26:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002e2a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002e2e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002e30:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002e34:	2100      	movs	r1, #0
 8002e36:	f000 fedf 	bl	8003bf8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	bd10      	pop	{r4, pc}

08002e3e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002e3e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002e40:	4613      	mov	r3, r2
 8002e42:	460a      	mov	r2, r1
 8002e44:	2100      	movs	r1, #0
 8002e46:	f000 fed7 	bl	8003bf8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd08      	pop	{r3, pc}

08002e4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002e4e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002e50:	2304      	movs	r3, #4
 8002e52:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002e56:	2300      	movs	r3, #0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f000 febe 	bl	8003bdc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002e60:	2000      	movs	r0, #0
 8002e62:	bd08      	pop	{r3, pc}

08002e64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002e64:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002e66:	2305      	movs	r3, #5
 8002e68:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	f000 fec1 	bl	8003bf8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	bd08      	pop	{r3, pc}

08002e7a <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e82:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e84:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e86:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e88:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e8a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e90:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e92:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e94:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e96:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e98:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e9a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e9c:	f7fe fae0 	bl	8001460 <HAL_RCC_OscConfig>
 8002ea0:	b100      	cbz	r0, 8002ea4 <SystemClock_Config+0x2a>
 8002ea2:	e7fe      	b.n	8002ea2 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea4:	230f      	movs	r3, #15
 8002ea6:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eac:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eae:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb4:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eb6:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eb8:	f7fe fc9a 	bl	80017f0 <HAL_RCC_ClockConfig>
 8002ebc:	b100      	cbz	r0, 8002ec0 <SystemClock_Config+0x46>
 8002ebe:	e7fe      	b.n	8002ebe <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ec0:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002ec2:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec4:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ec6:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec8:	f7fe fd5c 	bl	8001984 <HAL_RCCEx_PeriphCLKConfig>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	b100      	cbz	r0, 8002ed2 <SystemClock_Config+0x58>
 8002ed0:	e7fe      	b.n	8002ed0 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ed2:	f7fe fd31 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ede:	f7fd f9f3 	bl	80002c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ee2:	2004      	movs	r0, #4
 8002ee4:	f7fd fa06 	bl	80002f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4621      	mov	r1, r4
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f7fd f9aa 	bl	8000248 <HAL_NVIC_SetPriority>
}
 8002ef4:	b014      	add	sp, #80	; 0x50
 8002ef6:	bd10      	pop	{r4, pc}

08002ef8 <main>:
{
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
	microsecondCounter = 0;
 8002efa:	2400      	movs	r4, #0
 8002efc:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <main+0x1ac>)
{
 8002efe:	b089      	sub	sp, #36	; 0x24
	microsecondCounter = 0;
 8002f00:	801c      	strh	r4, [r3, #0]
  HAL_Init();
 8002f02:	f7fd f959 	bl	80001b8 <HAL_Init>
  SystemClock_Config();
 8002f06:	f7ff ffb8 	bl	8002e7a <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <main+0x1b0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f0c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f10:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f12:	4866      	ldr	r0, [pc, #408]	; (80030ac <main+0x1b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	619a      	str	r2, [r3, #24]
 8002f1a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(DHT22_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1e:	f002 0220 	and.w	r2, r2, #32
 8002f22:	9200      	str	r2, [sp, #0]
 8002f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	f042 0204 	orr.w	r2, r2, #4
 8002f2e:	619a      	str	r2, [r3, #24]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	f002 0204 	and.w	r2, r2, #4
 8002f36:	9201      	str	r2, [sp, #4]
 8002f38:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	f042 0208 	orr.w	r2, r2, #8
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	f002 0208 	and.w	r2, r2, #8
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	f042 0210 	orr.w	r2, r2, #16
 8002f52:	619a      	str	r2, [r3, #24]
 8002f54:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f56:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	9303      	str	r3, [sp, #12]
 8002f5e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002f60:	f7fd faba 	bl	80004d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DHT22_IN_Pin;
 8002f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(DHT22_IN_GPIO_Port, &GPIO_InitStruct);
 8002f68:	a904      	add	r1, sp, #16
 8002f6a:	4850      	ldr	r0, [pc, #320]	; (80030ac <main+0x1b4>)
  GPIO_InitStruct.Pin = DHT22_IN_Pin;
 8002f6c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DHT22_IN_GPIO_Port, &GPIO_InitStruct);
 8002f72:	f7fd f9d1 	bl	8000318 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f76:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	a904      	add	r1, sp, #16
 8002f7c:	484b      	ldr	r0, [pc, #300]	; (80030ac <main+0x1b4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f7e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f7fd f9c8 	bl	8000318 <HAL_GPIO_Init>


  // Pin 13 - LED
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8c:	4848      	ldr	r0, [pc, #288]	; (80030b0 <main+0x1b8>)
 8002f8e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f90:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	9605      	str	r6, [sp, #20]
  hi2c1.Init.ClockSpeed = 100000;
 8002f96:	4d47      	ldr	r5, [pc, #284]	; (80030b4 <main+0x1bc>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	f7fd f9be 	bl	8000318 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002f9c:	4846      	ldr	r0, [pc, #280]	; (80030b8 <main+0x1c0>)
  hi2c1.Init.ClockSpeed = 100000;
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <main+0x1c4>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fa0:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002fa2:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002faa:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fac:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fae:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fb0:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fb2:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb6:	f7fd fb91 	bl	80006dc <HAL_I2C_Init>
 8002fba:	b100      	cbz	r0, 8002fbe <main+0xc6>
 8002fbc:	e7fe      	b.n	8002fbc <main+0xc4>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fbe:	f44f 7482 	mov.w	r4, #260	; 0x104
  hspi1.Instance = SPI1;
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <main+0x1c8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fc4:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <main+0x1cc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fc6:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fc8:	e883 0014 	stmia.w	r3, {r2, r4}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002fd6:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fd8:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fda:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fdc:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fde:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fe0:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe2:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe4:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe8:	f7fe fd44 	bl	8001a74 <HAL_SPI_Init>
 8002fec:	b100      	cbz	r0, 8002ff0 <main+0xf8>
 8002fee:	e7fe      	b.n	8002fee <main+0xf6>
  huart1.Init.BaudRate = 115200;
 8002ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <main+0x1d0>)
  huart1.Init.BaudRate = 115200;
 8002ff6:	4935      	ldr	r1, [pc, #212]	; (80030cc <main+0x1d4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff8:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8002ffa:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ffe:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003000:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003002:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003004:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003006:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003008:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800300a:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800300c:	f7fe feb4 	bl	8001d78 <HAL_UART_Init>
 8003010:	4604      	mov	r4, r0
 8003012:	b100      	cbz	r0, 8003016 <main+0x11e>
 8003014:	e7fe      	b.n	8003014 <main+0x11c>
  MX_USB_DEVICE_Init();
 8003016:	f000 fb49 	bl	80036ac <MX_USB_DEVICE_Init>
		   		   if(delayCounter == 10)
 800301a:	4d2d      	ldr	r5, [pc, #180]	; (80030d0 <main+0x1d8>)
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800301c:	4f24      	ldr	r7, [pc, #144]	; (80030b0 <main+0x1b8>)
	   switch(taskCounter)
 800301e:	2c01      	cmp	r4, #1
 8003020:	d027      	beq.n	8003072 <main+0x17a>
 8003022:	d314      	bcc.n	800304e <main+0x156>
 8003024:	2c02      	cmp	r4, #2
 8003026:	d039      	beq.n	800309c <main+0x1a4>
	   if(!readUSBSerial(USBtext))
 8003028:	482a      	ldr	r0, [pc, #168]	; (80030d4 <main+0x1dc>)
 800302a:	f000 f97f 	bl	800332c <readUSBSerial>
 800302e:	b920      	cbnz	r0, 800303a <main+0x142>
		   command = DecodeCommand(USBtext);
 8003030:	4828      	ldr	r0, [pc, #160]	; (80030d4 <main+0x1dc>)
 8003032:	f000 fc15 	bl	8003860 <DecodeCommand>
		   DoCommand(command);
 8003036:	f000 fb55 	bl	80036e4 <DoCommand>
	   taskCounter++;
 800303a:	3401      	adds	r4, #1
 800303c:	b2e4      	uxtb	r4, r4
		   taskCounter = 0;
 800303e:	2c06      	cmp	r4, #6
	   HAL_Delay(100);
 8003040:	f04f 0064 	mov.w	r0, #100	; 0x64
		   taskCounter = 0;
 8003044:	bf28      	it	cs
 8003046:	2400      	movcs	r4, #0
	   HAL_Delay(100);
 8003048:	f7fd f8da 	bl	8000200 <HAL_Delay>
	   check = 0;
 800304c:	e7e7      	b.n	800301e <main+0x126>
			   if(LED == 1)
 800304e:	2e01      	cmp	r6, #1
 8003050:	d107      	bne.n	8003062 <main+0x16a>
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003058:	4638      	mov	r0, r7
 800305a:	f7fd fa3d 	bl	80004d8 <HAL_GPIO_WritePin>
				   LED = 0;
 800305e:	4626      	mov	r6, r4
 8003060:	e7e2      	b.n	8003028 <main+0x130>
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003062:	2201      	movs	r2, #1
 8003064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003068:	4638      	mov	r0, r7
 800306a:	f7fd fa35 	bl	80004d8 <HAL_GPIO_WritePin>
				   LED = 1;
 800306e:	2601      	movs	r6, #1
 8003070:	e7da      	b.n	8003028 <main+0x130>
		   		   if(delayCounter == 10)
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	2b0a      	cmp	r3, #10
 8003076:	d105      	bne.n	8003084 <main+0x18c>
		   			   delayCounter = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	602b      	str	r3, [r5, #0]
		   			   readDHT22Data();
 800307c:	f000 f854 	bl	8003128 <readDHT22Data>
				   	   DHT22_DecodeReadings();
 8003080:	f000 f8ea 	bl	8003258 <DHT22_DecodeReadings>
		   		   delayCounter++;
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	602b      	str	r3, [r5, #0]
			   humi = DHT22_GetHumidity();
 800308a:	f000 f835 	bl	80030f8 <DHT22_GetHumidity>
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <main+0x1e0>)
 8003090:	6018      	str	r0, [r3, #0]
			   temp = DHT22_GetTemperature();
 8003092:	f000 f83d 	bl	8003110 <DHT22_GetTemperature>
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <main+0x1e4>)
 8003098:	6018      	str	r0, [r3, #0]
			   break;
 800309a:	e7c5      	b.n	8003028 <main+0x130>
			   getCurrentTime();
 800309c:	f000 f9ce 	bl	800343c <getCurrentTime>
			   break;
 80030a0:	e7c2      	b.n	8003028 <main+0x130>
 80030a2:	bf00      	nop
 80030a4:	20000738 	.word	0x20000738
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40010c00 	.word	0x40010c00
 80030b0:	40011000 	.word	0x40011000
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	200006a4 	.word	0x200006a4
 80030bc:	40005400 	.word	0x40005400
 80030c0:	2000077c 	.word	0x2000077c
 80030c4:	40013000 	.word	0x40013000
 80030c8:	200006f8 	.word	0x200006f8
 80030cc:	40013800 	.word	0x40013800
 80030d0:	20000450 	.word	0x20000450
 80030d4:	2000034e 	.word	0x2000034e
 80030d8:	20000454 	.word	0x20000454
 80030dc:	20000458 	.word	0x20000458

080030e0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80030e0:	e7fe      	b.n	80030e0 <_Error_Handler>

080030e2 <Delay_us>:
//
//	while(microsecondCounter < us)
//	{
//
//	}
	for(short i = 0; i < us; i++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4290      	cmp	r0, r2
 80030e8:	dc00      	bgt.n	80030ec <Delay_us+0xa>
		for(int j = 0; j< MICROSECCONSTANT; j++)
		{
			asm volatile("nop");
		}
	}
}
 80030ea:	4770      	bx	lr
 80030ec:	2248      	movs	r2, #72	; 0x48
			asm volatile("nop");
 80030ee:	bf00      	nop
		for(int j = 0; j< MICROSECCONSTANT; j++)
 80030f0:	3a01      	subs	r2, #1
 80030f2:	d1fc      	bne.n	80030ee <Delay_us+0xc>
 80030f4:	3301      	adds	r3, #1
 80030f6:	e7f5      	b.n	80030e4 <Delay_us+0x2>

080030f8 <DHT22_GetHumidity>:



uint16_t DHT22_GetHumidity(void)
{
	return (hMSB << 8) + hLSB;
 80030f8:	4a03      	ldr	r2, [pc, #12]	; (8003108 <DHT22_GetHumidity+0x10>)
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <DHT22_GetHumidity+0x14>)
 80030fc:	7810      	ldrb	r0, [r2, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 8003104:	b280      	uxth	r0, r0
 8003106:	4770      	bx	lr
 8003108:	2000046c 	.word	0x2000046c
 800310c:	2000046d 	.word	0x2000046d

08003110 <DHT22_GetTemperature>:

uint16_t DHT22_GetTemperature(void)
{
	return (tMSB << 8) + tLSB;
 8003110:	4a03      	ldr	r2, [pc, #12]	; (8003120 <DHT22_GetTemperature+0x10>)
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <DHT22_GetTemperature+0x14>)
 8003114:	7810      	ldrb	r0, [r2, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 800311c:	b280      	uxth	r0, r0
 800311e:	4770      	bx	lr
 8003120:	2000046f 	.word	0x2000046f
 8003124:	20000470 	.word	0x20000470

08003128 <readDHT22Data>:


// Read Information from DHT22
int readDHT22Data()
{
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	// Switch pin to input with Pull-Up
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
	//PORT.Pull = GPIO_NOPULL;
	PORT.Pin = DHT22_GPIO_PIN;
 800312a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
	PORT.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2402      	movs	r4, #2
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 8003132:	4d46      	ldr	r5, [pc, #280]	; (800324c <readDHT22Data+0x124>)
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003134:	4e46      	ldr	r6, [pc, #280]	; (8003250 <readDHT22Data+0x128>)
 8003136:	4629      	mov	r1, r5
 8003138:	4630      	mov	r0, r6
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 800313a:	606b      	str	r3, [r5, #4]
	PORT.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	60ec      	str	r4, [r5, #12]
	PORT.Pin = DHT22_GPIO_PIN;
 800313e:	602f      	str	r7, [r5, #0]
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003140:	f7fd f8ea 	bl	8000318 <HAL_GPIO_Init>



	// Generate start impulse for sensor
	DHT22_GPIO_PORT->BRR = DHT22_GPIO_PIN; // Pull down SDA (Bit_SET)
	HAL_Delay(2); // Host start signal at least 800us
 8003144:	4620      	mov	r0, r4
	DHT22_GPIO_PORT->BSRR = DHT22_GPIO_PIN; // Release SDA (Bit_RESET)

	//Delay_us(50);
	// Switch pin to input with Pull-Up
	PORT.Mode = GPIO_MODE_INPUT;
 8003146:	2400      	movs	r4, #0
	DHT22_GPIO_PORT->BRR = DHT22_GPIO_PIN; // Pull down SDA (Bit_SET)
 8003148:	6177      	str	r7, [r6, #20]
	HAL_Delay(2); // Host start signal at least 800us
 800314a:	f7fd f859 	bl	8000200 <HAL_Delay>
	DHT22_GPIO_PORT->BSRR = DHT22_GPIO_PIN; // Release SDA (Bit_RESET)
 800314e:	6137      	str	r7, [r6, #16]
	PORT.Pull = GPIO_NOPULL;
	PORT.Pin = DHT22_GPIO_PIN;
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003150:	4629      	mov	r1, r5
 8003152:	4630      	mov	r0, r6
	PORT.Mode = GPIO_MODE_INPUT;
 8003154:	606c      	str	r4, [r5, #4]
	PORT.Pull = GPIO_NOPULL;
 8003156:	60ac      	str	r4, [r5, #8]
	PORT.Pin = DHT22_GPIO_PIN;
 8003158:	602f      	str	r7, [r5, #0]
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 800315a:	f7fd f8dd 	bl	8000318 <HAL_GPIO_Init>

	// Wait for AM2302 to start communicate
	wait = 0;
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 200)) Delay_us(2);
 800315e:	68b1      	ldr	r1, [r6, #8]
 8003160:	f411 5180 	ands.w	r1, r1, #4096	; 0x1000
 8003164:	d11f      	bne.n	80031a6 <readDHT22Data+0x7e>
	if (wait > 50) return DHT22_RCV_NO_RESPONSE;
 8003166:	2c32      	cmp	r4, #50	; 0x32
 8003168:	d820      	bhi.n	80031ac <readDHT22Data+0x84>

	// Check ACK strobe from sensor
	wait = 0;
	while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 800316a:	4c39      	ldr	r4, [pc, #228]	; (8003250 <readDHT22Data+0x128>)
 800316c:	68a3      	ldr	r3, [r4, #8]
 800316e:	04de      	lsls	r6, r3, #19
 8003170:	d402      	bmi.n	8003178 <readDHT22Data+0x50>
 8003172:	3101      	adds	r1, #1
 8003174:	2965      	cmp	r1, #101	; 0x65
 8003176:	d11b      	bne.n	80031b0 <readDHT22Data+0x88>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK1;
 8003178:	3908      	subs	r1, #8
 800317a:	2907      	cmp	r1, #7
 800317c:	d85f      	bhi.n	800323e <readDHT22Data+0x116>
 800317e:	2100      	movs	r1, #0

	wait = 0;
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 8003180:	4c33      	ldr	r4, [pc, #204]	; (8003250 <readDHT22Data+0x128>)
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	04dd      	lsls	r5, r3, #19
 8003186:	d502      	bpl.n	800318e <readDHT22Data+0x66>
 8003188:	3101      	adds	r1, #1
 800318a:	2965      	cmp	r1, #101	; 0x65
 800318c:	d114      	bne.n	80031b8 <readDHT22Data+0x90>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK2;
 800318e:	3908      	subs	r1, #8
 8003190:	2907      	cmp	r1, #7
 8003192:	d856      	bhi.n	8003242 <readDHT22Data+0x11a>
 8003194:	2400      	movs	r4, #0
	// ACK strobe received --> receive 40 bits
	i = 0;
	while (i < 40) {
		// Measure bit start impulse (T_low = 50us)
		wait = 0;
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003196:	4d2e      	ldr	r5, [pc, #184]	; (8003250 <readDHT22Data+0x128>)
		if (wait > 16) {
			// invalid bit start impulse length
			bits[i] = 0xffff;
 8003198:	4e2e      	ldr	r6, [pc, #184]	; (8003254 <readDHT22Data+0x12c>)
 800319a:	2100      	movs	r1, #0
 800319c:	e013      	b.n	80031c6 <readDHT22Data+0x9e>
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 200)) Delay_us(2);
 800319e:	2002      	movs	r0, #2
 80031a0:	f7ff ff9f 	bl	80030e2 <Delay_us>
 80031a4:	e7db      	b.n	800315e <readDHT22Data+0x36>
 80031a6:	3401      	adds	r4, #1
 80031a8:	2cc9      	cmp	r4, #201	; 0xc9
 80031aa:	d1f8      	bne.n	800319e <readDHT22Data+0x76>
	if (wait > 50) return DHT22_RCV_NO_RESPONSE;
 80031ac:	2001      	movs	r0, #1
 80031ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7ff ff96 	bl	80030e2 <Delay_us>
 80031b6:	e7d9      	b.n	800316c <readDHT22Data+0x44>
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 80031b8:	2001      	movs	r0, #1
 80031ba:	f7ff ff92 	bl	80030e2 <Delay_us>
 80031be:	e7e0      	b.n	8003182 <readDHT22Data+0x5a>
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7ff ff8e 	bl	80030e2 <Delay_us>
 80031c6:	68ab      	ldr	r3, [r5, #8]
 80031c8:	04d8      	lsls	r0, r3, #19
 80031ca:	d50d      	bpl.n	80031e8 <readDHT22Data+0xc0>
		if (wait > 16) {
 80031cc:	2910      	cmp	r1, #16
 80031ce:	d80e      	bhi.n	80031ee <readDHT22Data+0xc6>
 80031d0:	2100      	movs	r1, #0
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
		} else {
			// Measure bit impulse length (T_h0 = 25us, T_h1 = 70us)
			wait = 0;
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 80031d2:	68ab      	ldr	r3, [r5, #8]
 80031d4:	04db      	lsls	r3, r3, #19
 80031d6:	d42c      	bmi.n	8003232 <readDHT22Data+0x10a>
			bits[i] = (wait < 16) ? wait : 0xffff;
 80031d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031dc:	290f      	cmp	r1, #15
 80031de:	bf88      	it	hi
 80031e0:	4619      	movhi	r1, r3
 80031e2:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
 80031e6:	e00b      	b.n	8003200 <readDHT22Data+0xd8>
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 80031e8:	3101      	adds	r1, #1
 80031ea:	2915      	cmp	r1, #21
 80031ec:	d1e8      	bne.n	80031c0 <readDHT22Data+0x98>
			bits[i] = 0xffff;
 80031ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031f2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 80031f6:	68ab      	ldr	r3, [r5, #8]
 80031f8:	04da      	lsls	r2, r3, #19
 80031fa:	d501      	bpl.n	8003200 <readDHT22Data+0xd8>
 80031fc:	2913      	cmp	r1, #19
 80031fe:	d90f      	bls.n	8003220 <readDHT22Data+0xf8>
 8003200:	3401      	adds	r4, #1
	while (i < 40) {
 8003202:	2c28      	cmp	r4, #40	; 0x28
 8003204:	d1c9      	bne.n	800319a <readDHT22Data+0x72>
 8003206:	2300      	movs	r3, #0
		}

		i++;
	}

	for (i = 0; i < 40; i++) if (bits[i] == 0xffff) return DHT22_RCV_RCV_TIMEOUT;
 8003208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800320c:	4a11      	ldr	r2, [pc, #68]	; (8003254 <readDHT22Data+0x12c>)
 800320e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003212:	4288      	cmp	r0, r1
 8003214:	d017      	beq.n	8003246 <readDHT22Data+0x11e>
 8003216:	3301      	adds	r3, #1
 8003218:	2b28      	cmp	r3, #40	; 0x28
 800321a:	d1f8      	bne.n	800320e <readDHT22Data+0xe6>

	return DHT22_RCV_OK;
 800321c:	2000      	movs	r0, #0
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003220:	2001      	movs	r0, #1
 8003222:	f7ff ff5e 	bl	80030e2 <Delay_us>
 8003226:	3101      	adds	r1, #1
 8003228:	e7e5      	b.n	80031f6 <readDHT22Data+0xce>
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff ff59 	bl	80030e2 <Delay_us>
 8003230:	e7cf      	b.n	80031d2 <readDHT22Data+0xaa>
 8003232:	3101      	adds	r1, #1
 8003234:	2915      	cmp	r1, #21
 8003236:	d1f8      	bne.n	800322a <readDHT22Data+0x102>
 8003238:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800323c:	e7d1      	b.n	80031e2 <readDHT22Data+0xba>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK1;
 800323e:	2002      	movs	r0, #2
 8003240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK2;
 8003242:	2003      	movs	r0, #3
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < 40; i++) if (bits[i] == 0xffff) return DHT22_RCV_RCV_TIMEOUT;
 8003246:	2004      	movs	r0, #4
}
 8003248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800324a:	bf00      	nop
 800324c:	2000045c 	.word	0x2000045c
 8003250:	40010c00 	.word	0x40010c00
 8003254:	200008d4 	.word	0x200008d4

08003258 <DHT22_DecodeReadings>:

uint16_t DHT22_DecodeReadings(void)
{
 8003258:	2000      	movs	r0, #0
 800325a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  i = 0;

	hMSB = 0;
	for (; i < 8; i++) {
		hMSB <<= 1;
		if (bits[i] > 7) hMSB |= 1;
 800325c:	4d2d      	ldr	r5, [pc, #180]	; (8003314 <DHT22_DecodeReadings+0xbc>)
{
 800325e:	4604      	mov	r4, r0
 8003260:	462f      	mov	r7, r5
		if (bits[i] > 7) hMSB |= 1;
 8003262:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
		hMSB <<= 1;
 8003266:	0061      	lsls	r1, r4, #1
		if (bits[i] > 7) hMSB |= 1;
 8003268:	2b07      	cmp	r3, #7
		hMSB <<= 1;
 800326a:	b2cc      	uxtb	r4, r1
 800326c:	f100 0001 	add.w	r0, r0, #1
		if (bits[i] > 7) hMSB |= 1;
 8003270:	bf88      	it	hi
 8003272:	f044 0401 	orrhi.w	r4, r4, #1
	for (; i < 8; i++) {
 8003276:	2808      	cmp	r0, #8
 8003278:	d1f3      	bne.n	8003262 <DHT22_DecodeReadings+0xa>
 800327a:	2000      	movs	r0, #0
 800327c:	4601      	mov	r1, r0
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <DHT22_DecodeReadings+0xc0>)
 8003280:	701c      	strb	r4, [r3, #0]
	}
	hLSB = 0;
	for (; i < 16; i++) {
		hLSB <<= 1;
		if (bits[i] > 7) hLSB |= 1;
 8003282:	183b      	adds	r3, r7, r0
 8003284:	8a1b      	ldrh	r3, [r3, #16]
		hLSB <<= 1;
 8003286:	0049      	lsls	r1, r1, #1
		if (bits[i] > 7) hLSB |= 1;
 8003288:	2b07      	cmp	r3, #7
		hLSB <<= 1;
 800328a:	b2c9      	uxtb	r1, r1
 800328c:	f100 0002 	add.w	r0, r0, #2
		if (bits[i] > 7) hLSB |= 1;
 8003290:	bf88      	it	hi
 8003292:	f041 0101 	orrhi.w	r1, r1, #1
	for (; i < 16; i++) {
 8003296:	2810      	cmp	r0, #16
 8003298:	d1f3      	bne.n	8003282 <DHT22_DecodeReadings+0x2a>
 800329a:	2500      	movs	r5, #0
 800329c:	462a      	mov	r2, r5
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <DHT22_DecodeReadings+0xc4>)
 80032a0:	7019      	strb	r1, [r3, #0]
	}
	tMSB = 0;
	for (; i < 24; i++) {
		tMSB <<= 1;
		if (bits[i] > 7) tMSB |= 1;
 80032a2:	197b      	adds	r3, r7, r5
 80032a4:	8c1b      	ldrh	r3, [r3, #32]
		tMSB <<= 1;
 80032a6:	0052      	lsls	r2, r2, #1
		if (bits[i] > 7) tMSB |= 1;
 80032a8:	2b07      	cmp	r3, #7
		tMSB <<= 1;
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f105 0502 	add.w	r5, r5, #2
		if (bits[i] > 7) tMSB |= 1;
 80032b0:	bf88      	it	hi
 80032b2:	f042 0201 	orrhi.w	r2, r2, #1
	for (; i < 24; i++) {
 80032b6:	2d10      	cmp	r5, #16
 80032b8:	d1f3      	bne.n	80032a2 <DHT22_DecodeReadings+0x4a>
 80032ba:	2500      	movs	r5, #0
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <DHT22_DecodeReadings+0xc8>)
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	462b      	mov	r3, r5
	}
	tLSB = 0;
	for (; i < 32; i++) {
		tLSB <<= 1;
		if (bits[i] > 7) tLSB |= 1;
 80032c2:	1978      	adds	r0, r7, r5
 80032c4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
		tLSB <<= 1;
 80032c6:	005b      	lsls	r3, r3, #1
		if (bits[i] > 7) tLSB |= 1;
 80032c8:	2807      	cmp	r0, #7
		tLSB <<= 1;
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f105 0502 	add.w	r5, r5, #2
		if (bits[i] > 7) tLSB |= 1;
 80032d0:	bf88      	it	hi
 80032d2:	f043 0301 	orrhi.w	r3, r3, #1
	for (; i < 32; i++) {
 80032d6:	2d10      	cmp	r5, #16
 80032d8:	d1f3      	bne.n	80032c2 <DHT22_DecodeReadings+0x6a>
 80032da:	2600      	movs	r6, #0
 80032dc:	4811      	ldr	r0, [pc, #68]	; (8003324 <DHT22_DecodeReadings+0xcc>)
 80032de:	4d12      	ldr	r5, [pc, #72]	; (8003328 <DHT22_DecodeReadings+0xd0>)
 80032e0:	7003      	strb	r3, [r0, #0]
 80032e2:	7828      	ldrb	r0, [r5, #0]
	}
	for (; i < 40; i++) {
		parity_rcv <<= 1;
		if (bits[i] > 7) parity_rcv |= 1;
 80032e4:	eb07 0e06 	add.w	lr, r7, r6
 80032e8:	f8be e040 	ldrh.w	lr, [lr, #64]	; 0x40
		parity_rcv <<= 1;
 80032ec:	0040      	lsls	r0, r0, #1
		if (bits[i] > 7) parity_rcv |= 1;
 80032ee:	f1be 0f07 	cmp.w	lr, #7
		parity_rcv <<= 1;
 80032f2:	b2c0      	uxtb	r0, r0
 80032f4:	f106 0602 	add.w	r6, r6, #2
		if (bits[i] > 7) parity_rcv |= 1;
 80032f8:	bf88      	it	hi
 80032fa:	f040 0001 	orrhi.w	r0, r0, #1
	for (; i < 40; i++) {
 80032fe:	2e10      	cmp	r6, #16
 8003300:	d1f0      	bne.n	80032e4 <DHT22_DecodeReadings+0x8c>
	}

	parity  = hMSB + hLSB + tMSB + tLSB;
 8003302:	4421      	add	r1, r4
 8003304:	440a      	add	r2, r1
 8003306:	4413      	add	r3, r2
 8003308:	7028      	strb	r0, [r5, #0]

	return (parity_rcv << 8) | parity;
 800330a:	b2db      	uxtb	r3, r3
}
 800330c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003312:	bf00      	nop
 8003314:	200008d4 	.word	0x200008d4
 8003318:	2000046d 	.word	0x2000046d
 800331c:	2000046c 	.word	0x2000046c
 8003320:	20000470 	.word	0x20000470
 8003324:	2000046f 	.word	0x2000046f
 8003328:	2000046e 	.word	0x2000046e

0800332c <readUSBSerial>:



// Two functions to read and write from/to USB Serial console
int readUSBSerial(unsigned char* receiveText)
{
 800332c:	b510      	push	{r4, lr}

	if(newUSBCommandReceived)
 800332e:	4c05      	ldr	r4, [pc, #20]	; (8003344 <readUSBSerial+0x18>)
 8003330:	7823      	ldrb	r3, [r4, #0]
 8003332:	b12b      	cbz	r3, 8003340 <readUSBSerial+0x14>
	{
		// Copy the USB Receive buffer to receiveText
		strcpy(receiveText, userRxBuf);
 8003334:	4904      	ldr	r1, [pc, #16]	; (8003348 <readUSBSerial+0x1c>)
 8003336:	f000 fd79 	bl	8003e2c <strcpy>
		newUSBCommandReceived = 0;
 800333a:	2000      	movs	r0, #0
 800333c:	7020      	strb	r0, [r4, #0]
		// Nothing to receive, walk away
		return(1);
	}
	//CDC_Receive_FS(receiveText, 255);

	return(0);
 800333e:	bd10      	pop	{r4, pc}
		return(1);
 8003340:	2001      	movs	r0, #1
}
 8003342:	bd10      	pop	{r4, pc}
 8003344:	20000924 	.word	0x20000924
 8003348:	200007d4 	.word	0x200007d4

0800334c <writeUSBSerial>:

int writeUSBSerial(unsigned char* sendText)
{
 800334c:	b510      	push	{r4, lr}
 800334e:	4604      	mov	r4, r0
	CDC_Transmit_FS(sendText, strlen(sendText));
 8003350:	f7fc ff06 	bl	8000160 <strlen>
 8003354:	b281      	uxth	r1, r0
 8003356:	4620      	mov	r0, r4
 8003358:	f000 fb24 	bl	80039a4 <CDC_Transmit_FS>

	return(0);
}
 800335c:	2000      	movs	r0, #0
 800335e:	bd10      	pop	{r4, pc}

08003360 <MinToBIN>:
}

unsigned char MinToBIN(unsigned char min)
{
	unsigned char bin;
	bin = (min % 10) + (min/10 << 4);
 8003360:	230a      	movs	r3, #10
 8003362:	fbb0 f2f3 	udiv	r2, r0, r3
 8003366:	fb03 0012 	mls	r0, r3, r2, r0
 800336a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	return(bin);
}
 800336e:	b2c0      	uxtb	r0, r0
 8003370:	4770      	bx	lr

08003372 <HourToBIN>:

unsigned char HourToBIN(unsigned char hour)
{
	unsigned char bin;
	// ASSUME 24 HOUR MODE
	bin = hour > 19 ? (hour % 10) + BIT5 : (hour % 10) + BIT4 * (hour > 9);
 8003372:	2813      	cmp	r0, #19
 8003374:	f04f 010a 	mov.w	r1, #10
 8003378:	d906      	bls.n	8003388 <HourToBIN+0x16>
 800337a:	fbb0 f2f1 	udiv	r2, r0, r1
 800337e:	fb01 0012 	mls	r0, r1, r2, r0
 8003382:	3020      	adds	r0, #32
 8003384:	b2c0      	uxtb	r0, r0
 8003386:	4770      	bx	lr
 8003388:	fbb0 f3f1 	udiv	r3, r0, r1
 800338c:	2809      	cmp	r0, #9
 800338e:	fb01 0313 	mls	r3, r1, r3, r0
 8003392:	bf8c      	ite	hi
 8003394:	2010      	movhi	r0, #16
 8003396:	2000      	movls	r0, #0
 8003398:	4418      	add	r0, r3
 800339a:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	return(bin);
}
 800339e:	4770      	bx	lr

080033a0 <setCurrentTime>:
{
 80033a0:	b530      	push	{r4, r5, lr}
	memset(data, 0, 4);
 80033a2:	2400      	movs	r4, #0
{
 80033a4:	b085      	sub	sp, #20
 80033a6:	4605      	mov	r5, r0
	data[1] = SecToBIN(sec);
 80033a8:	4610      	mov	r0, r2
	memset(data, 0, 4);
 80033aa:	9403      	str	r4, [sp, #12]
	data[1] = SecToBIN(sec);
 80033ac:	f7ff ffd8 	bl	8003360 <MinToBIN>
 80033b0:	f88d 000d 	strb.w	r0, [sp, #13]
	data[2] = MinToBIN(min);
 80033b4:	4608      	mov	r0, r1
 80033b6:	f7ff ffd3 	bl	8003360 <MinToBIN>
 80033ba:	f88d 000e 	strb.w	r0, [sp, #14]
	data[3] = HourToBIN(hour);
 80033be:	4628      	mov	r0, r5
 80033c0:	f7ff ffd7 	bl	8003372 <HourToBIN>
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 4, 100);
 80033c4:	2364      	movs	r3, #100	; 0x64
	data[3] = HourToBIN(hour);
 80033c6:	f88d 000f 	strb.w	r0, [sp, #15]
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 4, 100);
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	aa03      	add	r2, sp, #12
 80033ce:	2304      	movs	r3, #4
 80033d0:	21d0      	movs	r1, #208	; 0xd0
 80033d2:	4804      	ldr	r0, [pc, #16]	; (80033e4 <setCurrentTime+0x44>)
 80033d4:	f7fd fa02 	bl	80007dc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80033d8:	2014      	movs	r0, #20
 80033da:	f7fc ff11 	bl	8000200 <HAL_Delay>
}
 80033de:	4620      	mov	r0, r4
 80033e0:	b005      	add	sp, #20
 80033e2:	bd30      	pop	{r4, r5, pc}
 80033e4:	200006a4 	.word	0x200006a4

080033e8 <BINtoMin>:
}

unsigned char BINtoMin(unsigned char bin)
{
	unsigned char min;
	min = (bin & 0xf) + ((bin>>4)*10);
 80033e8:	0903      	lsrs	r3, r0, #4
 80033ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ee:	f000 000f 	and.w	r0, r0, #15
 80033f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	return(min);
}
 80033f6:	b2c0      	uxtb	r0, r0
 80033f8:	4770      	bx	lr

080033fa <BINtoHour>:

unsigned char BINtoHour(unsigned char bin)
{
 80033fa:	1102      	asrs	r2, r0, #4
	unsigned char hour;
	// hour = if BIT6 set - 12HOUR MODE, else 24HOUR MODDE, BIT5 set - PM, else 20s +
	hour = (bin & 0x40) ? (bin & 0xf) + ((bin & 0x20) >> 5)*12 + ((bin & 0x10) >> 4)*10 : (bin & 0xf) + ((bin & 0x20) >> 5)*20 + ((bin & 0x10) >> 4)*10 ;
 80033fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003400:	f002 0201 	and.w	r2, r2, #1
 8003404:	ea4f 1360 	mov.w	r3, r0, asr #5
 8003408:	f000 010f 	and.w	r1, r0, #15
 800340c:	ea4f 0082 	mov.w	r0, r2, lsl #2
 8003410:	d00a      	beq.n	8003428 <BINtoHour+0x2e>
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	4410      	add	r0, r2
 8003418:	005a      	lsls	r2, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003422:	4408      	add	r0, r1
 8003424:	b2c0      	uxtb	r0, r0
	return(hour);
}
 8003426:	4770      	bx	lr
	hour = (bin & 0x40) ? (bin & 0xf) + ((bin & 0x20) >> 5)*12 + ((bin & 0x10) >> 4)*10 : (bin & 0xf) + ((bin & 0x20) >> 5)*20 + ((bin & 0x10) >> 4)*10 ;
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	4402      	add	r2, r0
 800342e:	0098      	lsls	r0, r3, #2
 8003430:	4418      	add	r0, r3
 8003432:	0080      	lsls	r0, r0, #2
 8003434:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003438:	e7f3      	b.n	8003422 <BINtoHour+0x28>
	...

0800343c <getCurrentTime>:
{
 800343c:	b530      	push	{r4, r5, lr}
	memset(data, 0, 4);
 800343e:	2300      	movs	r3, #0
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 8003440:	2564      	movs	r5, #100	; 0x64
 8003442:	4c15      	ldr	r4, [pc, #84]	; (8003498 <getCurrentTime+0x5c>)
{
 8003444:	b085      	sub	sp, #20
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 8003446:	aa03      	add	r2, sp, #12
	memset(data, 0, 4);
 8003448:	9303      	str	r3, [sp, #12]
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 800344a:	21d0      	movs	r1, #208	; 0xd0
 800344c:	2301      	movs	r3, #1
 800344e:	9500      	str	r5, [sp, #0]
 8003450:	4620      	mov	r0, r4
 8003452:	f7fd f9c3 	bl	80007dc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003456:	2014      	movs	r0, #20
 8003458:	f7fc fed2 	bl	8000200 <HAL_Delay>
	errCheck = HAL_I2C_Master_Receive(&hi2c1, addr, data, 4, 100);
 800345c:	2304      	movs	r3, #4
 800345e:	21d0      	movs	r1, #208	; 0xd0
 8003460:	aa03      	add	r2, sp, #12
 8003462:	9500      	str	r5, [sp, #0]
 8003464:	4620      	mov	r0, r4
 8003466:	f7fd fa8f 	bl	8000988 <HAL_I2C_Master_Receive>
 800346a:	4604      	mov	r4, r0
	HAL_Delay(20);
 800346c:	2014      	movs	r0, #20
 800346e:	f7fc fec7 	bl	8000200 <HAL_Delay>
	dateTime.dt_hours = 	BINtoHour(data[2]);
 8003472:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8003476:	f7ff ffc0 	bl	80033fa <BINtoHour>
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <getCurrentTime+0x60>)
 800347c:	7090      	strb	r0, [r2, #2]
	dateTime.dt_minutes =	BINtoMin(data[1]);
 800347e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003482:	f7ff ffb1 	bl	80033e8 <BINtoMin>
 8003486:	7050      	strb	r0, [r2, #1]
	dateTime.dt_seconds = 	BINtoSec(data[0]);
 8003488:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800348c:	f7ff ffac 	bl	80033e8 <BINtoMin>
 8003490:	7010      	strb	r0, [r2, #0]
}
 8003492:	4620      	mov	r0, r4
 8003494:	b005      	add	sp, #20
 8003496:	bd30      	pop	{r4, r5, pc}
 8003498:	200006a4 	.word	0x200006a4
 800349c:	20000926 	.word	0x20000926

080034a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_MspInit+0x84>)
{
 80034a2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80034a4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	619a      	str	r2, [r3, #24]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b8:	f7fc feb4 	bl	8000224 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	f06f 000b 	mvn.w	r0, #11
 80034c2:	4611      	mov	r1, r2
 80034c4:	f7fc fec0 	bl	8000248 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	f06f 000a 	mvn.w	r0, #10
 80034ce:	4611      	mov	r1, r2
 80034d0:	f7fc feba 	bl	8000248 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	f06f 0009 	mvn.w	r0, #9
 80034da:	4611      	mov	r1, r2
 80034dc:	f7fc feb4 	bl	8000248 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	f06f 0004 	mvn.w	r0, #4
 80034e6:	4611      	mov	r1, r2
 80034e8:	f7fc feae 	bl	8000248 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034ec:	2200      	movs	r2, #0
 80034ee:	f06f 0003 	mvn.w	r0, #3
 80034f2:	4611      	mov	r1, r2
 80034f4:	f7fc fea8 	bl	8000248 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	f06f 0001 	mvn.w	r0, #1
 80034fe:	4611      	mov	r1, r2
 8003500:	f7fc fea2 	bl	8000248 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	f04f 30ff 	mov.w	r0, #4294967295
 800350a:	4611      	mov	r1, r2
 800350c:	f7fc fe9c 	bl	8000248 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_MspInit+0x88>)
 8003512:	6853      	ldr	r3, [r2, #4]
 8003514:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800351c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800351e:	b003      	add	sp, #12
 8003520:	f85d fb04 	ldr.w	pc, [sp], #4
 8003524:	40021000 	.word	0x40021000
 8003528:	40010000 	.word	0x40010000

0800352c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800352c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800352e:	6802      	ldr	r2, [r0, #0]
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_I2C_MspInit+0x38>)
 8003532:	429a      	cmp	r2, r3
 8003534:	d113      	bne.n	800355e <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003536:	23c0      	movs	r3, #192	; 0xc0
 8003538:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800353a:	2312      	movs	r3, #18
 800353c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	a902      	add	r1, sp, #8
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003544:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f7fc fee7 	bl	8000318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_I2C_MspInit+0x40>)
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003552:	61da      	str	r2, [r3, #28]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800355e:	b007      	add	sp, #28
 8003560:	f85d fb04 	ldr.w	pc, [sp], #4
 8003564:	40005400 	.word	0x40005400
 8003568:	40010c00 	.word	0x40010c00
 800356c:	40021000 	.word	0x40021000

08003570 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003570:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003572:	6802      	ldr	r2, [r0, #0]
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_SPI_MspInit+0x4c>)
 8003576:	429a      	cmp	r2, r3
 8003578:	d11d      	bne.n	80035b6 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800357a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800357e:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003580:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003586:	619a      	str	r2, [r3, #24]
 8003588:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	480d      	ldr	r0, [pc, #52]	; (80035c0 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003594:	23a0      	movs	r3, #160	; 0xa0
 8003596:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	f7fc feba 	bl	8000318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035a4:	2340      	movs	r3, #64	; 0x40
 80035a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	a902      	add	r1, sp, #8
 80035ac:	4804      	ldr	r0, [pc, #16]	; (80035c0 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f7fc feb1 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035b6:	b007      	add	sp, #28
 80035b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035bc:	40013000 	.word	0x40013000
 80035c0:	40010800 	.word	0x40010800

080035c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80035c6:	6802      	ldr	r2, [r0, #0]
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x50>)
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d11f      	bne.n	800360e <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035d2:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80035d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035da:	619a      	str	r2, [r3, #24]
 80035dc:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	480e      	ldr	r0, [pc, #56]	; (8003618 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80035e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f6:	f7fc fe8f 	bl	8000318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003600:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003602:	a902      	add	r1, sp, #8
 8003604:	4804      	ldr	r0, [pc, #16]	; (8003618 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003606:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f7fc fe85 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800360e:	b007      	add	sp, #28
 8003610:	f85d fb04 	ldr.w	pc, [sp], #4
 8003614:	40013800 	.word	0x40013800
 8003618:	40010800 	.word	0x40010800

0800361c <NMI_Handler>:
 800361c:	4770      	bx	lr

0800361e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800361e:	e7fe      	b.n	800361e <HardFault_Handler>

08003620 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003620:	e7fe      	b.n	8003620 <MemManage_Handler>

08003622 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003622:	e7fe      	b.n	8003622 <BusFault_Handler>

08003624 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003624:	e7fe      	b.n	8003624 <UsageFault_Handler>

08003626 <SVC_Handler>:
 8003626:	4770      	bx	lr

08003628 <DebugMon_Handler>:
 8003628:	4770      	bx	lr

0800362a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800362a:	4770      	bx	lr

0800362c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800362c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800362e:	f7fc fdd5 	bl	80001dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003636:	f7fc be6a 	b.w	800030e <HAL_SYSTICK_IRQHandler>
	...

0800363c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800363e:	f7fd bc33 	b.w	8000ea8 <HAL_PCD_IRQHandler>
 8003642:	bf00      	nop
 8003644:	20001324 	.word	0x20001324

08003648 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <TIM1_CC_IRQHandler+0x8>)
 800364a:	f7fe ba53 	b.w	8001af4 <HAL_TIM_IRQHandler>
 800364e:	bf00      	nop
 8003650:	2000073c 	.word	0x2000073c

08003654 <TIM1_TRG_COM_IRQHandler>:
 8003654:	f7ff bff8 	b.w	8003648 <TIM1_CC_IRQHandler>

08003658 <TIM1_UP_IRQHandler>:
 8003658:	f7ff bff6 	b.w	8003648 <TIM1_CC_IRQHandler>

0800365c <TIM1_BRK_IRQHandler>:
 800365c:	f7ff bff4 	b.w	8003648 <TIM1_CC_IRQHandler>

08003660 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <SystemInit+0x40>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <SystemInit+0x44>)
 800366e:	400a      	ands	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003678:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800367c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003684:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800368c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800368e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003692:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003694:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <SystemInit+0x48>)
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	f8ff0000 	.word	0xf8ff0000
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80036ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80036ae:	4c09      	ldr	r4, [pc, #36]	; (80036d4 <MX_USB_DEVICE_Init+0x28>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	4909      	ldr	r1, [pc, #36]	; (80036d8 <MX_USB_DEVICE_Init+0x2c>)
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff f8cf 	bl	8002858 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80036ba:	4908      	ldr	r1, [pc, #32]	; (80036dc <MX_USB_DEVICE_Init+0x30>)
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff f8e0 	bl	8002882 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80036c2:	4620      	mov	r0, r4
 80036c4:	4906      	ldr	r1, [pc, #24]	; (80036e0 <MX_USB_DEVICE_Init+0x34>)
 80036c6:	f7ff f888 	bl	80027da <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80036ca:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80036cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80036d0:	f7ff b8de 	b.w	8002890 <USBD_Start>
 80036d4:	20000930 	.word	0x20000930
 80036d8:	2000012c 	.word	0x2000012c
 80036dc:	20000008 	.word	0x20000008
 80036e0:	2000011c 	.word	0x2000011c

080036e4 <DoCommand>:
	}

}

void DoCommand(int command)
{
 80036e4:	b510      	push	{r4, lr}

	unsigned char text[256] = "";
 80036e6:	2100      	movs	r1, #0
{
 80036e8:	4604      	mov	r4, r0
 80036ea:	b0c4      	sub	sp, #272	; 0x110
	unsigned char text[256] = "";
 80036ec:	22fc      	movs	r2, #252	; 0xfc
 80036ee:	a805      	add	r0, sp, #20
 80036f0:	9104      	str	r1, [sp, #16]
 80036f2:	f000 fb42 	bl	8003d7a <memset>

	if((command == COMMAND_ALL) || (command == COMMAND_TIME))
 80036f6:	1e63      	subs	r3, r4, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d930      	bls.n	800375e <DoCommand+0x7a>
		sprintf(text, "%02d:%02d:%04d\n", dateTime.dt_hours, dateTime.dt_minutes, dateTime.dt_seconds);
		writeUSBSerial(text);
		HAL_Delay(5);
	}

	if((command == COMMAND_ALL) || (command == COMMAND_DATE))
 80036fc:	2c03      	cmp	r4, #3
 80036fe:	d112      	bne.n	8003726 <DoCommand+0x42>
	{
		HAL_Delay(5);
 8003700:	2005      	movs	r0, #5
 8003702:	f7fc fd7d 	bl	8000200 <HAL_Delay>
		sprintf(text, "%02d.%02d.%04d\n", dateTime.dt_day, dateTime.dt_month, dateTime.dt_year);
 8003706:	4936      	ldr	r1, [pc, #216]	; (80037e0 <DoCommand+0xfc>)
 8003708:	a804      	add	r0, sp, #16
 800370a:	794b      	ldrb	r3, [r1, #5]
 800370c:	790a      	ldrb	r2, [r1, #4]
 800370e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8003712:	9100      	str	r1, [sp, #0]
 8003714:	4933      	ldr	r1, [pc, #204]	; (80037e4 <DoCommand+0x100>)
 8003716:	f000 fb39 	bl	8003d8c <siprintf>
		writeUSBSerial(text);
 800371a:	a804      	add	r0, sp, #16
 800371c:	f7ff fe16 	bl	800334c <writeUSBSerial>
		HAL_Delay(5);
 8003720:	2005      	movs	r0, #5
 8003722:	f7fc fd6d 	bl	8000200 <HAL_Delay>
	}

	if((command == COMMAND_SETTIME))
 8003726:	2c04      	cmp	r4, #4
 8003728:	d12d      	bne.n	8003786 <DoCommand+0xa2>
	{
		HAL_Delay(5);
 800372a:	2005      	movs	r0, #5
		unsigned char hour, min, sec;
		sscanf(USBtext, "SETTIME %d:%d:%d", &hour, &min, &sec);
 800372c:	f10d 040f 	add.w	r4, sp, #15
		HAL_Delay(5);
 8003730:	f7fc fd66 	bl	8000200 <HAL_Delay>
		sscanf(USBtext, "SETTIME %d:%d:%d", &hour, &min, &sec);
 8003734:	f10d 020d 	add.w	r2, sp, #13
 8003738:	492b      	ldr	r1, [pc, #172]	; (80037e8 <DoCommand+0x104>)
 800373a:	9400      	str	r4, [sp, #0]
 800373c:	f10d 030e 	add.w	r3, sp, #14
 8003740:	482a      	ldr	r0, [pc, #168]	; (80037ec <DoCommand+0x108>)
 8003742:	f000 fb47 	bl	8003dd4 <siscanf>
		setCurrentTime(hour, min, sec);
 8003746:	7822      	ldrb	r2, [r4, #0]
 8003748:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800374c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8003750:	f7ff fe26 	bl	80033a0 <setCurrentTime>
		writeUSBSerial(text);
		HAL_Delay(5);

		sprintf(text, ", humidity is %d.%d\n", humi/10, humi%10);
		writeUSBSerial(text);
		HAL_Delay(5);
 8003754:	2005      	movs	r0, #5
 8003756:	f7fc fd53 	bl	8000200 <HAL_Delay>
	}


}
 800375a:	b044      	add	sp, #272	; 0x110
 800375c:	bd10      	pop	{r4, pc}
		HAL_Delay(5);
 800375e:	2005      	movs	r0, #5
 8003760:	f7fc fd4e 	bl	8000200 <HAL_Delay>
		sprintf(text, "%02d:%02d:%04d\n", dateTime.dt_hours, dateTime.dt_minutes, dateTime.dt_seconds);
 8003764:	491e      	ldr	r1, [pc, #120]	; (80037e0 <DoCommand+0xfc>)
 8003766:	a804      	add	r0, sp, #16
 8003768:	784b      	ldrb	r3, [r1, #1]
 800376a:	788a      	ldrb	r2, [r1, #2]
 800376c:	7809      	ldrb	r1, [r1, #0]
 800376e:	9100      	str	r1, [sp, #0]
 8003770:	491f      	ldr	r1, [pc, #124]	; (80037f0 <DoCommand+0x10c>)
 8003772:	f000 fb0b 	bl	8003d8c <siprintf>
		writeUSBSerial(text);
 8003776:	a804      	add	r0, sp, #16
 8003778:	f7ff fde8 	bl	800334c <writeUSBSerial>
		HAL_Delay(5);
 800377c:	2005      	movs	r0, #5
 800377e:	f7fc fd3f 	bl	8000200 <HAL_Delay>
	if((command == COMMAND_ALL) || (command == COMMAND_DATE))
 8003782:	2c01      	cmp	r4, #1
 8003784:	e7bb      	b.n	80036fe <DoCommand+0x1a>
	if((command == COMMAND_SETDATE))
 8003786:	2c05      	cmp	r4, #5
 8003788:	d103      	bne.n	8003792 <DoCommand+0xae>
		HAL_Delay(5);
 800378a:	4620      	mov	r0, r4
 800378c:	f7fc fd38 	bl	8000200 <HAL_Delay>
 8003790:	e7e0      	b.n	8003754 <DoCommand+0x70>
	if((command == COMMAND_ALL) || (command == COMMAND_SENSOR))
 8003792:	2c01      	cmp	r4, #1
 8003794:	d121      	bne.n	80037da <DoCommand+0xf6>
		sprintf(text, "Temperature is %d.%d", temp/10, temp%10);
 8003796:	240a      	movs	r4, #10
		HAL_Delay(5);
 8003798:	2005      	movs	r0, #5
 800379a:	f7fc fd31 	bl	8000200 <HAL_Delay>
		sprintf(text, "Temperature is %d.%d", temp/10, temp%10);
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <DoCommand+0x110>)
 80037a0:	4915      	ldr	r1, [pc, #84]	; (80037f8 <DoCommand+0x114>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	a804      	add	r0, sp, #16
 80037a6:	fb93 f2f4 	sdiv	r2, r3, r4
 80037aa:	fb04 3312 	mls	r3, r4, r2, r3
 80037ae:	f000 faed 	bl	8003d8c <siprintf>
		writeUSBSerial(text);
 80037b2:	a804      	add	r0, sp, #16
 80037b4:	f7ff fdca 	bl	800334c <writeUSBSerial>
		HAL_Delay(5);
 80037b8:	2005      	movs	r0, #5
 80037ba:	f7fc fd21 	bl	8000200 <HAL_Delay>
		sprintf(text, ", humidity is %d.%d\n", humi/10, humi%10);
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <DoCommand+0x118>)
 80037c0:	490f      	ldr	r1, [pc, #60]	; (8003800 <DoCommand+0x11c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	a804      	add	r0, sp, #16
 80037c6:	fb93 f2f4 	sdiv	r2, r3, r4
 80037ca:	fb04 3312 	mls	r3, r4, r2, r3
 80037ce:	f000 fadd 	bl	8003d8c <siprintf>
		writeUSBSerial(text);
 80037d2:	a804      	add	r0, sp, #16
 80037d4:	f7ff fdba 	bl	800334c <writeUSBSerial>
 80037d8:	e7bc      	b.n	8003754 <DoCommand+0x70>
	if((command == COMMAND_ALL) || (command == COMMAND_SENSOR))
 80037da:	2c06      	cmp	r4, #6
 80037dc:	d0db      	beq.n	8003796 <DoCommand+0xb2>
 80037de:	e7bc      	b.n	800375a <DoCommand+0x76>
 80037e0:	20000926 	.word	0x20000926
 80037e4:	0800505a 	.word	0x0800505a
 80037e8:	0800506a 	.word	0x0800506a
 80037ec:	2000034e 	.word	0x2000034e
 80037f0:	0800504a 	.word	0x0800504a
 80037f4:	20000458 	.word	0x20000458
 80037f8:	0800507b 	.word	0x0800507b
 80037fc:	20000454 	.word	0x20000454
 8003800:	08005090 	.word	0x08005090

08003804 <GetFirstWord>:


void GetFirstWord(char* dest, char* src)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	460c      	mov	r4, r1
	// This function will try to get first WORD out of char*
	// Make sure both are equally long to no overflow happen
	if(dest == NULL)
 8003808:	4605      	mov	r5, r0
 800380a:	b308      	cbz	r0, 8003850 <GetFirstWord+0x4c>
		return;

	if(src == NULL)
 800380c:	b301      	cbz	r1, 8003850 <GetFirstWord+0x4c>
		return;

	uint8_t len = 0;

	for(uint8_t i = 0; i < strlen(src); i++)
 800380e:	4608      	mov	r0, r1
 8003810:	f7fc fca6 	bl	8000160 <strlen>
 8003814:	2100      	movs	r1, #0
	{
		if((src[i] == ' ') || (src[i] == '\n') || (src[i] == '\r'))
 8003816:	4e11      	ldr	r6, [pc, #68]	; (800385c <GetFirstWord+0x58>)
 8003818:	b2ca      	uxtb	r2, r1
	for(uint8_t i = 0; i < strlen(src); i++)
 800381a:	4290      	cmp	r0, r2
 800381c:	d802      	bhi.n	8003824 <GetFirstWord+0x20>
		}
	}


	if(len == 0)
		len = strlen(src) + 1;
 800381e:	3001      	adds	r0, #1
 8003820:	b2c2      	uxtb	r2, r0
 8003822:	e00d      	b.n	8003840 <GetFirstWord+0x3c>
		if((src[i] == ' ') || (src[i] == '\n') || (src[i] == '\r'))
 8003824:	5ca3      	ldrb	r3, [r4, r2]
 8003826:	3101      	adds	r1, #1
 8003828:	3b0a      	subs	r3, #10
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b16      	cmp	r3, #22
 800382e:	bf9a      	itte	ls
 8003830:	fa26 f303 	lsrls.w	r3, r6, r3
 8003834:	43db      	mvnls	r3, r3
 8003836:	2301      	movhi	r3, #1
 8003838:	07db      	lsls	r3, r3, #31
 800383a:	d4ed      	bmi.n	8003818 <GetFirstWord+0x14>
	if(len == 0)
 800383c:	2a00      	cmp	r2, #0
 800383e:	d0ee      	beq.n	800381e <GetFirstWord+0x1a>
 8003840:	1e51      	subs	r1, r2, #1
 8003842:	1e63      	subs	r3, r4, #1
 8003844:	1e68      	subs	r0, r5, #1
 8003846:	440c      	add	r4, r1

	for(uint8_t i = 0; i < len; i++)
 8003848:	42a3      	cmp	r3, r4
 800384a:	d102      	bne.n	8003852 <GetFirstWord+0x4e>
	{
		dest[i] = src[i];
	}

	dest[len] = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	54ab      	strb	r3, [r5, r2]
 8003850:	bd70      	pop	{r4, r5, r6, pc}
		dest[i] = src[i];
 8003852:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003856:	f800 1f01 	strb.w	r1, [r0, #1]!
 800385a:	e7f5      	b.n	8003848 <GetFirstWord+0x44>
 800385c:	00400009 	.word	0x00400009

08003860 <DecodeCommand>:
{
 8003860:	b510      	push	{r4, lr}
 8003862:	4604      	mov	r4, r0
 8003864:	b0c0      	sub	sp, #256	; 0x100
	memset (command, 0, 128);
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	2100      	movs	r1, #0
 800386a:	4668      	mov	r0, sp
 800386c:	f000 fa85 	bl	8003d7a <memset>
	if(strlen(comString) > 127)
 8003870:	4620      	mov	r0, r4
 8003872:	f7fc fc75 	bl	8000160 <strlen>
 8003876:	287f      	cmp	r0, #127	; 0x7f
		comString[127] = 0;
 8003878:	bf88      	it	hi
 800387a:	2300      	movhi	r3, #0
	GetFirstWord(command, comString);
 800387c:	4621      	mov	r1, r4
		comString[127] = 0;
 800387e:	bf88      	it	hi
 8003880:	f884 307f 	strbhi.w	r3, [r4, #127]	; 0x7f
	GetFirstWord(command, comString);
 8003884:	4668      	mov	r0, sp
 8003886:	f7ff ffbd 	bl	8003804 <GetFirstWord>
	char teststring[128] = "";
 800388a:	2100      	movs	r1, #0
 800388c:	227c      	movs	r2, #124	; 0x7c
 800388e:	a821      	add	r0, sp, #132	; 0x84
 8003890:	9120      	str	r1, [sp, #128]	; 0x80
 8003892:	f000 fa72 	bl	8003d7a <memset>
	HAL_Delay(5);
 8003896:	2005      	movs	r0, #5
 8003898:	f7fc fcb2 	bl	8000200 <HAL_Delay>
	sprintf(teststring, "Command is %s\n", command);
 800389c:	491b      	ldr	r1, [pc, #108]	; (800390c <DecodeCommand+0xac>)
 800389e:	466a      	mov	r2, sp
 80038a0:	a820      	add	r0, sp, #128	; 0x80
 80038a2:	f000 fa73 	bl	8003d8c <siprintf>
	writeUSBSerial(teststring);
 80038a6:	a820      	add	r0, sp, #128	; 0x80
 80038a8:	f7ff fd50 	bl	800334c <writeUSBSerial>
	HAL_Delay(5);
 80038ac:	2005      	movs	r0, #5
 80038ae:	f7fc fca7 	bl	8000200 <HAL_Delay>
	if(!strcmp(command, "ALL"))
 80038b2:	4917      	ldr	r1, [pc, #92]	; (8003910 <DecodeCommand+0xb0>)
 80038b4:	4668      	mov	r0, sp
 80038b6:	f7fc fc49 	bl	800014c <strcmp>
 80038ba:	b1e8      	cbz	r0, 80038f8 <DecodeCommand+0x98>
	if(!strcmp(command, "TIME"))
 80038bc:	4915      	ldr	r1, [pc, #84]	; (8003914 <DecodeCommand+0xb4>)
 80038be:	4668      	mov	r0, sp
 80038c0:	f7fc fc44 	bl	800014c <strcmp>
 80038c4:	b1d0      	cbz	r0, 80038fc <DecodeCommand+0x9c>
	if(!strcmp(command, "DATE"))
 80038c6:	4914      	ldr	r1, [pc, #80]	; (8003918 <DecodeCommand+0xb8>)
 80038c8:	4668      	mov	r0, sp
 80038ca:	f7fc fc3f 	bl	800014c <strcmp>
 80038ce:	b1b8      	cbz	r0, 8003900 <DecodeCommand+0xa0>
	if(!strcmp(command, "SETTIME"))
 80038d0:	4912      	ldr	r1, [pc, #72]	; (800391c <DecodeCommand+0xbc>)
 80038d2:	4668      	mov	r0, sp
 80038d4:	f7fc fc3a 	bl	800014c <strcmp>
 80038d8:	b1a0      	cbz	r0, 8003904 <DecodeCommand+0xa4>
	if(!strcmp(command, "SETDATE"))
 80038da:	4911      	ldr	r1, [pc, #68]	; (8003920 <DecodeCommand+0xc0>)
 80038dc:	4668      	mov	r0, sp
 80038de:	f7fc fc35 	bl	800014c <strcmp>
 80038e2:	b188      	cbz	r0, 8003908 <DecodeCommand+0xa8>
	if(!strcmp(command, "SENSOR"))
 80038e4:	490f      	ldr	r1, [pc, #60]	; (8003924 <DecodeCommand+0xc4>)
 80038e6:	4668      	mov	r0, sp
 80038e8:	f7fc fc30 	bl	800014c <strcmp>
		return(0);
 80038ec:	2800      	cmp	r0, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2006      	moveq	r0, #6
 80038f2:	2000      	movne	r0, #0
}
 80038f4:	b040      	add	sp, #256	; 0x100
 80038f6:	bd10      	pop	{r4, pc}
		return(COMMAND_ALL);
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7fb      	b.n	80038f4 <DecodeCommand+0x94>
		return(COMMAND_TIME);
 80038fc:	2002      	movs	r0, #2
 80038fe:	e7f9      	b.n	80038f4 <DecodeCommand+0x94>
		return(COMMAND_DATE);
 8003900:	2003      	movs	r0, #3
 8003902:	e7f7      	b.n	80038f4 <DecodeCommand+0x94>
		return(COMMAND_SETTIME);
 8003904:	2004      	movs	r0, #4
 8003906:	e7f5      	b.n	80038f4 <DecodeCommand+0x94>
		return(COMMAND_SETDATE);
 8003908:	2005      	movs	r0, #5
 800390a:	e7f3      	b.n	80038f4 <DecodeCommand+0x94>
 800390c:	08005020 	.word	0x08005020
 8003910:	0800502f 	.word	0x0800502f
 8003914:	08005036 	.word	0x08005036
 8003918:	0800503e 	.word	0x0800503e
 800391c:	08005033 	.word	0x08005033
 8003920:	0800503b 	.word	0x0800503b
 8003924:	08005043 	.word	0x08005043

08003928 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003928:	2000      	movs	r0, #0
 800392a:	4770      	bx	lr

0800392c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800392c:	2000      	movs	r0, #0
 800392e:	4770      	bx	lr

08003930 <CDC_Init_FS>:
{
 8003930:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003932:	4c06      	ldr	r4, [pc, #24]	; (800394c <CDC_Init_FS+0x1c>)
 8003934:	2200      	movs	r2, #0
 8003936:	4906      	ldr	r1, [pc, #24]	; (8003950 <CDC_Init_FS+0x20>)
 8003938:	4620      	mov	r0, r4
 800393a:	f7fe ff55 	bl	80027e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800393e:	4905      	ldr	r1, [pc, #20]	; (8003954 <CDC_Init_FS+0x24>)
 8003940:	4620      	mov	r0, r4
 8003942:	f7fe ff59 	bl	80027f8 <USBD_CDC_SetRxBuffer>
}
 8003946:	2000      	movs	r0, #0
 8003948:	bd10      	pop	{r4, pc}
 800394a:	bf00      	nop
 800394c:	20000930 	.word	0x20000930
 8003950:	20000f3c 	.word	0x20000f3c
 8003954:	20000b54 	.word	0x20000b54

08003958 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	460d      	mov	r5, r1
 800395c:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
	uint8_t check = 0;
	//USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800395e:	4601      	mov	r1, r0
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <CDC_Receive_FS+0x40>)
 8003962:	f7fe ff49 	bl	80027f8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <CDC_Receive_FS+0x40>)
 8003968:	f7fe ff63 	bl	8002832 <USBD_CDC_ReceivePacket>
		// ignore new messages until then

	}
	//else
	{
		newUSBCommandReceived = 1;
 800396c:	2201      	movs	r2, #1
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <CDC_Receive_FS+0x44>)
 8003970:	701a      	strb	r2, [r3, #0]

		// If received data too long, copy only 255
		if(*Len >= 256)
 8003972:	682a      	ldr	r2, [r5, #0]
 8003974:	2aff      	cmp	r2, #255	; 0xff
 8003976:	d90a      	bls.n	800398e <CDC_Receive_FS+0x36>
		{
			memcpy(userRxBuf, Buf, 255);
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <CDC_Receive_FS+0x48>)
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	4621      	mov	r1, r4
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f9f0 	bl	8003d64 <memcpy>
			// Set last char to 0
			userRxBuf[255] = 0;
 8003984:	2200      	movs	r2, #0
 8003986:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
	}


	return (USBD_OK);
  /* USER CODE END 6 */
}
 800398a:	2000      	movs	r0, #0
 800398c:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(userRxBuf, Buf, *Len);
 800398e:	4621      	mov	r1, r4
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <CDC_Receive_FS+0x48>)
 8003992:	f000 f9e7 	bl	8003d64 <memcpy>
 8003996:	e7f8      	b.n	800398a <CDC_Receive_FS+0x32>
 8003998:	20000930 	.word	0x20000930
 800399c:	20000924 	.word	0x20000924
 80039a0:	200007d4 	.word	0x200007d4

080039a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80039a4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80039a6:	4c09      	ldr	r4, [pc, #36]	; (80039cc <CDC_Transmit_FS+0x28>)
{
 80039a8:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80039aa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 80039ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80039b2:	b943      	cbnz	r3, 80039c6 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80039b4:	4601      	mov	r1, r0
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7fe ff16 	bl	80027e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80039bc:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80039be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80039c2:	f7fe bf1f 	b.w	8002804 <USBD_CDC_TransmitPacket>
}
 80039c6:	2001      	movs	r0, #1
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	bf00      	nop
 80039cc:	20000930 	.word	0x20000930

080039d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80039d0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_PCD_MspInit+0x38>)
 80039d4:	6802      	ldr	r2, [r0, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d112      	bne.n	8003a00 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80039da:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80039de:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80039e0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80039e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039e6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80039ea:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80039ec:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80039ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80039f6:	f7fc fc27 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80039fa:	2014      	movs	r0, #20
 80039fc:	f7fc fc58 	bl	80002b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003a00:	b003      	add	sp, #12
 8003a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a06:	bf00      	nop
 8003a08:	40005c00 	.word	0x40005c00

08003a0c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003a0c:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8003a10:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a14:	f7fe bf53 	b.w	80028be <USBD_LL_SetupStage>

08003a18 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003a18:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003a1c:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003a20:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a24:	f7fe bf78 	b.w	8002918 <USBD_LL_DataOutStage>

08003a28 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003a28:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a32:	f7fe bfa3 	b.w	800297c <USBD_LL_DataInStage>

08003a36 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003a36:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a3a:	f7ff b81f 	b.w	8002a7c <USBD_LL_SOF>

08003a3e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003a42:	2101      	movs	r1, #1
 8003a44:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a48:	f7ff f806 	bl	8002a58 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003a4c:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003a54:	f7fe bfe1 	b.w	8002a1a <USBD_LL_Reset>

08003a58 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003a5c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a60:	f7fe fffd 	bl	8002a5e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003a64:	69a3      	ldr	r3, [r4, #24]
 8003a66:	b123      	cbz	r3, 8003a72 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003a68:	4a02      	ldr	r2, [pc, #8]	; (8003a74 <HAL_PCD_SuspendCallback+0x1c>)
 8003a6a:	6913      	ldr	r3, [r2, #16]
 8003a6c:	f043 0306 	orr.w	r3, r3, #6
 8003a70:	6113      	str	r3, [r2, #16]
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003a78:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003a7c:	f7fe bff8 	b.w	8002a70 <USBD_LL_Resume>

08003a80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003a80:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003a82:	2302      	movs	r3, #2
 8003a84:	2208      	movs	r2, #8
 8003a86:	f04f 0e03 	mov.w	lr, #3
{
 8003a8a:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003a8c:	491d      	ldr	r1, [pc, #116]	; (8003b04 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8003a8e:	481e      	ldr	r0, [pc, #120]	; (8003b08 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003a90:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a94:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003a96:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003a9a:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003a9e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003aa0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003aa2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003aa4:	f7fd f8f2 	bl	8000c8c <HAL_PCD_Init>
 8003aa8:	b120      	cbz	r0, 8003ab4 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003aaa:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003aae:	4817      	ldr	r0, [pc, #92]	; (8003b0c <USBD_LL_Init+0x8c>)
 8003ab0:	f7ff fb16 	bl	80030e0 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2318      	movs	r3, #24
 8003ab8:	4611      	mov	r1, r2
 8003aba:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003abe:	f7fd fcb7 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003ac2:	2358      	movs	r3, #88	; 0x58
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003acc:	f7fd fcb0 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8003ad0:	23c0      	movs	r3, #192	; 0xc0
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2181      	movs	r1, #129	; 0x81
 8003ad6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003ada:	f7fd fca9 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003ade:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003aea:	f7fd fca1 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8003aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af2:	2200      	movs	r2, #0
 8003af4:	2182      	movs	r1, #130	; 0x82
 8003af6:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003afa:	f7fd fc99 	bl	8001430 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003afe:	2000      	movs	r0, #0
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop
 8003b04:	40005c00 	.word	0x40005c00
 8003b08:	20001324 	.word	0x20001324
 8003b0c:	080050a9 	.word	0x080050a9

08003b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003b10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003b12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b16:	f7fd f922 	bl	8000d5e <HAL_PCD_Start>
 8003b1a:	2803      	cmp	r0, #3
 8003b1c:	bf9a      	itte	ls
 8003b1e:	4b02      	ldrls	r3, [pc, #8]	; (8003b28 <USBD_LL_Start+0x18>)
 8003b20:	5c18      	ldrbls	r0, [r3, r0]
 8003b22:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003b24:	bd08      	pop	{r3, pc}
 8003b26:	bf00      	nop
 8003b28:	080050a5 	.word	0x080050a5

08003b2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003b30:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b34:	4613      	mov	r3, r2
 8003b36:	4622      	mov	r2, r4
 8003b38:	f7fd f93c 	bl	8000db4 <HAL_PCD_EP_Open>
 8003b3c:	2803      	cmp	r0, #3
 8003b3e:	bf9a      	itte	ls
 8003b40:	4b01      	ldrls	r3, [pc, #4]	; (8003b48 <USBD_LL_OpenEP+0x1c>)
 8003b42:	5c18      	ldrbls	r0, [r3, r0]
 8003b44:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003b46:	bd10      	pop	{r4, pc}
 8003b48:	080050a5 	.word	0x080050a5

08003b4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003b4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b52:	f7fd f952 	bl	8000dfa <HAL_PCD_EP_Close>
 8003b56:	2803      	cmp	r0, #3
 8003b58:	bf9a      	itte	ls
 8003b5a:	4b02      	ldrls	r3, [pc, #8]	; (8003b64 <USBD_LL_CloseEP+0x18>)
 8003b5c:	5c18      	ldrbls	r0, [r3, r0]
 8003b5e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003b60:	bd08      	pop	{r3, pc}
 8003b62:	bf00      	nop
 8003b64:	080050a5 	.word	0x080050a5

08003b68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003b6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b6e:	f7fd fc13 	bl	8001398 <HAL_PCD_EP_SetStall>
 8003b72:	2803      	cmp	r0, #3
 8003b74:	bf9a      	itte	ls
 8003b76:	4b02      	ldrls	r3, [pc, #8]	; (8003b80 <USBD_LL_StallEP+0x18>)
 8003b78:	5c18      	ldrbls	r0, [r3, r0]
 8003b7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003b7c:	bd08      	pop	{r3, pc}
 8003b7e:	bf00      	nop
 8003b80:	080050a5 	.word	0x080050a5

08003b84 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003b86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b8a:	f7fd fc2e 	bl	80013ea <HAL_PCD_EP_ClrStall>
 8003b8e:	2803      	cmp	r0, #3
 8003b90:	bf9a      	itte	ls
 8003b92:	4b02      	ldrls	r3, [pc, #8]	; (8003b9c <USBD_LL_ClearStallEP+0x18>)
 8003b94:	5c18      	ldrbls	r0, [r3, r0]
 8003b96:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003b98:	bd08      	pop	{r3, pc}
 8003b9a:	bf00      	nop
 8003b9c:	080050a5 	.word	0x080050a5

08003ba0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003ba0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003ba2:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003ba6:	bf45      	ittet	mi
 8003ba8:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003bac:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003bb0:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003bb4:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003bb8:	bf58      	it	pl
 8003bba:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8003bbe:	4770      	bx	lr

08003bc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003bc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003bc2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bc6:	f7fd f8e1 	bl	8000d8c <HAL_PCD_SetAddress>
 8003bca:	2803      	cmp	r0, #3
 8003bcc:	bf9a      	itte	ls
 8003bce:	4b02      	ldrls	r3, [pc, #8]	; (8003bd8 <USBD_LL_SetUSBAddress+0x18>)
 8003bd0:	5c18      	ldrbls	r0, [r3, r0]
 8003bd2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003bd4:	bd08      	pop	{r3, pc}
 8003bd6:	bf00      	nop
 8003bd8:	080050a5 	.word	0x080050a5

08003bdc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003bdc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003bde:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003be2:	f7fd f94a 	bl	8000e7a <HAL_PCD_EP_Transmit>
 8003be6:	2803      	cmp	r0, #3
 8003be8:	bf9a      	itte	ls
 8003bea:	4b02      	ldrls	r3, [pc, #8]	; (8003bf4 <USBD_LL_Transmit+0x18>)
 8003bec:	5c18      	ldrbls	r0, [r3, r0]
 8003bee:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003bf0:	bd08      	pop	{r3, pc}
 8003bf2:	bf00      	nop
 8003bf4:	080050a5 	.word	0x080050a5

08003bf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003bf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003bfa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003bfe:	f7fd f91d 	bl	8000e3c <HAL_PCD_EP_Receive>
 8003c02:	2803      	cmp	r0, #3
 8003c04:	bf9a      	itte	ls
 8003c06:	4b02      	ldrls	r3, [pc, #8]	; (8003c10 <USBD_LL_PrepareReceive+0x18>)
 8003c08:	5c18      	ldrbls	r0, [r3, r0]
 8003c0a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003c0c:	bd08      	pop	{r3, pc}
 8003c0e:	bf00      	nop
 8003c10:	080050a5 	.word	0x080050a5

08003c14 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003c14:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003c16:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c1a:	f7fd f927 	bl	8000e6c <HAL_PCD_EP_GetRxCount>
}
 8003c1e:	bd08      	pop	{r3, pc}

08003c20 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003c20:	4800      	ldr	r0, [pc, #0]	; (8003c24 <USBD_static_malloc+0x4>)
 8003c22:	4770      	bx	lr
 8003c24:	20000474 	.word	0x20000474

08003c28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003c28:	4770      	bx	lr

08003c2a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003c2a:	4770      	bx	lr

08003c2c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003c2c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003c2e:	4801      	ldr	r0, [pc, #4]	; (8003c34 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003c30:	800b      	strh	r3, [r1, #0]
}
 8003c32:	4770      	bx	lr
 8003c34:	20000148 	.word	0x20000148

08003c38 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003c38:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003c3a:	4801      	ldr	r0, [pc, #4]	; (8003c40 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003c3c:	800b      	strh	r3, [r1, #0]
}
 8003c3e:	4770      	bx	lr
 8003c40:	2000015c 	.word	0x2000015c

08003c44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003c44:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003c46:	4c04      	ldr	r4, [pc, #16]	; (8003c58 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003c48:	460a      	mov	r2, r1
 8003c4a:	4804      	ldr	r0, [pc, #16]	; (8003c5c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	f7ff f8b6 	bl	8002dbe <USBD_GetString>
  return USBD_StrDesc;
}
 8003c52:	4620      	mov	r0, r4
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	bf00      	nop
 8003c58:	20001784 	.word	0x20001784
 8003c5c:	080050d5 	.word	0x080050d5

08003c60 <USBD_FS_ProductStrDescriptor>:
{
 8003c60:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003c62:	4c04      	ldr	r4, [pc, #16]	; (8003c74 <USBD_FS_ProductStrDescriptor+0x14>)
 8003c64:	460a      	mov	r2, r1
 8003c66:	4804      	ldr	r0, [pc, #16]	; (8003c78 <USBD_FS_ProductStrDescriptor+0x18>)
 8003c68:	4621      	mov	r1, r4
 8003c6a:	f7ff f8a8 	bl	8002dbe <USBD_GetString>
}
 8003c6e:	4620      	mov	r0, r4
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	20001784 	.word	0x20001784
 8003c78:	080050e8 	.word	0x080050e8

08003c7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003c7c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003c7e:	4c04      	ldr	r4, [pc, #16]	; (8003c90 <USBD_FS_SerialStrDescriptor+0x14>)
 8003c80:	460a      	mov	r2, r1
 8003c82:	4804      	ldr	r0, [pc, #16]	; (8003c94 <USBD_FS_SerialStrDescriptor+0x18>)
 8003c84:	4621      	mov	r1, r4
 8003c86:	f7ff f89a 	bl	8002dbe <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	20001784 	.word	0x20001784
 8003c94:	080050fe 	.word	0x080050fe

08003c98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003c98:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003c9a:	4c04      	ldr	r4, [pc, #16]	; (8003cac <USBD_FS_ConfigStrDescriptor+0x14>)
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	f7ff f88c 	bl	8002dbe <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	20001784 	.word	0x20001784
 8003cb0:	080050bc 	.word	0x080050bc

08003cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003cb4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003cb6:	4c04      	ldr	r4, [pc, #16]	; (8003cc8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003cb8:	460a      	mov	r2, r1
 8003cba:	4804      	ldr	r0, [pc, #16]	; (8003ccc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f7ff f87e 	bl	8002dbe <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20001784 	.word	0x20001784
 8003ccc:	080050c7 	.word	0x080050c7

08003cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003cd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003cd2:	e003      	b.n	8003cdc <LoopCopyDataInit>

08003cd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003cd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003cd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003cda:	3104      	adds	r1, #4

08003cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003cdc:	480a      	ldr	r0, [pc, #40]	; (8003d08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ce0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003ce2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ce4:	d3f6      	bcc.n	8003cd4 <CopyDataInit>
  ldr r2, =_sbss
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003ce8:	e002      	b.n	8003cf0 <LoopFillZerobss>

08003cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003cec:	f842 3b04 	str.w	r3, [r2], #4

08003cf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003cf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003cf4:	d3f9      	bcc.n	8003cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cf6:	f7ff fcb3 	bl	8003660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f000 f80f 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003cfe:	f7ff f8fb 	bl	8002ef8 <main>
  bx lr
 8003d02:	4770      	bx	lr
  ldr r3, =_sidata
 8003d04:	080052d0 	.word	0x080052d0
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d0c:	20000330 	.word	0x20000330
  ldr r2, =_sbss
 8003d10:	20000330 	.word	0x20000330
  ldr r3, = _ebss
 8003d14:	20001988 	.word	0x20001988

08003d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d18:	e7fe      	b.n	8003d18 <ADC1_2_IRQHandler>
	...

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	2500      	movs	r5, #0
 8003d20:	4e0c      	ldr	r6, [pc, #48]	; (8003d54 <__libc_init_array+0x38>)
 8003d22:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1ba4      	subs	r4, r4, r6
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a5      	cmp	r5, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	f001 f952 	bl	8004fd4 <_init>
 8003d30:	2500      	movs	r5, #0
 8003d32:	4e0a      	ldr	r6, [pc, #40]	; (8003d5c <__libc_init_array+0x40>)
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <__libc_init_array+0x44>)
 8003d36:	1ba4      	subs	r4, r4, r6
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a5      	cmp	r5, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d44:	4798      	blx	r3
 8003d46:	3501      	adds	r5, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d4e:	4798      	blx	r3
 8003d50:	3501      	adds	r5, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	080052c8 	.word	0x080052c8
 8003d58:	080052c8 	.word	0x080052c8
 8003d5c:	080052c8 	.word	0x080052c8
 8003d60:	080052cc 	.word	0x080052cc

08003d64 <memcpy>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	1e43      	subs	r3, r0, #1
 8003d68:	440a      	add	r2, r1
 8003d6a:	4291      	cmp	r1, r2
 8003d6c:	d100      	bne.n	8003d70 <memcpy+0xc>
 8003d6e:	bd10      	pop	{r4, pc}
 8003d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d78:	e7f7      	b.n	8003d6a <memcpy+0x6>

08003d7a <memset>:
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4402      	add	r2, r0
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d100      	bne.n	8003d84 <memset+0xa>
 8003d82:	4770      	bx	lr
 8003d84:	f803 1b01 	strb.w	r1, [r3], #1
 8003d88:	e7f9      	b.n	8003d7e <memset+0x4>
	...

08003d8c <siprintf>:
 8003d8c:	b40e      	push	{r1, r2, r3}
 8003d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d92:	b500      	push	{lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003d9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d9e:	9104      	str	r1, [sp, #16]
 8003da0:	9107      	str	r1, [sp, #28]
 8003da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da6:	ab1d      	add	r3, sp, #116	; 0x74
 8003da8:	9002      	str	r0, [sp, #8]
 8003daa:	9006      	str	r0, [sp, #24]
 8003dac:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <siprintf+0x44>)
 8003dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003db6:	6800      	ldr	r0, [r0, #0]
 8003db8:	a902      	add	r1, sp, #8
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	f000 f89a 	bl	8003ef4 <_svfiprintf_r>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	9b02      	ldr	r3, [sp, #8]
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	b01c      	add	sp, #112	; 0x70
 8003dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dcc:	b003      	add	sp, #12
 8003dce:	4770      	bx	lr
 8003dd0:	20000160 	.word	0x20000160

08003dd4 <siscanf>:
 8003dd4:	b40e      	push	{r1, r2, r3}
 8003dd6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003dda:	b530      	push	{r4, r5, lr}
 8003ddc:	b09c      	sub	sp, #112	; 0x70
 8003dde:	ac1f      	add	r4, sp, #124	; 0x7c
 8003de0:	f854 5b04 	ldr.w	r5, [r4], #4
 8003de4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003de8:	9002      	str	r0, [sp, #8]
 8003dea:	9006      	str	r0, [sp, #24]
 8003dec:	f7fc f9b8 	bl	8000160 <strlen>
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <siscanf+0x4c>)
 8003df2:	9003      	str	r0, [sp, #12]
 8003df4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003df6:	2300      	movs	r3, #0
 8003df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003dfa:	9314      	str	r3, [sp, #80]	; 0x50
 8003dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e00:	9007      	str	r0, [sp, #28]
 8003e02:	4808      	ldr	r0, [pc, #32]	; (8003e24 <siscanf+0x50>)
 8003e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	a902      	add	r1, sp, #8
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	9401      	str	r4, [sp, #4]
 8003e12:	f000 f9bd 	bl	8004190 <__ssvfiscanf_r>
 8003e16:	b01c      	add	sp, #112	; 0x70
 8003e18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e1c:	b003      	add	sp, #12
 8003e1e:	4770      	bx	lr
 8003e20:	08003e29 	.word	0x08003e29
 8003e24:	20000160 	.word	0x20000160

08003e28 <__seofread>:
 8003e28:	2000      	movs	r0, #0
 8003e2a:	4770      	bx	lr

08003e2c <strcpy>:
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e32:	f803 2b01 	strb.w	r2, [r3], #1
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d1f9      	bne.n	8003e2e <strcpy+0x2>
 8003e3a:	4770      	bx	lr

08003e3c <__ssputs_r>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	688e      	ldr	r6, [r1, #8]
 8003e42:	4682      	mov	sl, r0
 8003e44:	429e      	cmp	r6, r3
 8003e46:	460c      	mov	r4, r1
 8003e48:	4691      	mov	r9, r2
 8003e4a:	4698      	mov	r8, r3
 8003e4c:	d835      	bhi.n	8003eba <__ssputs_r+0x7e>
 8003e4e:	898a      	ldrh	r2, [r1, #12]
 8003e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e54:	d031      	beq.n	8003eba <__ssputs_r+0x7e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	6825      	ldr	r5, [r4, #0]
 8003e5a:	6909      	ldr	r1, [r1, #16]
 8003e5c:	1a6f      	subs	r7, r5, r1
 8003e5e:	6965      	ldr	r5, [r4, #20]
 8003e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e68:	f108 0301 	add.w	r3, r8, #1
 8003e6c:	443b      	add	r3, r7
 8003e6e:	429d      	cmp	r5, r3
 8003e70:	bf38      	it	cc
 8003e72:	461d      	movcc	r5, r3
 8003e74:	0553      	lsls	r3, r2, #21
 8003e76:	d531      	bpl.n	8003edc <__ssputs_r+0xa0>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f000 fff1 	bl	8004e60 <_malloc_r>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	b950      	cbnz	r0, 8003e98 <__ssputs_r+0x5c>
 8003e82:	230c      	movs	r3, #12
 8003e84:	f8ca 3000 	str.w	r3, [sl]
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e98:	463a      	mov	r2, r7
 8003e9a:	6921      	ldr	r1, [r4, #16]
 8003e9c:	f7ff ff62 	bl	8003d64 <memcpy>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	6126      	str	r6, [r4, #16]
 8003eae:	443e      	add	r6, r7
 8003eb0:	6026      	str	r6, [r4, #0]
 8003eb2:	4646      	mov	r6, r8
 8003eb4:	6165      	str	r5, [r4, #20]
 8003eb6:	1bed      	subs	r5, r5, r7
 8003eb8:	60a5      	str	r5, [r4, #8]
 8003eba:	4546      	cmp	r6, r8
 8003ebc:	bf28      	it	cs
 8003ebe:	4646      	movcs	r6, r8
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	f000 ff65 	bl	8004d94 <memmove>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	1b9b      	subs	r3, r3, r6
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	441e      	add	r6, r3
 8003ed6:	6026      	str	r6, [r4, #0]
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	462a      	mov	r2, r5
 8003ede:	f001 f81d 	bl	8004f1c <_realloc_r>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1e1      	bne.n	8003eac <__ssputs_r+0x70>
 8003ee8:	6921      	ldr	r1, [r4, #16]
 8003eea:	4650      	mov	r0, sl
 8003eec:	f000 ff6c 	bl	8004dc8 <_free_r>
 8003ef0:	e7c7      	b.n	8003e82 <__ssputs_r+0x46>
	...

08003ef4 <_svfiprintf_r>:
 8003ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	b09d      	sub	sp, #116	; 0x74
 8003efa:	9303      	str	r3, [sp, #12]
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	4680      	mov	r8, r0
 8003f00:	061c      	lsls	r4, r3, #24
 8003f02:	460d      	mov	r5, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d50f      	bpl.n	8003f28 <_svfiprintf_r+0x34>
 8003f08:	690b      	ldr	r3, [r1, #16]
 8003f0a:	b96b      	cbnz	r3, 8003f28 <_svfiprintf_r+0x34>
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	f000 ffa7 	bl	8004e60 <_malloc_r>
 8003f12:	6028      	str	r0, [r5, #0]
 8003f14:	6128      	str	r0, [r5, #16]
 8003f16:	b928      	cbnz	r0, 8003f24 <_svfiprintf_r+0x30>
 8003f18:	230c      	movs	r3, #12
 8003f1a:	f8c8 3000 	str.w	r3, [r8]
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f22:	e0c4      	b.n	80040ae <_svfiprintf_r+0x1ba>
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	616b      	str	r3, [r5, #20]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f32:	2330      	movs	r3, #48	; 0x30
 8003f34:	f04f 0b01 	mov.w	fp, #1
 8003f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	463c      	mov	r4, r7
 8003f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d13c      	bne.n	8003fc2 <_svfiprintf_r+0xce>
 8003f48:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f4c:	d00b      	beq.n	8003f66 <_svfiprintf_r+0x72>
 8003f4e:	4653      	mov	r3, sl
 8003f50:	4632      	mov	r2, r6
 8003f52:	4629      	mov	r1, r5
 8003f54:	4640      	mov	r0, r8
 8003f56:	f7ff ff71 	bl	8003e3c <__ssputs_r>
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f000 80a2 	beq.w	80040a4 <_svfiprintf_r+0x1b0>
 8003f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f62:	4453      	add	r3, sl
 8003f64:	9309      	str	r3, [sp, #36]	; 0x24
 8003f66:	783b      	ldrb	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 809b 	beq.w	80040a4 <_svfiprintf_r+0x1b0>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	9205      	str	r2, [sp, #20]
 8003f7a:	9306      	str	r3, [sp, #24]
 8003f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f80:	931a      	str	r3, [sp, #104]	; 0x68
 8003f82:	2205      	movs	r2, #5
 8003f84:	7821      	ldrb	r1, [r4, #0]
 8003f86:	4850      	ldr	r0, [pc, #320]	; (80040c8 <_svfiprintf_r+0x1d4>)
 8003f88:	f000 fef6 	bl	8004d78 <memchr>
 8003f8c:	1c67      	adds	r7, r4, #1
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	b9d8      	cbnz	r0, 8003fca <_svfiprintf_r+0xd6>
 8003f92:	06d9      	lsls	r1, r3, #27
 8003f94:	bf44      	itt	mi
 8003f96:	2220      	movmi	r2, #32
 8003f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f9c:	071a      	lsls	r2, r3, #28
 8003f9e:	bf44      	itt	mi
 8003fa0:	222b      	movmi	r2, #43	; 0x2b
 8003fa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fa6:	7822      	ldrb	r2, [r4, #0]
 8003fa8:	2a2a      	cmp	r2, #42	; 0x2a
 8003faa:	d016      	beq.n	8003fda <_svfiprintf_r+0xe6>
 8003fac:	2100      	movs	r1, #0
 8003fae:	200a      	movs	r0, #10
 8003fb0:	9a07      	ldr	r2, [sp, #28]
 8003fb2:	4627      	mov	r7, r4
 8003fb4:	783b      	ldrb	r3, [r7, #0]
 8003fb6:	3401      	adds	r4, #1
 8003fb8:	3b30      	subs	r3, #48	; 0x30
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d950      	bls.n	8004060 <_svfiprintf_r+0x16c>
 8003fbe:	b1c9      	cbz	r1, 8003ff4 <_svfiprintf_r+0x100>
 8003fc0:	e011      	b.n	8003fe6 <_svfiprintf_r+0xf2>
 8003fc2:	2b25      	cmp	r3, #37	; 0x25
 8003fc4:	d0c0      	beq.n	8003f48 <_svfiprintf_r+0x54>
 8003fc6:	4627      	mov	r7, r4
 8003fc8:	e7b9      	b.n	8003f3e <_svfiprintf_r+0x4a>
 8003fca:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <_svfiprintf_r+0x1d4>)
 8003fcc:	463c      	mov	r4, r7
 8003fce:	1a80      	subs	r0, r0, r2
 8003fd0:	fa0b f000 	lsl.w	r0, fp, r0
 8003fd4:	4318      	orrs	r0, r3
 8003fd6:	9004      	str	r0, [sp, #16]
 8003fd8:	e7d3      	b.n	8003f82 <_svfiprintf_r+0x8e>
 8003fda:	9a03      	ldr	r2, [sp, #12]
 8003fdc:	1d11      	adds	r1, r2, #4
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	9103      	str	r1, [sp, #12]
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	db01      	blt.n	8003fea <_svfiprintf_r+0xf6>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e004      	b.n	8003ff4 <_svfiprintf_r+0x100>
 8003fea:	4252      	negs	r2, r2
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	9207      	str	r2, [sp, #28]
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	783b      	ldrb	r3, [r7, #0]
 8003ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff8:	d10d      	bne.n	8004016 <_svfiprintf_r+0x122>
 8003ffa:	787b      	ldrb	r3, [r7, #1]
 8003ffc:	1c79      	adds	r1, r7, #1
 8003ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8004000:	d132      	bne.n	8004068 <_svfiprintf_r+0x174>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	3702      	adds	r7, #2
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	9203      	str	r2, [sp, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	f04f 33ff 	movlt.w	r3, #4294967295
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	4c2d      	ldr	r4, [pc, #180]	; (80040cc <_svfiprintf_r+0x1d8>)
 8004018:	2203      	movs	r2, #3
 800401a:	7839      	ldrb	r1, [r7, #0]
 800401c:	4620      	mov	r0, r4
 800401e:	f000 feab 	bl	8004d78 <memchr>
 8004022:	b138      	cbz	r0, 8004034 <_svfiprintf_r+0x140>
 8004024:	2340      	movs	r3, #64	; 0x40
 8004026:	1b00      	subs	r0, r0, r4
 8004028:	fa03 f000 	lsl.w	r0, r3, r0
 800402c:	9b04      	ldr	r3, [sp, #16]
 800402e:	3701      	adds	r7, #1
 8004030:	4303      	orrs	r3, r0
 8004032:	9304      	str	r3, [sp, #16]
 8004034:	7839      	ldrb	r1, [r7, #0]
 8004036:	2206      	movs	r2, #6
 8004038:	4825      	ldr	r0, [pc, #148]	; (80040d0 <_svfiprintf_r+0x1dc>)
 800403a:	1c7e      	adds	r6, r7, #1
 800403c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004040:	f000 fe9a 	bl	8004d78 <memchr>
 8004044:	2800      	cmp	r0, #0
 8004046:	d035      	beq.n	80040b4 <_svfiprintf_r+0x1c0>
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <_svfiprintf_r+0x1e0>)
 800404a:	b9fb      	cbnz	r3, 800408c <_svfiprintf_r+0x198>
 800404c:	9b03      	ldr	r3, [sp, #12]
 800404e:	3307      	adds	r3, #7
 8004050:	f023 0307 	bic.w	r3, r3, #7
 8004054:	3308      	adds	r3, #8
 8004056:	9303      	str	r3, [sp, #12]
 8004058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405a:	444b      	add	r3, r9
 800405c:	9309      	str	r3, [sp, #36]	; 0x24
 800405e:	e76d      	b.n	8003f3c <_svfiprintf_r+0x48>
 8004060:	fb00 3202 	mla	r2, r0, r2, r3
 8004064:	2101      	movs	r1, #1
 8004066:	e7a4      	b.n	8003fb2 <_svfiprintf_r+0xbe>
 8004068:	2300      	movs	r3, #0
 800406a:	240a      	movs	r4, #10
 800406c:	4618      	mov	r0, r3
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	460f      	mov	r7, r1
 8004072:	783a      	ldrb	r2, [r7, #0]
 8004074:	3101      	adds	r1, #1
 8004076:	3a30      	subs	r2, #48	; 0x30
 8004078:	2a09      	cmp	r2, #9
 800407a:	d903      	bls.n	8004084 <_svfiprintf_r+0x190>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ca      	beq.n	8004016 <_svfiprintf_r+0x122>
 8004080:	9005      	str	r0, [sp, #20]
 8004082:	e7c8      	b.n	8004016 <_svfiprintf_r+0x122>
 8004084:	fb04 2000 	mla	r0, r4, r0, r2
 8004088:	2301      	movs	r3, #1
 800408a:	e7f1      	b.n	8004070 <_svfiprintf_r+0x17c>
 800408c:	ab03      	add	r3, sp, #12
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	462a      	mov	r2, r5
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <_svfiprintf_r+0x1e4>)
 8004094:	a904      	add	r1, sp, #16
 8004096:	4640      	mov	r0, r8
 8004098:	f3af 8000 	nop.w
 800409c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040a0:	4681      	mov	r9, r0
 80040a2:	d1d9      	bne.n	8004058 <_svfiprintf_r+0x164>
 80040a4:	89ab      	ldrh	r3, [r5, #12]
 80040a6:	065b      	lsls	r3, r3, #25
 80040a8:	f53f af39 	bmi.w	8003f1e <_svfiprintf_r+0x2a>
 80040ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ae:	b01d      	add	sp, #116	; 0x74
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_svfiprintf_r+0x1e4>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4640      	mov	r0, r8
 80040c0:	f000 fa32 	bl	8004528 <_printf_i>
 80040c4:	e7ea      	b.n	800409c <_svfiprintf_r+0x1a8>
 80040c6:	bf00      	nop
 80040c8:	0800510b 	.word	0x0800510b
 80040cc:	08005111 	.word	0x08005111
 80040d0:	08005115 	.word	0x08005115
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e3d 	.word	0x08003e3d

080040dc <_sungetc_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	1c4b      	adds	r3, r1, #1
 80040e0:	4614      	mov	r4, r2
 80040e2:	d103      	bne.n	80040ec <_sungetc_r+0x10>
 80040e4:	f04f 35ff 	mov.w	r5, #4294967295
 80040e8:	4628      	mov	r0, r5
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	8993      	ldrh	r3, [r2, #12]
 80040ee:	b2cd      	uxtb	r5, r1
 80040f0:	f023 0320 	bic.w	r3, r3, #32
 80040f4:	8193      	strh	r3, [r2, #12]
 80040f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80040f8:	6852      	ldr	r2, [r2, #4]
 80040fa:	b18b      	cbz	r3, 8004120 <_sungetc_r+0x44>
 80040fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040fe:	429a      	cmp	r2, r3
 8004100:	da08      	bge.n	8004114 <_sungetc_r+0x38>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	1e5a      	subs	r2, r3, #1
 8004106:	6022      	str	r2, [r4, #0]
 8004108:	f803 5c01 	strb.w	r5, [r3, #-1]
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	3301      	adds	r3, #1
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	e7e9      	b.n	80040e8 <_sungetc_r+0xc>
 8004114:	4621      	mov	r1, r4
 8004116:	f000 fdd3 	bl	8004cc0 <__submore>
 800411a:	2800      	cmp	r0, #0
 800411c:	d0f1      	beq.n	8004102 <_sungetc_r+0x26>
 800411e:	e7e1      	b.n	80040e4 <_sungetc_r+0x8>
 8004120:	6921      	ldr	r1, [r4, #16]
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	b151      	cbz	r1, 800413c <_sungetc_r+0x60>
 8004126:	4299      	cmp	r1, r3
 8004128:	d208      	bcs.n	800413c <_sungetc_r+0x60>
 800412a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800412e:	428d      	cmp	r5, r1
 8004130:	d104      	bne.n	800413c <_sungetc_r+0x60>
 8004132:	3b01      	subs	r3, #1
 8004134:	3201      	adds	r2, #1
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	6062      	str	r2, [r4, #4]
 800413a:	e7d5      	b.n	80040e8 <_sungetc_r+0xc>
 800413c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800413e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004142:	6363      	str	r3, [r4, #52]	; 0x34
 8004144:	2303      	movs	r3, #3
 8004146:	63a3      	str	r3, [r4, #56]	; 0x38
 8004148:	4623      	mov	r3, r4
 800414a:	6422      	str	r2, [r4, #64]	; 0x40
 800414c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	2301      	movs	r3, #1
 8004154:	e7dc      	b.n	8004110 <_sungetc_r+0x34>

08004156 <__ssrefill_r>:
 8004156:	b510      	push	{r4, lr}
 8004158:	460c      	mov	r4, r1
 800415a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800415c:	b169      	cbz	r1, 800417a <__ssrefill_r+0x24>
 800415e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004162:	4299      	cmp	r1, r3
 8004164:	d001      	beq.n	800416a <__ssrefill_r+0x14>
 8004166:	f000 fe2f 	bl	8004dc8 <_free_r>
 800416a:	2000      	movs	r0, #0
 800416c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800416e:	6360      	str	r0, [r4, #52]	; 0x34
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	b113      	cbz	r3, 800417a <__ssrefill_r+0x24>
 8004174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	bd10      	pop	{r4, pc}
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	81a3      	strh	r3, [r4, #12]
 800418e:	bd10      	pop	{r4, pc}

08004190 <__ssvfiscanf_r>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2300      	movs	r3, #0
 800419c:	4606      	mov	r6, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	4692      	mov	sl, r2
 80041a2:	270a      	movs	r7, #10
 80041a4:	9346      	str	r3, [sp, #280]	; 0x118
 80041a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80041a8:	4b9f      	ldr	r3, [pc, #636]	; (8004428 <__ssvfiscanf_r+0x298>)
 80041aa:	f10d 080c 	add.w	r8, sp, #12
 80041ae:	93a2      	str	r3, [sp, #648]	; 0x288
 80041b0:	4b9e      	ldr	r3, [pc, #632]	; (800442c <__ssvfiscanf_r+0x29c>)
 80041b2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004430 <__ssvfiscanf_r+0x2a0>
 80041b6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80041ba:	93a3      	str	r3, [sp, #652]	; 0x28c
 80041bc:	f89a 3000 	ldrb.w	r3, [sl]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 812f 	beq.w	8004424 <__ssvfiscanf_r+0x294>
 80041c6:	f000 fdb7 	bl	8004d38 <__locale_ctype_ptr>
 80041ca:	f89a b000 	ldrb.w	fp, [sl]
 80041ce:	4458      	add	r0, fp
 80041d0:	7843      	ldrb	r3, [r0, #1]
 80041d2:	f013 0308 	ands.w	r3, r3, #8
 80041d6:	d143      	bne.n	8004260 <__ssvfiscanf_r+0xd0>
 80041d8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80041dc:	f10a 0501 	add.w	r5, sl, #1
 80041e0:	f040 8099 	bne.w	8004316 <__ssvfiscanf_r+0x186>
 80041e4:	9345      	str	r3, [sp, #276]	; 0x114
 80041e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80041e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80041ec:	2b2a      	cmp	r3, #42	; 0x2a
 80041ee:	d103      	bne.n	80041f8 <__ssvfiscanf_r+0x68>
 80041f0:	2310      	movs	r3, #16
 80041f2:	f10a 0502 	add.w	r5, sl, #2
 80041f6:	9343      	str	r3, [sp, #268]	; 0x10c
 80041f8:	7829      	ldrb	r1, [r5, #0]
 80041fa:	46aa      	mov	sl, r5
 80041fc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004200:	2a09      	cmp	r2, #9
 8004202:	f105 0501 	add.w	r5, r5, #1
 8004206:	d941      	bls.n	800428c <__ssvfiscanf_r+0xfc>
 8004208:	2203      	movs	r2, #3
 800420a:	4889      	ldr	r0, [pc, #548]	; (8004430 <__ssvfiscanf_r+0x2a0>)
 800420c:	f000 fdb4 	bl	8004d78 <memchr>
 8004210:	b138      	cbz	r0, 8004222 <__ssvfiscanf_r+0x92>
 8004212:	eba0 0309 	sub.w	r3, r0, r9
 8004216:	2001      	movs	r0, #1
 8004218:	46aa      	mov	sl, r5
 800421a:	4098      	lsls	r0, r3
 800421c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800421e:	4318      	orrs	r0, r3
 8004220:	9043      	str	r0, [sp, #268]	; 0x10c
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	f10a 0501 	add.w	r5, sl, #1
 800422a:	2b67      	cmp	r3, #103	; 0x67
 800422c:	d84a      	bhi.n	80042c4 <__ssvfiscanf_r+0x134>
 800422e:	2b65      	cmp	r3, #101	; 0x65
 8004230:	f080 80b7 	bcs.w	80043a2 <__ssvfiscanf_r+0x212>
 8004234:	2b47      	cmp	r3, #71	; 0x47
 8004236:	d82f      	bhi.n	8004298 <__ssvfiscanf_r+0x108>
 8004238:	2b45      	cmp	r3, #69	; 0x45
 800423a:	f080 80b2 	bcs.w	80043a2 <__ssvfiscanf_r+0x212>
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8082 	beq.w	8004348 <__ssvfiscanf_r+0x1b8>
 8004244:	2b25      	cmp	r3, #37	; 0x25
 8004246:	d066      	beq.n	8004316 <__ssvfiscanf_r+0x186>
 8004248:	2303      	movs	r3, #3
 800424a:	9744      	str	r7, [sp, #272]	; 0x110
 800424c:	9349      	str	r3, [sp, #292]	; 0x124
 800424e:	e045      	b.n	80042dc <__ssvfiscanf_r+0x14c>
 8004250:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8004252:	3301      	adds	r3, #1
 8004254:	3101      	adds	r1, #1
 8004256:	9147      	str	r1, [sp, #284]	; 0x11c
 8004258:	6861      	ldr	r1, [r4, #4]
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	3901      	subs	r1, #1
 800425e:	6061      	str	r1, [r4, #4]
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	dd0b      	ble.n	800427e <__ssvfiscanf_r+0xee>
 8004266:	f000 fd67 	bl	8004d38 <__locale_ctype_ptr>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	7819      	ldrb	r1, [r3, #0]
 800426e:	4408      	add	r0, r1
 8004270:	7841      	ldrb	r1, [r0, #1]
 8004272:	070d      	lsls	r5, r1, #28
 8004274:	d4ec      	bmi.n	8004250 <__ssvfiscanf_r+0xc0>
 8004276:	f10a 0501 	add.w	r5, sl, #1
 800427a:	46aa      	mov	sl, r5
 800427c:	e79e      	b.n	80041bc <__ssvfiscanf_r+0x2c>
 800427e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004280:	4621      	mov	r1, r4
 8004282:	4630      	mov	r0, r6
 8004284:	4798      	blx	r3
 8004286:	2800      	cmp	r0, #0
 8004288:	d0ed      	beq.n	8004266 <__ssvfiscanf_r+0xd6>
 800428a:	e7f4      	b.n	8004276 <__ssvfiscanf_r+0xe6>
 800428c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800428e:	fb07 1303 	mla	r3, r7, r3, r1
 8004292:	3b30      	subs	r3, #48	; 0x30
 8004294:	9345      	str	r3, [sp, #276]	; 0x114
 8004296:	e7af      	b.n	80041f8 <__ssvfiscanf_r+0x68>
 8004298:	2b5b      	cmp	r3, #91	; 0x5b
 800429a:	d061      	beq.n	8004360 <__ssvfiscanf_r+0x1d0>
 800429c:	d80c      	bhi.n	80042b8 <__ssvfiscanf_r+0x128>
 800429e:	2b58      	cmp	r3, #88	; 0x58
 80042a0:	d1d2      	bne.n	8004248 <__ssvfiscanf_r+0xb8>
 80042a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	9243      	str	r2, [sp, #268]	; 0x10c
 80042aa:	2210      	movs	r2, #16
 80042ac:	9244      	str	r2, [sp, #272]	; 0x110
 80042ae:	2b6f      	cmp	r3, #111	; 0x6f
 80042b0:	bfb4      	ite	lt
 80042b2:	2303      	movlt	r3, #3
 80042b4:	2304      	movge	r3, #4
 80042b6:	e010      	b.n	80042da <__ssvfiscanf_r+0x14a>
 80042b8:	2b63      	cmp	r3, #99	; 0x63
 80042ba:	d05c      	beq.n	8004376 <__ssvfiscanf_r+0x1e6>
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d1c3      	bne.n	8004248 <__ssvfiscanf_r+0xb8>
 80042c0:	9744      	str	r7, [sp, #272]	; 0x110
 80042c2:	e7f4      	b.n	80042ae <__ssvfiscanf_r+0x11e>
 80042c4:	2b70      	cmp	r3, #112	; 0x70
 80042c6:	d042      	beq.n	800434e <__ssvfiscanf_r+0x1be>
 80042c8:	d81d      	bhi.n	8004306 <__ssvfiscanf_r+0x176>
 80042ca:	2b6e      	cmp	r3, #110	; 0x6e
 80042cc:	d059      	beq.n	8004382 <__ssvfiscanf_r+0x1f2>
 80042ce:	d843      	bhi.n	8004358 <__ssvfiscanf_r+0x1c8>
 80042d0:	2b69      	cmp	r3, #105	; 0x69
 80042d2:	d1b9      	bne.n	8004248 <__ssvfiscanf_r+0xb8>
 80042d4:	2300      	movs	r3, #0
 80042d6:	9344      	str	r3, [sp, #272]	; 0x110
 80042d8:	2303      	movs	r3, #3
 80042da:	9349      	str	r3, [sp, #292]	; 0x124
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	dd61      	ble.n	80043a6 <__ssvfiscanf_r+0x216>
 80042e2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80042e4:	0659      	lsls	r1, r3, #25
 80042e6:	d56f      	bpl.n	80043c8 <__ssvfiscanf_r+0x238>
 80042e8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	dc7c      	bgt.n	80043e8 <__ssvfiscanf_r+0x258>
 80042ee:	ab01      	add	r3, sp, #4
 80042f0:	4622      	mov	r2, r4
 80042f2:	a943      	add	r1, sp, #268	; 0x10c
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 fa37 	bl	8004768 <_scanf_chars>
 80042fa:	2801      	cmp	r0, #1
 80042fc:	f000 8092 	beq.w	8004424 <__ssvfiscanf_r+0x294>
 8004300:	2802      	cmp	r0, #2
 8004302:	d1ba      	bne.n	800427a <__ssvfiscanf_r+0xea>
 8004304:	e01d      	b.n	8004342 <__ssvfiscanf_r+0x1b2>
 8004306:	2b75      	cmp	r3, #117	; 0x75
 8004308:	d0da      	beq.n	80042c0 <__ssvfiscanf_r+0x130>
 800430a:	2b78      	cmp	r3, #120	; 0x78
 800430c:	d0c9      	beq.n	80042a2 <__ssvfiscanf_r+0x112>
 800430e:	2b73      	cmp	r3, #115	; 0x73
 8004310:	d19a      	bne.n	8004248 <__ssvfiscanf_r+0xb8>
 8004312:	2302      	movs	r3, #2
 8004314:	e7e1      	b.n	80042da <__ssvfiscanf_r+0x14a>
 8004316:	6863      	ldr	r3, [r4, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	dd0c      	ble.n	8004336 <__ssvfiscanf_r+0x1a6>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	4593      	cmp	fp, r2
 8004322:	d17f      	bne.n	8004424 <__ssvfiscanf_r+0x294>
 8004324:	3301      	adds	r3, #1
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800432c:	3a01      	subs	r2, #1
 800432e:	3301      	adds	r3, #1
 8004330:	6062      	str	r2, [r4, #4]
 8004332:	9347      	str	r3, [sp, #284]	; 0x11c
 8004334:	e7a1      	b.n	800427a <__ssvfiscanf_r+0xea>
 8004336:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004338:	4621      	mov	r1, r4
 800433a:	4630      	mov	r0, r6
 800433c:	4798      	blx	r3
 800433e:	2800      	cmp	r0, #0
 8004340:	d0ec      	beq.n	800431c <__ssvfiscanf_r+0x18c>
 8004342:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004344:	2800      	cmp	r0, #0
 8004346:	d163      	bne.n	8004410 <__ssvfiscanf_r+0x280>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e066      	b.n	800441c <__ssvfiscanf_r+0x28c>
 800434e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	9243      	str	r2, [sp, #268]	; 0x10c
 8004356:	e7a4      	b.n	80042a2 <__ssvfiscanf_r+0x112>
 8004358:	2308      	movs	r3, #8
 800435a:	9344      	str	r3, [sp, #272]	; 0x110
 800435c:	2304      	movs	r3, #4
 800435e:	e7bc      	b.n	80042da <__ssvfiscanf_r+0x14a>
 8004360:	4629      	mov	r1, r5
 8004362:	4640      	mov	r0, r8
 8004364:	f000 fb5a 	bl	8004a1c <__sccl>
 8004368:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800436a:	4605      	mov	r5, r0
 800436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004370:	9343      	str	r3, [sp, #268]	; 0x10c
 8004372:	2301      	movs	r3, #1
 8004374:	e7b1      	b.n	80042da <__ssvfiscanf_r+0x14a>
 8004376:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437c:	9343      	str	r3, [sp, #268]	; 0x10c
 800437e:	2300      	movs	r3, #0
 8004380:	e7ab      	b.n	80042da <__ssvfiscanf_r+0x14a>
 8004382:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004384:	06d0      	lsls	r0, r2, #27
 8004386:	f53f af78 	bmi.w	800427a <__ssvfiscanf_r+0xea>
 800438a:	f012 0f01 	tst.w	r2, #1
 800438e:	9a01      	ldr	r2, [sp, #4]
 8004390:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004392:	f102 0104 	add.w	r1, r2, #4
 8004396:	9101      	str	r1, [sp, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	bf14      	ite	ne
 800439c:	8013      	strhne	r3, [r2, #0]
 800439e:	6013      	streq	r3, [r2, #0]
 80043a0:	e76b      	b.n	800427a <__ssvfiscanf_r+0xea>
 80043a2:	2305      	movs	r3, #5
 80043a4:	e799      	b.n	80042da <__ssvfiscanf_r+0x14a>
 80043a6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80043a8:	4621      	mov	r1, r4
 80043aa:	4630      	mov	r0, r6
 80043ac:	4798      	blx	r3
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d097      	beq.n	80042e2 <__ssvfiscanf_r+0x152>
 80043b2:	e7c6      	b.n	8004342 <__ssvfiscanf_r+0x1b2>
 80043b4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80043b6:	3201      	adds	r2, #1
 80043b8:	9247      	str	r2, [sp, #284]	; 0x11c
 80043ba:	6862      	ldr	r2, [r4, #4]
 80043bc:	3a01      	subs	r2, #1
 80043be:	2a00      	cmp	r2, #0
 80043c0:	6062      	str	r2, [r4, #4]
 80043c2:	dd0a      	ble.n	80043da <__ssvfiscanf_r+0x24a>
 80043c4:	3301      	adds	r3, #1
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	f000 fcb6 	bl	8004d38 <__locale_ctype_ptr>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	4410      	add	r0, r2
 80043d2:	7842      	ldrb	r2, [r0, #1]
 80043d4:	0712      	lsls	r2, r2, #28
 80043d6:	d4ed      	bmi.n	80043b4 <__ssvfiscanf_r+0x224>
 80043d8:	e786      	b.n	80042e8 <__ssvfiscanf_r+0x158>
 80043da:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80043dc:	4621      	mov	r1, r4
 80043de:	4630      	mov	r0, r6
 80043e0:	4798      	blx	r3
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0f0      	beq.n	80043c8 <__ssvfiscanf_r+0x238>
 80043e6:	e7ac      	b.n	8004342 <__ssvfiscanf_r+0x1b2>
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	dc06      	bgt.n	80043fa <__ssvfiscanf_r+0x26a>
 80043ec:	ab01      	add	r3, sp, #4
 80043ee:	4622      	mov	r2, r4
 80043f0:	a943      	add	r1, sp, #268	; 0x10c
 80043f2:	4630      	mov	r0, r6
 80043f4:	f000 fa1c 	bl	8004830 <_scanf_i>
 80043f8:	e77f      	b.n	80042fa <__ssvfiscanf_r+0x16a>
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <__ssvfiscanf_r+0x2a4>)
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f43f af3c 	beq.w	800427a <__ssvfiscanf_r+0xea>
 8004402:	ab01      	add	r3, sp, #4
 8004404:	4622      	mov	r2, r4
 8004406:	a943      	add	r1, sp, #268	; 0x10c
 8004408:	4630      	mov	r0, r6
 800440a:	f3af 8000 	nop.w
 800440e:	e774      	b.n	80042fa <__ssvfiscanf_r+0x16a>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004416:	bf18      	it	ne
 8004418:	f04f 30ff 	movne.w	r0, #4294967295
 800441c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004426:	e7f9      	b.n	800441c <__ssvfiscanf_r+0x28c>
 8004428:	080040dd 	.word	0x080040dd
 800442c:	08004157 	.word	0x08004157
 8004430:	08005111 	.word	0x08005111
 8004434:	00000000 	.word	0x00000000

08004438 <_printf_common>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	4691      	mov	r9, r2
 800443e:	461f      	mov	r7, r3
 8004440:	688a      	ldr	r2, [r1, #8]
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	4606      	mov	r6, r0
 8004446:	4293      	cmp	r3, r2
 8004448:	bfb8      	it	lt
 800444a:	4613      	movlt	r3, r2
 800444c:	f8c9 3000 	str.w	r3, [r9]
 8004450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004454:	460c      	mov	r4, r1
 8004456:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800445a:	b112      	cbz	r2, 8004462 <_printf_common+0x2a>
 800445c:	3301      	adds	r3, #1
 800445e:	f8c9 3000 	str.w	r3, [r9]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	0699      	lsls	r1, r3, #26
 8004466:	bf42      	ittt	mi
 8004468:	f8d9 3000 	ldrmi.w	r3, [r9]
 800446c:	3302      	addmi	r3, #2
 800446e:	f8c9 3000 	strmi.w	r3, [r9]
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	f015 0506 	ands.w	r5, r5, #6
 8004478:	d107      	bne.n	800448a <_printf_common+0x52>
 800447a:	f104 0a19 	add.w	sl, r4, #25
 800447e:	68e3      	ldr	r3, [r4, #12]
 8004480:	f8d9 2000 	ldr.w	r2, [r9]
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	429d      	cmp	r5, r3
 8004488:	db2a      	blt.n	80044e0 <_printf_common+0xa8>
 800448a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	3300      	adds	r3, #0
 8004492:	bf18      	it	ne
 8004494:	2301      	movne	r3, #1
 8004496:	0692      	lsls	r2, r2, #26
 8004498:	d42f      	bmi.n	80044fa <_printf_common+0xc2>
 800449a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800449e:	4639      	mov	r1, r7
 80044a0:	4630      	mov	r0, r6
 80044a2:	47c0      	blx	r8
 80044a4:	3001      	adds	r0, #1
 80044a6:	d022      	beq.n	80044ee <_printf_common+0xb6>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	68e5      	ldr	r5, [r4, #12]
 80044ac:	f003 0306 	and.w	r3, r3, #6
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	bf18      	it	ne
 80044b4:	2500      	movne	r5, #0
 80044b6:	f8d9 2000 	ldr.w	r2, [r9]
 80044ba:	f04f 0900 	mov.w	r9, #0
 80044be:	bf08      	it	eq
 80044c0:	1aad      	subeq	r5, r5, r2
 80044c2:	68a3      	ldr	r3, [r4, #8]
 80044c4:	6922      	ldr	r2, [r4, #16]
 80044c6:	bf08      	it	eq
 80044c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfc4      	itt	gt
 80044d0:	1a9b      	subgt	r3, r3, r2
 80044d2:	18ed      	addgt	r5, r5, r3
 80044d4:	341a      	adds	r4, #26
 80044d6:	454d      	cmp	r5, r9
 80044d8:	d11b      	bne.n	8004512 <_printf_common+0xda>
 80044da:	2000      	movs	r0, #0
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	2301      	movs	r3, #1
 80044e2:	4652      	mov	r2, sl
 80044e4:	4639      	mov	r1, r7
 80044e6:	4630      	mov	r0, r6
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d103      	bne.n	80044f6 <_printf_common+0xbe>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f6:	3501      	adds	r5, #1
 80044f8:	e7c1      	b.n	800447e <_printf_common+0x46>
 80044fa:	2030      	movs	r0, #48	; 0x30
 80044fc:	18e1      	adds	r1, r4, r3
 80044fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004508:	4422      	add	r2, r4
 800450a:	3302      	adds	r3, #2
 800450c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004510:	e7c3      	b.n	800449a <_printf_common+0x62>
 8004512:	2301      	movs	r3, #1
 8004514:	4622      	mov	r2, r4
 8004516:	4639      	mov	r1, r7
 8004518:	4630      	mov	r0, r6
 800451a:	47c0      	blx	r8
 800451c:	3001      	adds	r0, #1
 800451e:	d0e6      	beq.n	80044ee <_printf_common+0xb6>
 8004520:	f109 0901 	add.w	r9, r9, #1
 8004524:	e7d7      	b.n	80044d6 <_printf_common+0x9e>
	...

08004528 <_printf_i>:
 8004528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800452c:	4617      	mov	r7, r2
 800452e:	7e0a      	ldrb	r2, [r1, #24]
 8004530:	b085      	sub	sp, #20
 8004532:	2a6e      	cmp	r2, #110	; 0x6e
 8004534:	4698      	mov	r8, r3
 8004536:	4606      	mov	r6, r0
 8004538:	460c      	mov	r4, r1
 800453a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800453c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004540:	f000 80bc 	beq.w	80046bc <_printf_i+0x194>
 8004544:	d81a      	bhi.n	800457c <_printf_i+0x54>
 8004546:	2a63      	cmp	r2, #99	; 0x63
 8004548:	d02e      	beq.n	80045a8 <_printf_i+0x80>
 800454a:	d80a      	bhi.n	8004562 <_printf_i+0x3a>
 800454c:	2a00      	cmp	r2, #0
 800454e:	f000 80c8 	beq.w	80046e2 <_printf_i+0x1ba>
 8004552:	2a58      	cmp	r2, #88	; 0x58
 8004554:	f000 808a 	beq.w	800466c <_printf_i+0x144>
 8004558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800455c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004560:	e02a      	b.n	80045b8 <_printf_i+0x90>
 8004562:	2a64      	cmp	r2, #100	; 0x64
 8004564:	d001      	beq.n	800456a <_printf_i+0x42>
 8004566:	2a69      	cmp	r2, #105	; 0x69
 8004568:	d1f6      	bne.n	8004558 <_printf_i+0x30>
 800456a:	6821      	ldr	r1, [r4, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004572:	d023      	beq.n	80045bc <_printf_i+0x94>
 8004574:	1d11      	adds	r1, r2, #4
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	e027      	b.n	80045cc <_printf_i+0xa4>
 800457c:	2a73      	cmp	r2, #115	; 0x73
 800457e:	f000 80b4 	beq.w	80046ea <_printf_i+0x1c2>
 8004582:	d808      	bhi.n	8004596 <_printf_i+0x6e>
 8004584:	2a6f      	cmp	r2, #111	; 0x6f
 8004586:	d02a      	beq.n	80045de <_printf_i+0xb6>
 8004588:	2a70      	cmp	r2, #112	; 0x70
 800458a:	d1e5      	bne.n	8004558 <_printf_i+0x30>
 800458c:	680a      	ldr	r2, [r1, #0]
 800458e:	f042 0220 	orr.w	r2, r2, #32
 8004592:	600a      	str	r2, [r1, #0]
 8004594:	e003      	b.n	800459e <_printf_i+0x76>
 8004596:	2a75      	cmp	r2, #117	; 0x75
 8004598:	d021      	beq.n	80045de <_printf_i+0xb6>
 800459a:	2a78      	cmp	r2, #120	; 0x78
 800459c:	d1dc      	bne.n	8004558 <_printf_i+0x30>
 800459e:	2278      	movs	r2, #120	; 0x78
 80045a0:	496f      	ldr	r1, [pc, #444]	; (8004760 <_printf_i+0x238>)
 80045a2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80045a6:	e064      	b.n	8004672 <_printf_i+0x14a>
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80045ae:	1d11      	adds	r1, r2, #4
 80045b0:	6019      	str	r1, [r3, #0]
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0a3      	b.n	8004704 <_printf_i+0x1dc>
 80045bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80045c0:	f102 0104 	add.w	r1, r2, #4
 80045c4:	6019      	str	r1, [r3, #0]
 80045c6:	d0d7      	beq.n	8004578 <_printf_i+0x50>
 80045c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da03      	bge.n	80045d8 <_printf_i+0xb0>
 80045d0:	222d      	movs	r2, #45	; 0x2d
 80045d2:	425b      	negs	r3, r3
 80045d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045d8:	4962      	ldr	r1, [pc, #392]	; (8004764 <_printf_i+0x23c>)
 80045da:	220a      	movs	r2, #10
 80045dc:	e017      	b.n	800460e <_printf_i+0xe6>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	6819      	ldr	r1, [r3, #0]
 80045e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80045e6:	d003      	beq.n	80045f0 <_printf_i+0xc8>
 80045e8:	1d08      	adds	r0, r1, #4
 80045ea:	6018      	str	r0, [r3, #0]
 80045ec:	680b      	ldr	r3, [r1, #0]
 80045ee:	e006      	b.n	80045fe <_printf_i+0xd6>
 80045f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045f4:	f101 0004 	add.w	r0, r1, #4
 80045f8:	6018      	str	r0, [r3, #0]
 80045fa:	d0f7      	beq.n	80045ec <_printf_i+0xc4>
 80045fc:	880b      	ldrh	r3, [r1, #0]
 80045fe:	2a6f      	cmp	r2, #111	; 0x6f
 8004600:	bf14      	ite	ne
 8004602:	220a      	movne	r2, #10
 8004604:	2208      	moveq	r2, #8
 8004606:	4957      	ldr	r1, [pc, #348]	; (8004764 <_printf_i+0x23c>)
 8004608:	2000      	movs	r0, #0
 800460a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800460e:	6865      	ldr	r5, [r4, #4]
 8004610:	2d00      	cmp	r5, #0
 8004612:	60a5      	str	r5, [r4, #8]
 8004614:	f2c0 809c 	blt.w	8004750 <_printf_i+0x228>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	f020 0004 	bic.w	r0, r0, #4
 800461e:	6020      	str	r0, [r4, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d13f      	bne.n	80046a4 <_printf_i+0x17c>
 8004624:	2d00      	cmp	r5, #0
 8004626:	f040 8095 	bne.w	8004754 <_printf_i+0x22c>
 800462a:	4675      	mov	r5, lr
 800462c:	2a08      	cmp	r2, #8
 800462e:	d10b      	bne.n	8004648 <_printf_i+0x120>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	07da      	lsls	r2, r3, #31
 8004634:	d508      	bpl.n	8004648 <_printf_i+0x120>
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	6862      	ldr	r2, [r4, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	bfde      	ittt	le
 800463e:	2330      	movle	r3, #48	; 0x30
 8004640:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004644:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004648:	ebae 0305 	sub.w	r3, lr, r5
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	f8cd 8000 	str.w	r8, [sp]
 8004652:	463b      	mov	r3, r7
 8004654:	aa03      	add	r2, sp, #12
 8004656:	4621      	mov	r1, r4
 8004658:	4630      	mov	r0, r6
 800465a:	f7ff feed 	bl	8004438 <_printf_common>
 800465e:	3001      	adds	r0, #1
 8004660:	d155      	bne.n	800470e <_printf_i+0x1e6>
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	b005      	add	sp, #20
 8004668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800466c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004670:	493c      	ldr	r1, [pc, #240]	; (8004764 <_printf_i+0x23c>)
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f012 0f80 	tst.w	r2, #128	; 0x80
 800467a:	f100 0504 	add.w	r5, r0, #4
 800467e:	601d      	str	r5, [r3, #0]
 8004680:	d001      	beq.n	8004686 <_printf_i+0x15e>
 8004682:	6803      	ldr	r3, [r0, #0]
 8004684:	e002      	b.n	800468c <_printf_i+0x164>
 8004686:	0655      	lsls	r5, r2, #25
 8004688:	d5fb      	bpl.n	8004682 <_printf_i+0x15a>
 800468a:	8803      	ldrh	r3, [r0, #0]
 800468c:	07d0      	lsls	r0, r2, #31
 800468e:	bf44      	itt	mi
 8004690:	f042 0220 	orrmi.w	r2, r2, #32
 8004694:	6022      	strmi	r2, [r4, #0]
 8004696:	b91b      	cbnz	r3, 80046a0 <_printf_i+0x178>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	f022 0220 	bic.w	r2, r2, #32
 800469e:	6022      	str	r2, [r4, #0]
 80046a0:	2210      	movs	r2, #16
 80046a2:	e7b1      	b.n	8004608 <_printf_i+0xe0>
 80046a4:	4675      	mov	r5, lr
 80046a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80046aa:	fb02 3310 	mls	r3, r2, r0, r3
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046b4:	4603      	mov	r3, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1f5      	bne.n	80046a6 <_printf_i+0x17e>
 80046ba:	e7b7      	b.n	800462c <_printf_i+0x104>
 80046bc:	6808      	ldr	r0, [r1, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80046c4:	6949      	ldr	r1, [r1, #20]
 80046c6:	d004      	beq.n	80046d2 <_printf_i+0x1aa>
 80046c8:	1d10      	adds	r0, r2, #4
 80046ca:	6018      	str	r0, [r3, #0]
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	6019      	str	r1, [r3, #0]
 80046d0:	e007      	b.n	80046e2 <_printf_i+0x1ba>
 80046d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046d6:	f102 0004 	add.w	r0, r2, #4
 80046da:	6018      	str	r0, [r3, #0]
 80046dc:	6813      	ldr	r3, [r2, #0]
 80046de:	d0f6      	beq.n	80046ce <_printf_i+0x1a6>
 80046e0:	8019      	strh	r1, [r3, #0]
 80046e2:	2300      	movs	r3, #0
 80046e4:	4675      	mov	r5, lr
 80046e6:	6123      	str	r3, [r4, #16]
 80046e8:	e7b1      	b.n	800464e <_printf_i+0x126>
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	1d11      	adds	r1, r2, #4
 80046ee:	6019      	str	r1, [r3, #0]
 80046f0:	6815      	ldr	r5, [r2, #0]
 80046f2:	2100      	movs	r1, #0
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 fb3e 	bl	8004d78 <memchr>
 80046fc:	b108      	cbz	r0, 8004702 <_printf_i+0x1da>
 80046fe:	1b40      	subs	r0, r0, r5
 8004700:	6060      	str	r0, [r4, #4]
 8004702:	6863      	ldr	r3, [r4, #4]
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	2300      	movs	r3, #0
 8004708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800470c:	e79f      	b.n	800464e <_printf_i+0x126>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	462a      	mov	r2, r5
 8004712:	4639      	mov	r1, r7
 8004714:	4630      	mov	r0, r6
 8004716:	47c0      	blx	r8
 8004718:	3001      	adds	r0, #1
 800471a:	d0a2      	beq.n	8004662 <_printf_i+0x13a>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	079b      	lsls	r3, r3, #30
 8004720:	d507      	bpl.n	8004732 <_printf_i+0x20a>
 8004722:	2500      	movs	r5, #0
 8004724:	f104 0919 	add.w	r9, r4, #25
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	9a03      	ldr	r2, [sp, #12]
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	429d      	cmp	r5, r3
 8004730:	db05      	blt.n	800473e <_printf_i+0x216>
 8004732:	68e0      	ldr	r0, [r4, #12]
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	4298      	cmp	r0, r3
 8004738:	bfb8      	it	lt
 800473a:	4618      	movlt	r0, r3
 800473c:	e793      	b.n	8004666 <_printf_i+0x13e>
 800473e:	2301      	movs	r3, #1
 8004740:	464a      	mov	r2, r9
 8004742:	4639      	mov	r1, r7
 8004744:	4630      	mov	r0, r6
 8004746:	47c0      	blx	r8
 8004748:	3001      	adds	r0, #1
 800474a:	d08a      	beq.n	8004662 <_printf_i+0x13a>
 800474c:	3501      	adds	r5, #1
 800474e:	e7eb      	b.n	8004728 <_printf_i+0x200>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1a7      	bne.n	80046a4 <_printf_i+0x17c>
 8004754:	780b      	ldrb	r3, [r1, #0]
 8004756:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800475a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800475e:	e765      	b.n	800462c <_printf_i+0x104>
 8004760:	0800512d 	.word	0x0800512d
 8004764:	0800511c 	.word	0x0800511c

08004768 <_scanf_chars>:
 8004768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476c:	4615      	mov	r5, r2
 800476e:	688a      	ldr	r2, [r1, #8]
 8004770:	4680      	mov	r8, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b932      	cbnz	r2, 8004784 <_scanf_chars+0x1c>
 8004776:	698a      	ldr	r2, [r1, #24]
 8004778:	2a00      	cmp	r2, #0
 800477a:	bf0c      	ite	eq
 800477c:	2201      	moveq	r2, #1
 800477e:	f04f 32ff 	movne.w	r2, #4294967295
 8004782:	608a      	str	r2, [r1, #8]
 8004784:	2600      	movs	r6, #0
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	06d1      	lsls	r1, r2, #27
 800478a:	bf5f      	itttt	pl
 800478c:	681a      	ldrpl	r2, [r3, #0]
 800478e:	1d11      	addpl	r1, r2, #4
 8004790:	6019      	strpl	r1, [r3, #0]
 8004792:	6817      	ldrpl	r7, [r2, #0]
 8004794:	69a3      	ldr	r3, [r4, #24]
 8004796:	b1db      	cbz	r3, 80047d0 <_scanf_chars+0x68>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <_scanf_chars+0x44>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	6962      	ldr	r2, [r4, #20]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	5cd3      	ldrb	r3, [r2, r3]
 80047a4:	b9a3      	cbnz	r3, 80047d0 <_scanf_chars+0x68>
 80047a6:	2e00      	cmp	r6, #0
 80047a8:	d131      	bne.n	800480e <_scanf_chars+0xa6>
 80047aa:	e006      	b.n	80047ba <_scanf_chars+0x52>
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d007      	beq.n	80047c0 <_scanf_chars+0x58>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d12c      	bne.n	800480e <_scanf_chars+0xa6>
 80047b4:	69a3      	ldr	r3, [r4, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d129      	bne.n	800480e <_scanf_chars+0xa6>
 80047ba:	2001      	movs	r0, #1
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	f000 faba 	bl	8004d38 <__locale_ctype_ptr>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4418      	add	r0, r3
 80047ca:	7843      	ldrb	r3, [r0, #1]
 80047cc:	071b      	lsls	r3, r3, #28
 80047ce:	d4ef      	bmi.n	80047b0 <_scanf_chars+0x48>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	3601      	adds	r6, #1
 80047d4:	06da      	lsls	r2, r3, #27
 80047d6:	bf5e      	ittt	pl
 80047d8:	682b      	ldrpl	r3, [r5, #0]
 80047da:	781b      	ldrbpl	r3, [r3, #0]
 80047dc:	703b      	strbpl	r3, [r7, #0]
 80047de:	682a      	ldr	r2, [r5, #0]
 80047e0:	686b      	ldr	r3, [r5, #4]
 80047e2:	f102 0201 	add.w	r2, r2, #1
 80047e6:	602a      	str	r2, [r5, #0]
 80047e8:	68a2      	ldr	r2, [r4, #8]
 80047ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80047ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80047f2:	606b      	str	r3, [r5, #4]
 80047f4:	bf58      	it	pl
 80047f6:	3701      	addpl	r7, #1
 80047f8:	60a2      	str	r2, [r4, #8]
 80047fa:	b142      	cbz	r2, 800480e <_scanf_chars+0xa6>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dcc9      	bgt.n	8004794 <_scanf_chars+0x2c>
 8004800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004804:	4629      	mov	r1, r5
 8004806:	4640      	mov	r0, r8
 8004808:	4798      	blx	r3
 800480a:	2800      	cmp	r0, #0
 800480c:	d0c2      	beq.n	8004794 <_scanf_chars+0x2c>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f013 0310 	ands.w	r3, r3, #16
 8004814:	d105      	bne.n	8004822 <_scanf_chars+0xba>
 8004816:	68e2      	ldr	r2, [r4, #12]
 8004818:	3201      	adds	r2, #1
 800481a:	60e2      	str	r2, [r4, #12]
 800481c:	69a2      	ldr	r2, [r4, #24]
 800481e:	b102      	cbz	r2, 8004822 <_scanf_chars+0xba>
 8004820:	703b      	strb	r3, [r7, #0]
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	2000      	movs	r0, #0
 8004826:	441e      	add	r6, r3
 8004828:	6126      	str	r6, [r4, #16]
 800482a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004830 <_scanf_i>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	460c      	mov	r4, r1
 8004836:	469a      	mov	sl, r3
 8004838:	4b74      	ldr	r3, [pc, #464]	; (8004a0c <_scanf_i+0x1dc>)
 800483a:	b087      	sub	sp, #28
 800483c:	4683      	mov	fp, r0
 800483e:	4616      	mov	r6, r2
 8004840:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004844:	ab03      	add	r3, sp, #12
 8004846:	68a7      	ldr	r7, [r4, #8]
 8004848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800484c:	4b70      	ldr	r3, [pc, #448]	; (8004a10 <_scanf_i+0x1e0>)
 800484e:	69a1      	ldr	r1, [r4, #24]
 8004850:	4a70      	ldr	r2, [pc, #448]	; (8004a14 <_scanf_i+0x1e4>)
 8004852:	f104 091c 	add.w	r9, r4, #28
 8004856:	2903      	cmp	r1, #3
 8004858:	bf18      	it	ne
 800485a:	461a      	movne	r2, r3
 800485c:	1e7b      	subs	r3, r7, #1
 800485e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004862:	bf84      	itt	hi
 8004864:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004868:	60a3      	strhi	r3, [r4, #8]
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	bf88      	it	hi
 800486e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004872:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	bf98      	it	ls
 800487a:	2700      	movls	r7, #0
 800487c:	464b      	mov	r3, r9
 800487e:	f04f 0800 	mov.w	r8, #0
 8004882:	9200      	str	r2, [sp, #0]
 8004884:	bf88      	it	hi
 8004886:	197f      	addhi	r7, r7, r5
 8004888:	6831      	ldr	r1, [r6, #0]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	ab03      	add	r3, sp, #12
 800488e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004892:	2202      	movs	r2, #2
 8004894:	7809      	ldrb	r1, [r1, #0]
 8004896:	f000 fa6f 	bl	8004d78 <memchr>
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	b328      	cbz	r0, 80048ea <_scanf_i+0xba>
 800489e:	f1b8 0f01 	cmp.w	r8, #1
 80048a2:	d156      	bne.n	8004952 <_scanf_i+0x122>
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	b92a      	cbnz	r2, 80048b4 <_scanf_i+0x84>
 80048a8:	2208      	movs	r2, #8
 80048aa:	6062      	str	r2, [r4, #4]
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80048ba:	6022      	str	r2, [r4, #0]
 80048bc:	68a2      	ldr	r2, [r4, #8]
 80048be:	1e51      	subs	r1, r2, #1
 80048c0:	60a1      	str	r1, [r4, #8]
 80048c2:	b192      	cbz	r2, 80048ea <_scanf_i+0xba>
 80048c4:	6832      	ldr	r2, [r6, #0]
 80048c6:	1c5d      	adds	r5, r3, #1
 80048c8:	1c51      	adds	r1, r2, #1
 80048ca:	6031      	str	r1, [r6, #0]
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	6873      	ldr	r3, [r6, #4]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	6073      	str	r3, [r6, #4]
 80048d8:	dc06      	bgt.n	80048e8 <_scanf_i+0xb8>
 80048da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048de:	4631      	mov	r1, r6
 80048e0:	4658      	mov	r0, fp
 80048e2:	4798      	blx	r3
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d177      	bne.n	80049d8 <_scanf_i+0x1a8>
 80048e8:	462b      	mov	r3, r5
 80048ea:	f108 0801 	add.w	r8, r8, #1
 80048ee:	f1b8 0f03 	cmp.w	r8, #3
 80048f2:	d1c9      	bne.n	8004888 <_scanf_i+0x58>
 80048f4:	6862      	ldr	r2, [r4, #4]
 80048f6:	b90a      	cbnz	r2, 80048fc <_scanf_i+0xcc>
 80048f8:	220a      	movs	r2, #10
 80048fa:	6062      	str	r2, [r4, #4]
 80048fc:	6862      	ldr	r2, [r4, #4]
 80048fe:	4946      	ldr	r1, [pc, #280]	; (8004a18 <_scanf_i+0x1e8>)
 8004900:	6960      	ldr	r0, [r4, #20]
 8004902:	1a89      	subs	r1, r1, r2
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	f000 f889 	bl	8004a1c <__sccl>
 800490a:	9b01      	ldr	r3, [sp, #4]
 800490c:	f04f 0800 	mov.w	r8, #0
 8004910:	461d      	mov	r5, r3
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d039      	beq.n	800498c <_scanf_i+0x15c>
 8004918:	6831      	ldr	r1, [r6, #0]
 800491a:	6960      	ldr	r0, [r4, #20]
 800491c:	780a      	ldrb	r2, [r1, #0]
 800491e:	5c80      	ldrb	r0, [r0, r2]
 8004920:	2800      	cmp	r0, #0
 8004922:	d033      	beq.n	800498c <_scanf_i+0x15c>
 8004924:	2a30      	cmp	r2, #48	; 0x30
 8004926:	6822      	ldr	r2, [r4, #0]
 8004928:	d121      	bne.n	800496e <_scanf_i+0x13e>
 800492a:	0510      	lsls	r0, r2, #20
 800492c:	d51f      	bpl.n	800496e <_scanf_i+0x13e>
 800492e:	f108 0801 	add.w	r8, r8, #1
 8004932:	b117      	cbz	r7, 800493a <_scanf_i+0x10a>
 8004934:	3301      	adds	r3, #1
 8004936:	3f01      	subs	r7, #1
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	6873      	ldr	r3, [r6, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	6073      	str	r3, [r6, #4]
 8004942:	dd1c      	ble.n	800497e <_scanf_i+0x14e>
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	3301      	adds	r3, #1
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	3b01      	subs	r3, #1
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	e7df      	b.n	8004912 <_scanf_i+0xe2>
 8004952:	f1b8 0f02 	cmp.w	r8, #2
 8004956:	d1b1      	bne.n	80048bc <_scanf_i+0x8c>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800495e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004962:	d1c2      	bne.n	80048ea <_scanf_i+0xba>
 8004964:	2110      	movs	r1, #16
 8004966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496a:	6061      	str	r1, [r4, #4]
 800496c:	e7a5      	b.n	80048ba <_scanf_i+0x8a>
 800496e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	780b      	ldrb	r3, [r1, #0]
 8004976:	3501      	adds	r5, #1
 8004978:	f805 3c01 	strb.w	r3, [r5, #-1]
 800497c:	e7dd      	b.n	800493a <_scanf_i+0x10a>
 800497e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004982:	4631      	mov	r1, r6
 8004984:	4658      	mov	r0, fp
 8004986:	4798      	blx	r3
 8004988:	2800      	cmp	r0, #0
 800498a:	d0de      	beq.n	800494a <_scanf_i+0x11a>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	05d9      	lsls	r1, r3, #23
 8004990:	d50c      	bpl.n	80049ac <_scanf_i+0x17c>
 8004992:	454d      	cmp	r5, r9
 8004994:	d908      	bls.n	80049a8 <_scanf_i+0x178>
 8004996:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800499a:	1e6f      	subs	r7, r5, #1
 800499c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a0:	4632      	mov	r2, r6
 80049a2:	4658      	mov	r0, fp
 80049a4:	4798      	blx	r3
 80049a6:	463d      	mov	r5, r7
 80049a8:	454d      	cmp	r5, r9
 80049aa:	d02c      	beq.n	8004a06 <_scanf_i+0x1d6>
 80049ac:	6822      	ldr	r2, [r4, #0]
 80049ae:	f012 0210 	ands.w	r2, r2, #16
 80049b2:	d11e      	bne.n	80049f2 <_scanf_i+0x1c2>
 80049b4:	702a      	strb	r2, [r5, #0]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	4649      	mov	r1, r9
 80049ba:	4658      	mov	r0, fp
 80049bc:	9e00      	ldr	r6, [sp, #0]
 80049be:	47b0      	blx	r6
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	f8da 3000 	ldr.w	r3, [sl]
 80049c6:	f012 0f20 	tst.w	r2, #32
 80049ca:	d008      	beq.n	80049de <_scanf_i+0x1ae>
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	f8ca 2000 	str.w	r2, [sl]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6018      	str	r0, [r3, #0]
 80049d6:	e009      	b.n	80049ec <_scanf_i+0x1bc>
 80049d8:	f04f 0800 	mov.w	r8, #0
 80049dc:	e7d6      	b.n	800498c <_scanf_i+0x15c>
 80049de:	07d2      	lsls	r2, r2, #31
 80049e0:	d5f4      	bpl.n	80049cc <_scanf_i+0x19c>
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	f8ca 2000 	str.w	r2, [sl]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	8018      	strh	r0, [r3, #0]
 80049ec:	68e3      	ldr	r3, [r4, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60e3      	str	r3, [r4, #12]
 80049f2:	2000      	movs	r0, #0
 80049f4:	eba5 0509 	sub.w	r5, r5, r9
 80049f8:	44a8      	add	r8, r5
 80049fa:	6925      	ldr	r5, [r4, #16]
 80049fc:	4445      	add	r5, r8
 80049fe:	6125      	str	r5, [r4, #16]
 8004a00:	b007      	add	sp, #28
 8004a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a06:	2001      	movs	r0, #1
 8004a08:	e7fa      	b.n	8004a00 <_scanf_i+0x1d0>
 8004a0a:	bf00      	nop
 8004a0c:	08004ffc 	.word	0x08004ffc
 8004a10:	08004c9d 	.word	0x08004c9d
 8004a14:	08004b7d 	.word	0x08004b7d
 8004a18:	0800514e 	.word	0x0800514e

08004a1c <__sccl>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	780b      	ldrb	r3, [r1, #0]
 8004a20:	1e44      	subs	r4, r0, #1
 8004a22:	2b5e      	cmp	r3, #94	; 0x5e
 8004a24:	bf13      	iteet	ne
 8004a26:	1c4a      	addne	r2, r1, #1
 8004a28:	1c8a      	addeq	r2, r1, #2
 8004a2a:	784b      	ldrbeq	r3, [r1, #1]
 8004a2c:	2100      	movne	r1, #0
 8004a2e:	bf08      	it	eq
 8004a30:	2101      	moveq	r1, #1
 8004a32:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004a36:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004a3a:	42a5      	cmp	r5, r4
 8004a3c:	d1fb      	bne.n	8004a36 <__sccl+0x1a>
 8004a3e:	b913      	cbnz	r3, 8004a46 <__sccl+0x2a>
 8004a40:	3a01      	subs	r2, #1
 8004a42:	4610      	mov	r0, r2
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
 8004a46:	f081 0401 	eor.w	r4, r1, #1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	54c4      	strb	r4, [r0, r3]
 8004a4e:	780d      	ldrb	r5, [r1, #0]
 8004a50:	1c4a      	adds	r2, r1, #1
 8004a52:	2d2d      	cmp	r5, #45	; 0x2d
 8004a54:	d006      	beq.n	8004a64 <__sccl+0x48>
 8004a56:	2d5d      	cmp	r5, #93	; 0x5d
 8004a58:	d0f3      	beq.n	8004a42 <__sccl+0x26>
 8004a5a:	b90d      	cbnz	r5, 8004a60 <__sccl+0x44>
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	e7f0      	b.n	8004a42 <__sccl+0x26>
 8004a60:	462b      	mov	r3, r5
 8004a62:	e7f2      	b.n	8004a4a <__sccl+0x2e>
 8004a64:	784e      	ldrb	r6, [r1, #1]
 8004a66:	2e5d      	cmp	r6, #93	; 0x5d
 8004a68:	d0fa      	beq.n	8004a60 <__sccl+0x44>
 8004a6a:	42b3      	cmp	r3, r6
 8004a6c:	dcf8      	bgt.n	8004a60 <__sccl+0x44>
 8004a6e:	3102      	adds	r1, #2
 8004a70:	3301      	adds	r3, #1
 8004a72:	429e      	cmp	r6, r3
 8004a74:	54c4      	strb	r4, [r0, r3]
 8004a76:	dcfb      	bgt.n	8004a70 <__sccl+0x54>
 8004a78:	e7e9      	b.n	8004a4e <__sccl+0x32>

08004a7a <_strtol_l.isra.0>:
 8004a7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7e:	4680      	mov	r8, r0
 8004a80:	4689      	mov	r9, r1
 8004a82:	4692      	mov	sl, r2
 8004a84:	461f      	mov	r7, r3
 8004a86:	468b      	mov	fp, r1
 8004a88:	465d      	mov	r5, fp
 8004a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a90:	f000 f94f 	bl	8004d32 <__locale_ctype_ptr_l>
 8004a94:	4420      	add	r0, r4
 8004a96:	7846      	ldrb	r6, [r0, #1]
 8004a98:	f016 0608 	ands.w	r6, r6, #8
 8004a9c:	d10b      	bne.n	8004ab6 <_strtol_l.isra.0+0x3c>
 8004a9e:	2c2d      	cmp	r4, #45	; 0x2d
 8004aa0:	d10b      	bne.n	8004aba <_strtol_l.isra.0+0x40>
 8004aa2:	2601      	movs	r6, #1
 8004aa4:	782c      	ldrb	r4, [r5, #0]
 8004aa6:	f10b 0502 	add.w	r5, fp, #2
 8004aaa:	b167      	cbz	r7, 8004ac6 <_strtol_l.isra.0+0x4c>
 8004aac:	2f10      	cmp	r7, #16
 8004aae:	d114      	bne.n	8004ada <_strtol_l.isra.0+0x60>
 8004ab0:	2c30      	cmp	r4, #48	; 0x30
 8004ab2:	d00a      	beq.n	8004aca <_strtol_l.isra.0+0x50>
 8004ab4:	e011      	b.n	8004ada <_strtol_l.isra.0+0x60>
 8004ab6:	46ab      	mov	fp, r5
 8004ab8:	e7e6      	b.n	8004a88 <_strtol_l.isra.0+0xe>
 8004aba:	2c2b      	cmp	r4, #43	; 0x2b
 8004abc:	bf04      	itt	eq
 8004abe:	782c      	ldrbeq	r4, [r5, #0]
 8004ac0:	f10b 0502 	addeq.w	r5, fp, #2
 8004ac4:	e7f1      	b.n	8004aaa <_strtol_l.isra.0+0x30>
 8004ac6:	2c30      	cmp	r4, #48	; 0x30
 8004ac8:	d127      	bne.n	8004b1a <_strtol_l.isra.0+0xa0>
 8004aca:	782b      	ldrb	r3, [r5, #0]
 8004acc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ad0:	2b58      	cmp	r3, #88	; 0x58
 8004ad2:	d14b      	bne.n	8004b6c <_strtol_l.isra.0+0xf2>
 8004ad4:	2710      	movs	r7, #16
 8004ad6:	786c      	ldrb	r4, [r5, #1]
 8004ad8:	3502      	adds	r5, #2
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	bf0c      	ite	eq
 8004ade:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004ae2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	fbb1 fef7 	udiv	lr, r1, r7
 8004aec:	4610      	mov	r0, r2
 8004aee:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004af2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004af6:	2b09      	cmp	r3, #9
 8004af8:	d811      	bhi.n	8004b1e <_strtol_l.isra.0+0xa4>
 8004afa:	461c      	mov	r4, r3
 8004afc:	42a7      	cmp	r7, r4
 8004afe:	dd1d      	ble.n	8004b3c <_strtol_l.isra.0+0xc2>
 8004b00:	1c53      	adds	r3, r2, #1
 8004b02:	d007      	beq.n	8004b14 <_strtol_l.isra.0+0x9a>
 8004b04:	4586      	cmp	lr, r0
 8004b06:	d316      	bcc.n	8004b36 <_strtol_l.isra.0+0xbc>
 8004b08:	d101      	bne.n	8004b0e <_strtol_l.isra.0+0x94>
 8004b0a:	45a4      	cmp	ip, r4
 8004b0c:	db13      	blt.n	8004b36 <_strtol_l.isra.0+0xbc>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fb00 4007 	mla	r0, r0, r7, r4
 8004b14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b18:	e7eb      	b.n	8004af2 <_strtol_l.isra.0+0x78>
 8004b1a:	270a      	movs	r7, #10
 8004b1c:	e7dd      	b.n	8004ada <_strtol_l.isra.0+0x60>
 8004b1e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004b22:	2b19      	cmp	r3, #25
 8004b24:	d801      	bhi.n	8004b2a <_strtol_l.isra.0+0xb0>
 8004b26:	3c37      	subs	r4, #55	; 0x37
 8004b28:	e7e8      	b.n	8004afc <_strtol_l.isra.0+0x82>
 8004b2a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b2e:	2b19      	cmp	r3, #25
 8004b30:	d804      	bhi.n	8004b3c <_strtol_l.isra.0+0xc2>
 8004b32:	3c57      	subs	r4, #87	; 0x57
 8004b34:	e7e2      	b.n	8004afc <_strtol_l.isra.0+0x82>
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	e7eb      	b.n	8004b14 <_strtol_l.isra.0+0x9a>
 8004b3c:	1c53      	adds	r3, r2, #1
 8004b3e:	d108      	bne.n	8004b52 <_strtol_l.isra.0+0xd8>
 8004b40:	2322      	movs	r3, #34	; 0x22
 8004b42:	4608      	mov	r0, r1
 8004b44:	f8c8 3000 	str.w	r3, [r8]
 8004b48:	f1ba 0f00 	cmp.w	sl, #0
 8004b4c:	d107      	bne.n	8004b5e <_strtol_l.isra.0+0xe4>
 8004b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b52:	b106      	cbz	r6, 8004b56 <_strtol_l.isra.0+0xdc>
 8004b54:	4240      	negs	r0, r0
 8004b56:	f1ba 0f00 	cmp.w	sl, #0
 8004b5a:	d00c      	beq.n	8004b76 <_strtol_l.isra.0+0xfc>
 8004b5c:	b122      	cbz	r2, 8004b68 <_strtol_l.isra.0+0xee>
 8004b5e:	3d01      	subs	r5, #1
 8004b60:	f8ca 5000 	str.w	r5, [sl]
 8004b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b68:	464d      	mov	r5, r9
 8004b6a:	e7f9      	b.n	8004b60 <_strtol_l.isra.0+0xe6>
 8004b6c:	2430      	movs	r4, #48	; 0x30
 8004b6e:	2f00      	cmp	r7, #0
 8004b70:	d1b3      	bne.n	8004ada <_strtol_l.isra.0+0x60>
 8004b72:	2708      	movs	r7, #8
 8004b74:	e7b1      	b.n	8004ada <_strtol_l.isra.0+0x60>
 8004b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004b7c <_strtol_r>:
 8004b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b7e:	4c06      	ldr	r4, [pc, #24]	; (8004b98 <_strtol_r+0x1c>)
 8004b80:	4d06      	ldr	r5, [pc, #24]	; (8004b9c <_strtol_r+0x20>)
 8004b82:	6824      	ldr	r4, [r4, #0]
 8004b84:	6a24      	ldr	r4, [r4, #32]
 8004b86:	2c00      	cmp	r4, #0
 8004b88:	bf08      	it	eq
 8004b8a:	462c      	moveq	r4, r5
 8004b8c:	9400      	str	r4, [sp, #0]
 8004b8e:	f7ff ff74 	bl	8004a7a <_strtol_l.isra.0>
 8004b92:	b003      	add	sp, #12
 8004b94:	bd30      	pop	{r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	20000160 	.word	0x20000160
 8004b9c:	200001c4 	.word	0x200001c4

08004ba0 <_strtoul_l.isra.0>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	4689      	mov	r9, r1
 8004ba8:	4692      	mov	sl, r2
 8004baa:	461e      	mov	r6, r3
 8004bac:	460f      	mov	r7, r1
 8004bae:	463d      	mov	r5, r7
 8004bb0:	9808      	ldr	r0, [sp, #32]
 8004bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bb6:	f000 f8bc 	bl	8004d32 <__locale_ctype_ptr_l>
 8004bba:	4420      	add	r0, r4
 8004bbc:	7843      	ldrb	r3, [r0, #1]
 8004bbe:	f013 0308 	ands.w	r3, r3, #8
 8004bc2:	d10a      	bne.n	8004bda <_strtoul_l.isra.0+0x3a>
 8004bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8004bc6:	d10a      	bne.n	8004bde <_strtoul_l.isra.0+0x3e>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	782c      	ldrb	r4, [r5, #0]
 8004bcc:	1cbd      	adds	r5, r7, #2
 8004bce:	b15e      	cbz	r6, 8004be8 <_strtoul_l.isra.0+0x48>
 8004bd0:	2e10      	cmp	r6, #16
 8004bd2:	d113      	bne.n	8004bfc <_strtoul_l.isra.0+0x5c>
 8004bd4:	2c30      	cmp	r4, #48	; 0x30
 8004bd6:	d009      	beq.n	8004bec <_strtoul_l.isra.0+0x4c>
 8004bd8:	e010      	b.n	8004bfc <_strtoul_l.isra.0+0x5c>
 8004bda:	462f      	mov	r7, r5
 8004bdc:	e7e7      	b.n	8004bae <_strtoul_l.isra.0+0xe>
 8004bde:	2c2b      	cmp	r4, #43	; 0x2b
 8004be0:	bf04      	itt	eq
 8004be2:	782c      	ldrbeq	r4, [r5, #0]
 8004be4:	1cbd      	addeq	r5, r7, #2
 8004be6:	e7f2      	b.n	8004bce <_strtoul_l.isra.0+0x2e>
 8004be8:	2c30      	cmp	r4, #48	; 0x30
 8004bea:	d125      	bne.n	8004c38 <_strtoul_l.isra.0+0x98>
 8004bec:	782a      	ldrb	r2, [r5, #0]
 8004bee:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004bf2:	2a58      	cmp	r2, #88	; 0x58
 8004bf4:	d14a      	bne.n	8004c8c <_strtoul_l.isra.0+0xec>
 8004bf6:	2610      	movs	r6, #16
 8004bf8:	786c      	ldrb	r4, [r5, #1]
 8004bfa:	3502      	adds	r5, #2
 8004bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004c00:	fbb1 f1f6 	udiv	r1, r1, r6
 8004c04:	2700      	movs	r7, #0
 8004c06:	fb06 fe01 	mul.w	lr, r6, r1
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	ea6f 0e0e 	mvn.w	lr, lr
 8004c10:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8004c14:	2a09      	cmp	r2, #9
 8004c16:	d811      	bhi.n	8004c3c <_strtoul_l.isra.0+0x9c>
 8004c18:	4614      	mov	r4, r2
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	dd1d      	ble.n	8004c5a <_strtoul_l.isra.0+0xba>
 8004c1e:	2f00      	cmp	r7, #0
 8004c20:	db18      	blt.n	8004c54 <_strtoul_l.isra.0+0xb4>
 8004c22:	4281      	cmp	r1, r0
 8004c24:	d316      	bcc.n	8004c54 <_strtoul_l.isra.0+0xb4>
 8004c26:	d101      	bne.n	8004c2c <_strtoul_l.isra.0+0x8c>
 8004c28:	45a6      	cmp	lr, r4
 8004c2a:	db13      	blt.n	8004c54 <_strtoul_l.isra.0+0xb4>
 8004c2c:	2701      	movs	r7, #1
 8004c2e:	fb00 4006 	mla	r0, r0, r6, r4
 8004c32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c36:	e7eb      	b.n	8004c10 <_strtoul_l.isra.0+0x70>
 8004c38:	260a      	movs	r6, #10
 8004c3a:	e7df      	b.n	8004bfc <_strtoul_l.isra.0+0x5c>
 8004c3c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8004c40:	2a19      	cmp	r2, #25
 8004c42:	d801      	bhi.n	8004c48 <_strtoul_l.isra.0+0xa8>
 8004c44:	3c37      	subs	r4, #55	; 0x37
 8004c46:	e7e8      	b.n	8004c1a <_strtoul_l.isra.0+0x7a>
 8004c48:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8004c4c:	2a19      	cmp	r2, #25
 8004c4e:	d804      	bhi.n	8004c5a <_strtoul_l.isra.0+0xba>
 8004c50:	3c57      	subs	r4, #87	; 0x57
 8004c52:	e7e2      	b.n	8004c1a <_strtoul_l.isra.0+0x7a>
 8004c54:	f04f 37ff 	mov.w	r7, #4294967295
 8004c58:	e7eb      	b.n	8004c32 <_strtoul_l.isra.0+0x92>
 8004c5a:	2f00      	cmp	r7, #0
 8004c5c:	da09      	bge.n	8004c72 <_strtoul_l.isra.0+0xd2>
 8004c5e:	2322      	movs	r3, #34	; 0x22
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	f8c8 3000 	str.w	r3, [r8]
 8004c68:	f1ba 0f00 	cmp.w	sl, #0
 8004c6c:	d107      	bne.n	8004c7e <_strtoul_l.isra.0+0xde>
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	b103      	cbz	r3, 8004c76 <_strtoul_l.isra.0+0xd6>
 8004c74:	4240      	negs	r0, r0
 8004c76:	f1ba 0f00 	cmp.w	sl, #0
 8004c7a:	d00c      	beq.n	8004c96 <_strtoul_l.isra.0+0xf6>
 8004c7c:	b127      	cbz	r7, 8004c88 <_strtoul_l.isra.0+0xe8>
 8004c7e:	3d01      	subs	r5, #1
 8004c80:	f8ca 5000 	str.w	r5, [sl]
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	464d      	mov	r5, r9
 8004c8a:	e7f9      	b.n	8004c80 <_strtoul_l.isra.0+0xe0>
 8004c8c:	2430      	movs	r4, #48	; 0x30
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d1b4      	bne.n	8004bfc <_strtoul_l.isra.0+0x5c>
 8004c92:	2608      	movs	r6, #8
 8004c94:	e7b2      	b.n	8004bfc <_strtoul_l.isra.0+0x5c>
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004c9c <_strtoul_r>:
 8004c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c9e:	4c06      	ldr	r4, [pc, #24]	; (8004cb8 <_strtoul_r+0x1c>)
 8004ca0:	4d06      	ldr	r5, [pc, #24]	; (8004cbc <_strtoul_r+0x20>)
 8004ca2:	6824      	ldr	r4, [r4, #0]
 8004ca4:	6a24      	ldr	r4, [r4, #32]
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	bf08      	it	eq
 8004caa:	462c      	moveq	r4, r5
 8004cac:	9400      	str	r4, [sp, #0]
 8004cae:	f7ff ff77 	bl	8004ba0 <_strtoul_l.isra.0>
 8004cb2:	b003      	add	sp, #12
 8004cb4:	bd30      	pop	{r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000160 	.word	0x20000160
 8004cbc:	200001c4 	.word	0x200001c4

08004cc0 <__submore>:
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	d11c      	bne.n	8004d0a <__submore+0x4a>
 8004cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cd4:	f000 f8c4 	bl	8004e60 <_malloc_r>
 8004cd8:	b918      	cbnz	r0, 8004ce2 <__submore+0x22>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce6:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ce8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004cec:	6360      	str	r0, [r4, #52]	; 0x34
 8004cee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004cf2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004cf6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004cfa:	7043      	strb	r3, [r0, #1]
 8004cfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d00:	7003      	strb	r3, [r0, #0]
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	2000      	movs	r0, #0
 8004d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004d0c:	0077      	lsls	r7, r6, #1
 8004d0e:	463a      	mov	r2, r7
 8004d10:	f000 f904 	bl	8004f1c <_realloc_r>
 8004d14:	4605      	mov	r5, r0
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0df      	beq.n	8004cda <__submore+0x1a>
 8004d1a:	eb00 0806 	add.w	r8, r0, r6
 8004d1e:	4601      	mov	r1, r0
 8004d20:	4632      	mov	r2, r6
 8004d22:	4640      	mov	r0, r8
 8004d24:	f7ff f81e 	bl	8003d64 <memcpy>
 8004d28:	f8c4 8000 	str.w	r8, [r4]
 8004d2c:	6365      	str	r5, [r4, #52]	; 0x34
 8004d2e:	63a7      	str	r7, [r4, #56]	; 0x38
 8004d30:	e7e8      	b.n	8004d04 <__submore+0x44>

08004d32 <__locale_ctype_ptr_l>:
 8004d32:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004d36:	4770      	bx	lr

08004d38 <__locale_ctype_ptr>:
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <__locale_ctype_ptr+0x14>)
 8004d3a:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <__locale_ctype_ptr+0x18>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf08      	it	eq
 8004d44:	4613      	moveq	r3, r2
 8004d46:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004d4a:	4770      	bx	lr
 8004d4c:	20000160 	.word	0x20000160
 8004d50:	200001c4 	.word	0x200001c4

08004d54 <__ascii_mbtowc>:
 8004d54:	b082      	sub	sp, #8
 8004d56:	b901      	cbnz	r1, 8004d5a <__ascii_mbtowc+0x6>
 8004d58:	a901      	add	r1, sp, #4
 8004d5a:	b142      	cbz	r2, 8004d6e <__ascii_mbtowc+0x1a>
 8004d5c:	b14b      	cbz	r3, 8004d72 <__ascii_mbtowc+0x1e>
 8004d5e:	7813      	ldrb	r3, [r2, #0]
 8004d60:	600b      	str	r3, [r1, #0]
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	1c10      	adds	r0, r2, #0
 8004d66:	bf18      	it	ne
 8004d68:	2001      	movne	r0, #1
 8004d6a:	b002      	add	sp, #8
 8004d6c:	4770      	bx	lr
 8004d6e:	4610      	mov	r0, r2
 8004d70:	e7fb      	b.n	8004d6a <__ascii_mbtowc+0x16>
 8004d72:	f06f 0001 	mvn.w	r0, #1
 8004d76:	e7f8      	b.n	8004d6a <__ascii_mbtowc+0x16>

08004d78 <memchr>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	b2c9      	uxtb	r1, r1
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4290      	cmp	r0, r2
 8004d80:	4603      	mov	r3, r0
 8004d82:	d101      	bne.n	8004d88 <memchr+0x10>
 8004d84:	2000      	movs	r0, #0
 8004d86:	bd10      	pop	{r4, pc}
 8004d88:	781c      	ldrb	r4, [r3, #0]
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	428c      	cmp	r4, r1
 8004d8e:	d1f6      	bne.n	8004d7e <memchr+0x6>
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <memmove>:
 8004d94:	4288      	cmp	r0, r1
 8004d96:	b510      	push	{r4, lr}
 8004d98:	eb01 0302 	add.w	r3, r1, r2
 8004d9c:	d803      	bhi.n	8004da6 <memmove+0x12>
 8004d9e:	1e42      	subs	r2, r0, #1
 8004da0:	4299      	cmp	r1, r3
 8004da2:	d10c      	bne.n	8004dbe <memmove+0x2a>
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	4298      	cmp	r0, r3
 8004da8:	d2f9      	bcs.n	8004d9e <memmove+0xa>
 8004daa:	1881      	adds	r1, r0, r2
 8004dac:	1ad2      	subs	r2, r2, r3
 8004dae:	42d3      	cmn	r3, r2
 8004db0:	d100      	bne.n	8004db4 <memmove+0x20>
 8004db2:	bd10      	pop	{r4, pc}
 8004db4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004db8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004dbc:	e7f7      	b.n	8004dae <memmove+0x1a>
 8004dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dc6:	e7eb      	b.n	8004da0 <memmove+0xc>

08004dc8 <_free_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4605      	mov	r5, r0
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d043      	beq.n	8004e58 <_free_r+0x90>
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f0c      	subs	r4, r1, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfb8      	it	lt
 8004dda:	18e4      	addlt	r4, r4, r3
 8004ddc:	f000 f8e1 	bl	8004fa2 <__malloc_lock>
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <_free_r+0x94>)
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	4610      	mov	r0, r2
 8004de6:	b933      	cbnz	r3, 8004df6 <_free_r+0x2e>
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6014      	str	r4, [r2, #0]
 8004dec:	4628      	mov	r0, r5
 8004dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df2:	f000 b8d7 	b.w	8004fa4 <__malloc_unlock>
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d90b      	bls.n	8004e12 <_free_r+0x4a>
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	1862      	adds	r2, r4, r1
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf01      	itttt	eq
 8004e02:	681a      	ldreq	r2, [r3, #0]
 8004e04:	685b      	ldreq	r3, [r3, #4]
 8004e06:	1852      	addeq	r2, r2, r1
 8004e08:	6022      	streq	r2, [r4, #0]
 8004e0a:	6063      	str	r3, [r4, #4]
 8004e0c:	6004      	str	r4, [r0, #0]
 8004e0e:	e7ed      	b.n	8004dec <_free_r+0x24>
 8004e10:	4613      	mov	r3, r2
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	b10a      	cbz	r2, 8004e1a <_free_r+0x52>
 8004e16:	42a2      	cmp	r2, r4
 8004e18:	d9fa      	bls.n	8004e10 <_free_r+0x48>
 8004e1a:	6819      	ldr	r1, [r3, #0]
 8004e1c:	1858      	adds	r0, r3, r1
 8004e1e:	42a0      	cmp	r0, r4
 8004e20:	d10b      	bne.n	8004e3a <_free_r+0x72>
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	4401      	add	r1, r0
 8004e26:	1858      	adds	r0, r3, r1
 8004e28:	4282      	cmp	r2, r0
 8004e2a:	6019      	str	r1, [r3, #0]
 8004e2c:	d1de      	bne.n	8004dec <_free_r+0x24>
 8004e2e:	6810      	ldr	r0, [r2, #0]
 8004e30:	6852      	ldr	r2, [r2, #4]
 8004e32:	4401      	add	r1, r0
 8004e34:	6019      	str	r1, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	e7d8      	b.n	8004dec <_free_r+0x24>
 8004e3a:	d902      	bls.n	8004e42 <_free_r+0x7a>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	e7d4      	b.n	8004dec <_free_r+0x24>
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	1821      	adds	r1, r4, r0
 8004e46:	428a      	cmp	r2, r1
 8004e48:	bf01      	itttt	eq
 8004e4a:	6811      	ldreq	r1, [r2, #0]
 8004e4c:	6852      	ldreq	r2, [r2, #4]
 8004e4e:	1809      	addeq	r1, r1, r0
 8004e50:	6021      	streq	r1, [r4, #0]
 8004e52:	6062      	str	r2, [r4, #4]
 8004e54:	605c      	str	r4, [r3, #4]
 8004e56:	e7c9      	b.n	8004dec <_free_r+0x24>
 8004e58:	bd38      	pop	{r3, r4, r5, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000694 	.word	0x20000694

08004e60 <_malloc_r>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	1ccd      	adds	r5, r1, #3
 8004e64:	f025 0503 	bic.w	r5, r5, #3
 8004e68:	3508      	adds	r5, #8
 8004e6a:	2d0c      	cmp	r5, #12
 8004e6c:	bf38      	it	cc
 8004e6e:	250c      	movcc	r5, #12
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	4606      	mov	r6, r0
 8004e74:	db01      	blt.n	8004e7a <_malloc_r+0x1a>
 8004e76:	42a9      	cmp	r1, r5
 8004e78:	d903      	bls.n	8004e82 <_malloc_r+0x22>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	f000 f88e 	bl	8004fa2 <__malloc_lock>
 8004e86:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <_malloc_r+0xb4>)
 8004e88:	6814      	ldr	r4, [r2, #0]
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	b991      	cbnz	r1, 8004eb4 <_malloc_r+0x54>
 8004e8e:	4c22      	ldr	r4, [pc, #136]	; (8004f18 <_malloc_r+0xb8>)
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	b91b      	cbnz	r3, 8004e9c <_malloc_r+0x3c>
 8004e94:	4630      	mov	r0, r6
 8004e96:	f000 f867 	bl	8004f68 <_sbrk_r>
 8004e9a:	6020      	str	r0, [r4, #0]
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f000 f862 	bl	8004f68 <_sbrk_r>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d126      	bne.n	8004ef6 <_malloc_r+0x96>
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	4630      	mov	r0, r6
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	f000 f879 	bl	8004fa4 <__malloc_unlock>
 8004eb2:	e7e4      	b.n	8004e7e <_malloc_r+0x1e>
 8004eb4:	680b      	ldr	r3, [r1, #0]
 8004eb6:	1b5b      	subs	r3, r3, r5
 8004eb8:	d41a      	bmi.n	8004ef0 <_malloc_r+0x90>
 8004eba:	2b0b      	cmp	r3, #11
 8004ebc:	d90f      	bls.n	8004ede <_malloc_r+0x7e>
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	18cc      	adds	r4, r1, r3
 8004ec2:	50cd      	str	r5, [r1, r3]
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f000 f86d 	bl	8004fa4 <__malloc_unlock>
 8004eca:	f104 000b 	add.w	r0, r4, #11
 8004ece:	1d23      	adds	r3, r4, #4
 8004ed0:	f020 0007 	bic.w	r0, r0, #7
 8004ed4:	1ac3      	subs	r3, r0, r3
 8004ed6:	d01b      	beq.n	8004f10 <_malloc_r+0xb0>
 8004ed8:	425a      	negs	r2, r3
 8004eda:	50e2      	str	r2, [r4, r3]
 8004edc:	bd70      	pop	{r4, r5, r6, pc}
 8004ede:	428c      	cmp	r4, r1
 8004ee0:	bf0b      	itete	eq
 8004ee2:	6863      	ldreq	r3, [r4, #4]
 8004ee4:	684b      	ldrne	r3, [r1, #4]
 8004ee6:	6013      	streq	r3, [r2, #0]
 8004ee8:	6063      	strne	r3, [r4, #4]
 8004eea:	bf18      	it	ne
 8004eec:	460c      	movne	r4, r1
 8004eee:	e7e9      	b.n	8004ec4 <_malloc_r+0x64>
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	6849      	ldr	r1, [r1, #4]
 8004ef4:	e7ca      	b.n	8004e8c <_malloc_r+0x2c>
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d005      	beq.n	8004f0c <_malloc_r+0xac>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f830 	bl	8004f68 <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d0cd      	beq.n	8004ea8 <_malloc_r+0x48>
 8004f0c:	6025      	str	r5, [r4, #0]
 8004f0e:	e7d9      	b.n	8004ec4 <_malloc_r+0x64>
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
 8004f12:	bf00      	nop
 8004f14:	20000694 	.word	0x20000694
 8004f18:	20000698 	.word	0x20000698

08004f1c <_realloc_r>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	4607      	mov	r7, r0
 8004f20:	4614      	mov	r4, r2
 8004f22:	460e      	mov	r6, r1
 8004f24:	b921      	cbnz	r1, 8004f30 <_realloc_r+0x14>
 8004f26:	4611      	mov	r1, r2
 8004f28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f2c:	f7ff bf98 	b.w	8004e60 <_malloc_r>
 8004f30:	b922      	cbnz	r2, 8004f3c <_realloc_r+0x20>
 8004f32:	f7ff ff49 	bl	8004dc8 <_free_r>
 8004f36:	4625      	mov	r5, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3c:	f000 f833 	bl	8004fa6 <_malloc_usable_size_r>
 8004f40:	4284      	cmp	r4, r0
 8004f42:	d90f      	bls.n	8004f64 <_realloc_r+0x48>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4638      	mov	r0, r7
 8004f48:	f7ff ff8a 	bl	8004e60 <_malloc_r>
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d0f2      	beq.n	8004f38 <_realloc_r+0x1c>
 8004f52:	4631      	mov	r1, r6
 8004f54:	4622      	mov	r2, r4
 8004f56:	f7fe ff05 	bl	8003d64 <memcpy>
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	f7ff ff33 	bl	8004dc8 <_free_r>
 8004f62:	e7e9      	b.n	8004f38 <_realloc_r+0x1c>
 8004f64:	4635      	mov	r5, r6
 8004f66:	e7e7      	b.n	8004f38 <_realloc_r+0x1c>

08004f68 <_sbrk_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4c05      	ldr	r4, [pc, #20]	; (8004f84 <_sbrk_r+0x1c>)
 8004f6e:	4605      	mov	r5, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	f000 f820 	bl	8004fb8 <_sbrk>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_sbrk_r+0x1a>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_sbrk_r+0x1a>
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	20001984 	.word	0x20001984

08004f88 <__ascii_wctomb>:
 8004f88:	b149      	cbz	r1, 8004f9e <__ascii_wctomb+0x16>
 8004f8a:	2aff      	cmp	r2, #255	; 0xff
 8004f8c:	bf8b      	itete	hi
 8004f8e:	238a      	movhi	r3, #138	; 0x8a
 8004f90:	700a      	strbls	r2, [r1, #0]
 8004f92:	6003      	strhi	r3, [r0, #0]
 8004f94:	2001      	movls	r0, #1
 8004f96:	bf88      	it	hi
 8004f98:	f04f 30ff 	movhi.w	r0, #4294967295
 8004f9c:	4770      	bx	lr
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	4770      	bx	lr

08004fa2 <__malloc_lock>:
 8004fa2:	4770      	bx	lr

08004fa4 <__malloc_unlock>:
 8004fa4:	4770      	bx	lr

08004fa6 <_malloc_usable_size_r>:
 8004fa6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f1a0 0004 	sub.w	r0, r0, #4
 8004fb0:	bfbc      	itt	lt
 8004fb2:	580b      	ldrlt	r3, [r1, r0]
 8004fb4:	18c0      	addlt	r0, r0, r3
 8004fb6:	4770      	bx	lr

08004fb8 <_sbrk>:
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <_sbrk+0x14>)
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	b909      	cbnz	r1, 8004fc4 <_sbrk+0xc>
 8004fc0:	4903      	ldr	r1, [pc, #12]	; (8004fd0 <_sbrk+0x18>)
 8004fc2:	6019      	str	r1, [r3, #0]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	4402      	add	r2, r0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	4770      	bx	lr
 8004fcc:	2000069c 	.word	0x2000069c
 8004fd0:	20001988 	.word	0x20001988

08004fd4 <_init>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr

08004fe0 <_fini>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr
