
WeatherBlockRT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00001afc  20000000  080062ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001654  20001afc  08007da8  00021afc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003150  08007da8  00023150  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00021afc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002c972  00000000  00000000  00021b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000579f  00000000  00000000  0004e497  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ec86  00000000  00000000  00053c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012e8  00000000  00000000  000628c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001be0  00000000  00000000  00063ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ccde  00000000  00000000  00065788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006430  00000000  00000000  00072466  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00078896  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004110  00000000  00000000  00078914  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000df  00000000  00000000  0007ca24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20001afc 	.word	0x20001afc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f5c 	.word	0x08005f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20001b00 	.word	0x20001b00
 8000148:	08005f5c 	.word	0x08005f5c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000170:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <HAL_InitTick+0x3c>)
{
 8000174:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000176:	7818      	ldrb	r0, [r3, #0]
 8000178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <HAL_InitTick+0x40>)
 8000182:	6810      	ldr	r0, [r2, #0]
 8000184:	fbb0 f0f3 	udiv	r0, r0, r3
 8000188:	f000 f89e 	bl	80002c8 <HAL_SYSTICK_Config>
 800018c:	4604      	mov	r4, r0
 800018e:	b958      	cbnz	r0, 80001a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000190:	2d0f      	cmp	r5, #15
 8000192:	d809      	bhi.n	80001a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000194:	4602      	mov	r2, r0
 8000196:	4629      	mov	r1, r5
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 f854 	bl	8000248 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <HAL_InitTick+0x44>)
 80001a2:	4620      	mov	r0, r4
 80001a4:	601d      	str	r5, [r3, #0]
 80001a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80001a8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001aa:	bd38      	pop	{r3, r4, r5, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	200018e4 	.word	0x200018e4
 80001b4:	20000004 	.word	0x20000004

080001b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <HAL_Init+0x20>)
{
 80001ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c6:	f000 f82d 	bl	8000224 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ca:	2000      	movs	r0, #0
 80001cc:	f7ff ffd0 	bl	8000170 <HAL_InitTick>
  HAL_MspInit();
 80001d0:	f004 f8f4 	bl	80043bc <HAL_MspInit>
}
 80001d4:	2000      	movs	r0, #0
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	40022000 	.word	0x40022000

080001dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <HAL_IncTick+0x10>)
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_IncTick+0x14>)
 80001e0:	6811      	ldr	r1, [r2, #0]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	440b      	add	r3, r1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	20001e60 	.word	0x20001e60
 80001f0:	20000000 	.word	0x20000000

080001f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f4:	4b01      	ldr	r3, [pc, #4]	; (80001fc <HAL_GetTick+0x8>)
 80001f6:	6818      	ldr	r0, [r3, #0]
}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20001e60 	.word	0x20001e60

08000200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000200:	b538      	push	{r3, r4, r5, lr}
 8000202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000204:	f7ff fff6 	bl	80001f4 <HAL_GetTick>
 8000208:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800020a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800020c:	bf1e      	ittt	ne
 800020e:	4b04      	ldrne	r3, [pc, #16]	; (8000220 <HAL_Delay+0x20>)
 8000210:	781b      	ldrbne	r3, [r3, #0]
 8000212:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000214:	f7ff ffee 	bl	80001f4 <HAL_GetTick>
 8000218:	1b40      	subs	r0, r0, r5
 800021a:	4284      	cmp	r4, r0
 800021c:	d8fa      	bhi.n	8000214 <HAL_Delay+0x14>
  {
  }
}
 800021e:	bd38      	pop	{r3, r4, r5, pc}
 8000220:	20000000 	.word	0x20000000

08000224 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000224:	4a07      	ldr	r2, [pc, #28]	; (8000244 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000226:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800022a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000232:	041b      	lsls	r3, r3, #16
 8000234:	0c1b      	lsrs	r3, r3, #16
 8000236:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800023e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000240:	60d3      	str	r3, [r2, #12]
 8000242:	4770      	bx	lr
 8000244:	e000ed00 	.word	0xe000ed00

08000248 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800024a:	b530      	push	{r4, r5, lr}
 800024c:	68dc      	ldr	r4, [r3, #12]
 800024e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000252:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000256:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000258:	2b04      	cmp	r3, #4
 800025a:	bf28      	it	cs
 800025c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000264:	bf98      	it	ls
 8000266:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	fa05 f303 	lsl.w	r3, r5, r3
 800026c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf88      	it	hi
 8000272:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	4019      	ands	r1, r3
 8000276:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000278:	fa05 f404 	lsl.w	r4, r5, r4
 800027c:	3c01      	subs	r4, #1
 800027e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000280:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000282:	ea42 0201 	orr.w	r2, r2, r1
 8000286:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	bfaf      	iteee	ge
 800028c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4b06      	ldrlt	r3, [pc, #24]	; (80002ac <HAL_NVIC_SetPriority+0x64>)
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	bfa5      	ittet	ge
 800029a:	b2d2      	uxtbge	r2, r2
 800029c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000ed14 	.word	0xe000ed14

080002b0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b0:	2301      	movs	r3, #1
 80002b2:	0942      	lsrs	r2, r0, #5
 80002b4:	f000 001f 	and.w	r0, r0, #31
 80002b8:	fa03 f000 	lsl.w	r0, r3, r0
 80002bc:	4b01      	ldr	r3, [pc, #4]	; (80002c4 <HAL_NVIC_EnableIRQ+0x14>)
 80002be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002c8:	3801      	subs	r0, #1
 80002ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ce:	d20a      	bcs.n	80002e6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e010 	.word	0xe000e010
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002f6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	bf0c      	ite	eq
 80002fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000300:	f022 0204 	bicne.w	r2, r2, #4
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	4770      	bx	lr
 8000308:	e000e010 	.word	0xe000e010

0800030c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800030c:	4770      	bx	lr

0800030e <HAL_SYSTICK_IRQHandler>:
{
 800030e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000310:	f7ff fffc 	bl	800030c <HAL_SYSTICK_Callback>
 8000314:	bd08      	pop	{r3, pc}
	...

08000318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800031c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800031e:	4616      	mov	r6, r2
 8000320:	4b65      	ldr	r3, [pc, #404]	; (80004b8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000322:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004c8 <HAL_GPIO_Init+0x1b0>
 8000326:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004cc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800032a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800032e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000330:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000334:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000338:	45a0      	cmp	r8, r4
 800033a:	d17f      	bne.n	800043c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800033c:	684d      	ldr	r5, [r1, #4]
 800033e:	2d12      	cmp	r5, #18
 8000340:	f000 80af 	beq.w	80004a2 <HAL_GPIO_Init+0x18a>
 8000344:	f200 8088 	bhi.w	8000458 <HAL_GPIO_Init+0x140>
 8000348:	2d02      	cmp	r5, #2
 800034a:	f000 80a7 	beq.w	800049c <HAL_GPIO_Init+0x184>
 800034e:	d87c      	bhi.n	800044a <HAL_GPIO_Init+0x132>
 8000350:	2d00      	cmp	r5, #0
 8000352:	f000 808e 	beq.w	8000472 <HAL_GPIO_Init+0x15a>
 8000356:	2d01      	cmp	r5, #1
 8000358:	f000 809e 	beq.w	8000498 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800035c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000360:	2cff      	cmp	r4, #255	; 0xff
 8000362:	bf93      	iteet	ls
 8000364:	4682      	movls	sl, r0
 8000366:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800036a:	3d08      	subhi	r5, #8
 800036c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000370:	bf92      	itee	ls
 8000372:	00b5      	lslls	r5, r6, #2
 8000374:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000378:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800037a:	fa09 f805 	lsl.w	r8, r9, r5
 800037e:	ea2b 0808 	bic.w	r8, fp, r8
 8000382:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000386:	bf88      	it	hi
 8000388:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800038c:	ea48 0505 	orr.w	r5, r8, r5
 8000390:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000394:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000398:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800039c:	d04e      	beq.n	800043c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800039e:	4d47      	ldr	r5, [pc, #284]	; (80004bc <HAL_GPIO_Init+0x1a4>)
 80003a0:	4f46      	ldr	r7, [pc, #280]	; (80004bc <HAL_GPIO_Init+0x1a4>)
 80003a2:	69ad      	ldr	r5, [r5, #24]
 80003a4:	f026 0803 	bic.w	r8, r6, #3
 80003a8:	f045 0501 	orr.w	r5, r5, #1
 80003ac:	61bd      	str	r5, [r7, #24]
 80003ae:	69bd      	ldr	r5, [r7, #24]
 80003b0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003b4:	f005 0501 	and.w	r5, r5, #1
 80003b8:	9501      	str	r5, [sp, #4]
 80003ba:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003be:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003c8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003cc:	fa09 f90b 	lsl.w	r9, r9, fp
 80003d0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003d4:	4d3a      	ldr	r5, [pc, #232]	; (80004c0 <HAL_GPIO_Init+0x1a8>)
 80003d6:	42a8      	cmp	r0, r5
 80003d8:	d068      	beq.n	80004ac <HAL_GPIO_Init+0x194>
 80003da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003de:	42a8      	cmp	r0, r5
 80003e0:	d066      	beq.n	80004b0 <HAL_GPIO_Init+0x198>
 80003e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e6:	42a8      	cmp	r0, r5
 80003e8:	d064      	beq.n	80004b4 <HAL_GPIO_Init+0x19c>
 80003ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ee:	42a8      	cmp	r0, r5
 80003f0:	bf0c      	ite	eq
 80003f2:	2503      	moveq	r5, #3
 80003f4:	2504      	movne	r5, #4
 80003f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003fa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003fe:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000402:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000404:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000408:	bf14      	ite	ne
 800040a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800040c:	43a5      	biceq	r5, r4
 800040e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000410:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000412:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000416:	bf14      	ite	ne
 8000418:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800041a:	43a5      	biceq	r5, r4
 800041c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800041e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000420:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000424:	bf14      	ite	ne
 8000426:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000428:	43a5      	biceq	r5, r4
 800042a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800042c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800042e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000432:	bf14      	ite	ne
 8000434:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000436:	ea25 0404 	biceq.w	r4, r5, r4
 800043a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043c:	3601      	adds	r6, #1
 800043e:	2e10      	cmp	r6, #16
 8000440:	f47f af73 	bne.w	800032a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000444:	b003      	add	sp, #12
 8000446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800044a:	2d03      	cmp	r5, #3
 800044c:	d022      	beq.n	8000494 <HAL_GPIO_Init+0x17c>
 800044e:	2d11      	cmp	r5, #17
 8000450:	d184      	bne.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000452:	68ca      	ldr	r2, [r1, #12]
 8000454:	3204      	adds	r2, #4
          break;
 8000456:	e781      	b.n	800035c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000458:	4f1a      	ldr	r7, [pc, #104]	; (80004c4 <HAL_GPIO_Init+0x1ac>)
 800045a:	42bd      	cmp	r5, r7
 800045c:	d009      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800045e:	d812      	bhi.n	8000486 <HAL_GPIO_Init+0x16e>
 8000460:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004d0 <HAL_GPIO_Init+0x1b8>
 8000464:	454d      	cmp	r5, r9
 8000466:	d004      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 8000468:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800046c:	454d      	cmp	r5, r9
 800046e:	f47f af75 	bne.w	800035c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000472:	688a      	ldr	r2, [r1, #8]
 8000474:	b1c2      	cbz	r2, 80004a8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000476:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000478:	bf0c      	ite	eq
 800047a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800047e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000482:	2208      	movs	r2, #8
 8000484:	e76a      	b.n	800035c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000486:	4575      	cmp	r5, lr
 8000488:	d0f3      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800048a:	4565      	cmp	r5, ip
 800048c:	d0f1      	beq.n	8000472 <HAL_GPIO_Init+0x15a>
 800048e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004d4 <HAL_GPIO_Init+0x1bc>
 8000492:	e7eb      	b.n	800046c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000494:	2200      	movs	r2, #0
 8000496:	e761      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000498:	68ca      	ldr	r2, [r1, #12]
          break;
 800049a:	e75f      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800049c:	68ca      	ldr	r2, [r1, #12]
 800049e:	3208      	adds	r2, #8
          break;
 80004a0:	e75c      	b.n	800035c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004a2:	68ca      	ldr	r2, [r1, #12]
 80004a4:	320c      	adds	r2, #12
          break;
 80004a6:	e759      	b.n	800035c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004a8:	2204      	movs	r2, #4
 80004aa:	e757      	b.n	800035c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ac:	2500      	movs	r5, #0
 80004ae:	e7a2      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b0:	2501      	movs	r5, #1
 80004b2:	e7a0      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b4:	2502      	movs	r5, #2
 80004b6:	e79e      	b.n	80003f6 <HAL_GPIO_Init+0xde>
 80004b8:	40010400 	.word	0x40010400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800
 80004c4:	10210000 	.word	0x10210000
 80004c8:	10310000 	.word	0x10310000
 80004cc:	10320000 	.word	0x10320000
 80004d0:	10110000 	.word	0x10110000
 80004d4:	10220000 	.word	0x10220000

080004d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004d8:	b10a      	cbz	r2, 80004de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004da:	6101      	str	r1, [r0, #16]
 80004dc:	4770      	bx	lr
 80004de:	0409      	lsls	r1, r1, #16
 80004e0:	e7fb      	b.n	80004da <HAL_GPIO_WritePin+0x2>

080004e2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004e2:	6802      	ldr	r2, [r0, #0]
 80004e4:	6953      	ldr	r3, [r2, #20]
 80004e6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004ea:	d00d      	beq.n	8000508 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004ec:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004f0:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004f2:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80004f4:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004f6:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000500:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
 8000506:	4770      	bx	lr
  }
  return HAL_OK;
 8000508:	4618      	mov	r0, r3
}
 800050a:	4770      	bx	lr

0800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800050c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000510:	4604      	mov	r4, r0
 8000512:	4617      	mov	r7, r2
 8000514:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000516:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800051a:	b28e      	uxth	r6, r1
 800051c:	6825      	ldr	r5, [r4, #0]
 800051e:	f1b8 0f01 	cmp.w	r8, #1
 8000522:	bf0c      	ite	eq
 8000524:	696b      	ldreq	r3, [r5, #20]
 8000526:	69ab      	ldrne	r3, [r5, #24]
 8000528:	ea36 0303 	bics.w	r3, r6, r3
 800052c:	bf14      	ite	ne
 800052e:	2001      	movne	r0, #1
 8000530:	2000      	moveq	r0, #0
 8000532:	b908      	cbnz	r0, 8000538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000538:	696b      	ldr	r3, [r5, #20]
 800053a:	055a      	lsls	r2, r3, #21
 800053c:	d512      	bpl.n	8000564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800053e:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000540:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000546:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000548:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800054c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800054e:	2304      	movs	r3, #4
 8000550:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000552:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000556:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000558:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800055c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000564:	1c7b      	adds	r3, r7, #1
 8000566:	d0d9      	beq.n	800051c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000568:	b94f      	cbnz	r7, 800057e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800056a:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800056c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800056e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000570:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000574:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000578:	2003      	movs	r0, #3
 800057a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800057e:	f7ff fe39 	bl	80001f4 <HAL_GetTick>
 8000582:	eba0 0009 	sub.w	r0, r0, r9
 8000586:	4287      	cmp	r7, r0
 8000588:	d2c8      	bcs.n	800051c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800058a:	e7ee      	b.n	800056a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800058c <I2C_WaitOnFlagUntilTimeout>:
{
 800058c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000590:	4604      	mov	r4, r0
 8000592:	4690      	mov	r8, r2
 8000594:	461f      	mov	r7, r3
 8000596:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000598:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800059c:	b28d      	uxth	r5, r1
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	f1b9 0f01 	cmp.w	r9, #1
 80005a4:	bf0c      	ite	eq
 80005a6:	695b      	ldreq	r3, [r3, #20]
 80005a8:	699b      	ldrne	r3, [r3, #24]
 80005aa:	ea35 0303 	bics.w	r3, r5, r3
 80005ae:	bf0c      	ite	eq
 80005b0:	2301      	moveq	r3, #1
 80005b2:	2300      	movne	r3, #0
 80005b4:	4543      	cmp	r3, r8
 80005b6:	d002      	beq.n	80005be <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80005b8:	2000      	movs	r0, #0
}
 80005ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80005be:	1c7b      	adds	r3, r7, #1
 80005c0:	d0ed      	beq.n	800059e <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005c2:	b95f      	cbnz	r7, 80005dc <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005c4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80005c6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80005c8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80005d2:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80005d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005dc:	f7ff fe0a 	bl	80001f4 <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	4287      	cmp	r7, r0
 80005e4:	d2db      	bcs.n	800059e <I2C_WaitOnFlagUntilTimeout+0x12>
 80005e6:	e7ed      	b.n	80005c4 <I2C_WaitOnFlagUntilTimeout+0x38>

080005e8 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4604      	mov	r4, r0
 80005ec:	460d      	mov	r5, r1
 80005ee:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	d501      	bpl.n	80005fc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80005f8:	2000      	movs	r0, #0
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005fc:	4620      	mov	r0, r4
 80005fe:	f7ff ff70 	bl	80004e2 <I2C_IsAcknowledgeFailed>
 8000602:	b9a8      	cbnz	r0, 8000630 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	d0f3      	beq.n	80005f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000608:	b965      	cbnz	r5, 8000624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800060c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000614:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000616:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000618:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800061a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800061e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000622:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000624:	f7ff fde6 	bl	80001f4 <HAL_GetTick>
 8000628:	1b80      	subs	r0, r0, r6
 800062a:	4285      	cmp	r5, r0
 800062c:	d2e0      	bcs.n	80005f0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800062e:	e7ec      	b.n	800060a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000630:	2001      	movs	r0, #1
}
 8000632:	bd70      	pop	{r4, r5, r6, pc}

08000634 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	4604      	mov	r4, r0
 8000638:	460d      	mov	r5, r1
 800063a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	6943      	ldr	r3, [r0, #20]
 8000640:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000644:	d001      	beq.n	800064a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000646:	2000      	movs	r0, #0
}
 8000648:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800064a:	6942      	ldr	r2, [r0, #20]
 800064c:	06d2      	lsls	r2, r2, #27
 800064e:	d50b      	bpl.n	8000668 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000650:	f06f 0210 	mvn.w	r2, #16
 8000654:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8000656:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000658:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800065a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800065e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000660:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000662:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000666:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000668:	b95d      	cbnz	r5, 8000682 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800066a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800066c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800066e:	f043 0320 	orr.w	r3, r3, #32
 8000672:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000674:	2320      	movs	r3, #32
 8000676:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800067a:	2300      	movs	r3, #0
 800067c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000680:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000682:	f7ff fdb7 	bl	80001f4 <HAL_GetTick>
 8000686:	1b80      	subs	r0, r0, r6
 8000688:	4285      	cmp	r5, r0
 800068a:	d2d7      	bcs.n	800063c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800068c:	e7ed      	b.n	800066a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800068e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800068e:	b570      	push	{r4, r5, r6, lr}
 8000690:	4604      	mov	r4, r0
 8000692:	460d      	mov	r5, r1
 8000694:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	075b      	lsls	r3, r3, #29
 800069c:	d501      	bpl.n	80006a2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800069e:	2000      	movs	r0, #0
 80006a0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006a2:	4620      	mov	r0, r4
 80006a4:	f7ff ff1d 	bl	80004e2 <I2C_IsAcknowledgeFailed>
 80006a8:	b9a8      	cbnz	r0, 80006d6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80006aa:	1c6a      	adds	r2, r5, #1
 80006ac:	d0f3      	beq.n	8000696 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006ae:	b965      	cbnz	r5, 80006ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80006b2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80006ba:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80006bc:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80006be:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80006c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80006c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006ca:	f7ff fd93 	bl	80001f4 <HAL_GetTick>
 80006ce:	1b80      	subs	r0, r0, r6
 80006d0:	4285      	cmp	r5, r0
 80006d2:	d2e0      	bcs.n	8000696 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80006d4:	e7ec      	b.n	80006b0 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
}
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080006dc <HAL_I2C_Init>:
{
 80006dc:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80006de:	4604      	mov	r4, r0
 80006e0:	b908      	cbnz	r0, 80006e6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80006e2:	2001      	movs	r0, #1
 80006e4:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80006e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80006ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006ee:	b91b      	cbnz	r3, 80006f8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80006f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80006f4:	f003 fea8 	bl	8004448 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006f8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006fa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000700:	6813      	ldr	r3, [r2, #0]
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000708:	f001 f91c 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800070c:	6863      	ldr	r3, [r4, #4]
 800070e:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <HAL_I2C_Init+0xf0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d830      	bhi.n	8000776 <HAL_I2C_Init+0x9a>
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <HAL_I2C_Init+0xf4>)
 8000716:	4290      	cmp	r0, r2
 8000718:	d9e3      	bls.n	80006e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800071a:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800071c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800071e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000722:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000724:	3201      	adds	r2, #1
 8000726:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <HAL_I2C_Init+0xf0>)
 800072a:	3801      	subs	r0, #1
 800072c:	4293      	cmp	r3, r2
 800072e:	d832      	bhi.n	8000796 <HAL_I2C_Init+0xba>
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fbb0 f0f3 	udiv	r0, r0, r3
 8000736:	1c43      	adds	r3, r0, #1
 8000738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073c:	2b04      	cmp	r3, #4
 800073e:	bf38      	it	cc
 8000740:	2304      	movcc	r3, #4
 8000742:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000744:	6a22      	ldr	r2, [r4, #32]
 8000746:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000748:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800074a:	4313      	orrs	r3, r2
 800074c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800074e:	68e2      	ldr	r2, [r4, #12]
 8000750:	6923      	ldr	r3, [r4, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000756:	69a2      	ldr	r2, [r4, #24]
 8000758:	6963      	ldr	r3, [r4, #20]
 800075a:	4313      	orrs	r3, r2
 800075c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000766:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000768:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800076a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800076e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000770:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000774:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_I2C_Init+0xfc>)
 8000778:	4290      	cmp	r0, r2
 800077a:	d9b2      	bls.n	80006e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800077c:	4d15      	ldr	r5, [pc, #84]	; (80007d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800077e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000782:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000786:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000788:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800078a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800078c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000790:	fbb2 f2f5 	udiv	r2, r2, r5
 8000794:	e7c6      	b.n	8000724 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000796:	68a2      	ldr	r2, [r4, #8]
 8000798:	b952      	cbnz	r2, 80007b0 <HAL_I2C_Init+0xd4>
 800079a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800079e:	fbb0 f0f3 	udiv	r0, r0, r3
 80007a2:	1c43      	adds	r3, r0, #1
 80007a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a8:	b16b      	cbz	r3, 80007c6 <HAL_I2C_Init+0xea>
 80007aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ae:	e7c8      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007b0:	2219      	movs	r2, #25
 80007b2:	4353      	muls	r3, r2
 80007b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007b8:	1c43      	adds	r3, r0, #1
 80007ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007be:	b113      	cbz	r3, 80007c6 <HAL_I2C_Init+0xea>
 80007c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c4:	e7bd      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e7bb      	b.n	8000742 <HAL_I2C_Init+0x66>
 80007ca:	bf00      	nop
 80007cc:	000186a0 	.word	0x000186a0
 80007d0:	001e847f 	.word	0x001e847f
 80007d4:	000f4240 	.word	0x000f4240
 80007d8:	003d08ff 	.word	0x003d08ff

080007dc <HAL_I2C_Master_Transmit>:
{
 80007dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	461f      	mov	r7, r3
 80007e4:	460d      	mov	r5, r1
 80007e6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80007e8:	f7ff fd04 	bl	80001f4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80007f0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007f2:	2b20      	cmp	r3, #32
 80007f4:	d004      	beq.n	8000800 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80007f6:	2502      	movs	r5, #2
}
 80007f8:	4628      	mov	r0, r5
 80007fa:	b004      	add	sp, #16
 80007fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000800:	9000      	str	r0, [sp, #0]
 8000802:	2319      	movs	r3, #25
 8000804:	2201      	movs	r2, #1
 8000806:	495d      	ldr	r1, [pc, #372]	; (800097c <HAL_I2C_Master_Transmit+0x1a0>)
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff febf 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 800080e:	2800      	cmp	r0, #0
 8000810:	d1f1      	bne.n	80007f6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000812:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000816:	2b01      	cmp	r3, #1
 8000818:	d0ed      	beq.n	80007f6 <HAL_I2C_Master_Transmit+0x1a>
 800081a:	2301      	movs	r3, #1
 800081c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000826:	bf5e      	ittt	pl
 8000828:	681a      	ldrpl	r2, [r3, #0]
 800082a:	f042 0201 	orrpl.w	r2, r2, #1
 800082e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000836:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000838:	2221      	movs	r2, #33	; 0x21
 800083a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800083e:	2210      	movs	r2, #16
 8000840:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000844:	2200      	movs	r2, #0
 8000846:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000848:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800084c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800084e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000850:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000852:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000856:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000858:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800085a:	2a04      	cmp	r2, #4
 800085c:	d004      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
 800085e:	2a01      	cmp	r2, #1
 8000860:	d002      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
 8000862:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000866:	d104      	bne.n	8000872 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e002      	b.n	8000878 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000874:	2a12      	cmp	r2, #18
 8000876:	d0f7      	beq.n	8000868 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000878:	9600      	str	r6, [sp, #0]
 800087a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800087c:	2200      	movs	r2, #0
 800087e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fe82 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000888:	bb28      	cbnz	r0, 80008d6 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800088a:	6923      	ldr	r3, [r4, #16]
 800088c:	6822      	ldr	r2, [r4, #0]
 800088e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000892:	d112      	bne.n	80008ba <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000894:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000898:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800089a:	4633      	mov	r3, r6
 800089c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800089e:	4938      	ldr	r1, [pc, #224]	; (8000980 <HAL_I2C_Master_Transmit+0x1a4>)
 80008a0:	4620      	mov	r0, r4
 80008a2:	f7ff fe33 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008a6:	4605      	mov	r5, r0
 80008a8:	b9a0      	cbnz	r0, 80008d4 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	9003      	str	r0, [sp, #12]
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	9203      	str	r2, [sp, #12]
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80008b8:	e050      	b.n	800095c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80008ba:	11eb      	asrs	r3, r5, #7
 80008bc:	f003 0306 	and.w	r3, r3, #6
 80008c0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008c4:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80008c6:	492f      	ldr	r1, [pc, #188]	; (8000984 <HAL_I2C_Master_Transmit+0x1a8>)
 80008c8:	4633      	mov	r3, r6
 80008ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80008cc:	4620      	mov	r0, r4
 80008ce:	f7ff fe1d 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008d2:	b148      	cbz	r0, 80008e8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d8:	2b04      	cmp	r3, #4
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	d107      	bne.n	80008f0 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80008e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80008e4:	2501      	movs	r5, #1
 80008e6:	e787      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	b2ed      	uxtb	r5, r5
 80008ec:	611d      	str	r5, [r3, #16]
 80008ee:	e7d4      	b.n	800089a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 80008f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80008f4:	2503      	movs	r5, #3
 80008f6:	e77f      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008f8:	4632      	mov	r2, r6
 80008fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fe73 	bl	80005e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000902:	b140      	cbz	r0, 8000916 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000904:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000906:	2b04      	cmp	r3, #4
 8000908:	d1f4      	bne.n	80008f4 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800090a:	6822      	ldr	r2, [r4, #0]
 800090c:	6813      	ldr	r3, [r2, #0]
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e7e6      	b.n	80008e4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000916:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	1c4b      	adds	r3, r1, #1
 800091c:	6263      	str	r3, [r4, #36]	; 0x24
 800091e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000920:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000922:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000924:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000926:	3b01      	subs	r3, #1
 8000928:	b29b      	uxth	r3, r3
 800092a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800092c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800092e:	1e53      	subs	r3, r2, #1
 8000930:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000932:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000934:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000936:	d50a      	bpl.n	800094e <HAL_I2C_Master_Transmit+0x172>
 8000938:	b14b      	cbz	r3, 800094e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800093a:	1c8b      	adds	r3, r1, #2
 800093c:	6263      	str	r3, [r4, #36]	; 0x24
 800093e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000940:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000942:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000946:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800094e:	4632      	mov	r2, r6
 8000950:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000952:	4620      	mov	r0, r4
 8000954:	f7ff fe9b 	bl	800068e <I2C_WaitOnBTFFlagUntilTimeout>
 8000958:	2800      	cmp	r0, #0
 800095a:	d1d3      	bne.n	8000904 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 800095c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ca      	bne.n	80008f8 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000962:	6821      	ldr	r1, [r4, #0]
 8000964:	680a      	ldr	r2, [r1, #0]
 8000966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800096c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800096e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000972:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000976:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800097a:	e73d      	b.n	80007f8 <HAL_I2C_Master_Transmit+0x1c>
 800097c:	00100002 	.word	0x00100002
 8000980:	00010002 	.word	0x00010002
 8000984:	00010008 	.word	0x00010008

08000988 <HAL_I2C_Master_Receive>:
{
 8000988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098c:	4604      	mov	r4, r0
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	4698      	mov	r8, r3
 8000992:	460d      	mov	r5, r1
 8000994:	4691      	mov	r9, r2
 8000996:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000998:	f7ff fc2c 	bl	80001f4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800099c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80009a0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	d004      	beq.n	80009b0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80009a6:	2502      	movs	r5, #2
}
 80009a8:	4628      	mov	r0, r5
 80009aa:	b009      	add	sp, #36	; 0x24
 80009ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009b0:	9000      	str	r0, [sp, #0]
 80009b2:	2319      	movs	r3, #25
 80009b4:	2201      	movs	r2, #1
 80009b6:	49a2      	ldr	r1, [pc, #648]	; (8000c40 <HAL_I2C_Master_Receive+0x2b8>)
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff fde7 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 80009be:	2800      	cmp	r0, #0
 80009c0:	d1f1      	bne.n	80009a6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80009c2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d0ed      	beq.n	80009a6 <HAL_I2C_Master_Receive+0x1e>
 80009ca:	2301      	movs	r3, #1
 80009cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80009d6:	bf5e      	ittt	pl
 80009d8:	681a      	ldrpl	r2, [r3, #0]
 80009da:	f042 0201 	orrpl.w	r2, r2, #1
 80009de:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009e6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80009e8:	2222      	movs	r2, #34	; 0x22
 80009ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80009ee:	2210      	movs	r2, #16
 80009f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80009f4:	2200      	movs	r2, #0
 80009f6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009f8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80009fc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a00:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000a02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000a04:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000a08:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000a0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a0c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a0e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a10:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000a14:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a16:	d004      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d002      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
 8000a1c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000a20:	d104      	bne.n	8000a2c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e002      	b.n	8000a32 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000a2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000a2e:	2a11      	cmp	r2, #17
 8000a30:	d0f7      	beq.n	8000a22 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a32:	9600      	str	r6, [sp, #0]
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff fda5 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d14d      	bne.n	8000ae2 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a46:	6923      	ldr	r3, [r4, #16]
 8000a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	d139      	bne.n	8000ac4 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000a50:	f045 0501 	orr.w	r5, r5, #1
 8000a54:	b2ed      	uxtb	r5, r5
 8000a56:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a58:	4633      	mov	r3, r6
 8000a5a:	463a      	mov	r2, r7
 8000a5c:	4979      	ldr	r1, [pc, #484]	; (8000c44 <HAL_I2C_Master_Receive+0x2bc>)
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff fd54 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a64:	4605      	mov	r5, r0
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d13a      	bne.n	8000ae0 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8000a6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d069      	beq.n	8000b46 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d17a      	bne.n	8000b6c <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a7c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	9504      	str	r5, [sp, #16]
 8000a84:	695a      	ldr	r2, [r3, #20]
 8000a86:	9204      	str	r2, [sp, #16]
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	9204      	str	r2, [sp, #16]
 8000a8c:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a96:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000a98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000c4c <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8000a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d05b      	beq.n	8000b5a <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	f200 80d4 	bhi.w	8000c50 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d17b      	bne.n	8000ba4 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000aac:	4632      	mov	r2, r6
 8000aae:	4639      	mov	r1, r7
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f7ff fdbf 	bl	8000634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	f000 8093 	beq.w	8000be2 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d116      	bne.n	8000af0 <HAL_I2C_Master_Receive+0x168>
 8000ac2:	e03e      	b.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000ac4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000ac8:	f008 0806 	and.w	r8, r8, #6
 8000acc:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000ad0:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000ad2:	495d      	ldr	r1, [pc, #372]	; (8000c48 <HAL_I2C_Master_Receive+0x2c0>)
 8000ad4:	4633      	mov	r3, r6
 8000ad6:	463a      	mov	r2, r7
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff fd17 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ade:	b148      	cbz	r0, 8000af4 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	d128      	bne.n	8000b3e <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8000aec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8000af0:	2501      	movs	r5, #1
 8000af2:	e759      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	b2ed      	uxtb	r5, r5
 8000af8:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000afa:	463a      	mov	r2, r7
 8000afc:	4633      	mov	r3, r6
 8000afe:	4951      	ldr	r1, [pc, #324]	; (8000c44 <HAL_I2C_Master_Receive+0x2bc>)
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff fd03 	bl	800050c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b06:	4602      	mov	r2, r0
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d1e9      	bne.n	8000ae0 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	9007      	str	r0, [sp, #28]
 8000b10:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b12:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b14:	9107      	str	r1, [sp, #28]
 8000b16:	6999      	ldr	r1, [r3, #24]
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000b22:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b24:	9600      	str	r6, [sp, #0]
 8000b26:	463b      	mov	r3, r7
 8000b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b2c:	f7ff fd2e 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1d6      	bne.n	8000ae2 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000b3a:	6113      	str	r3, [r2, #16]
 8000b3c:	e78c      	b.n	8000a58 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8000b3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8000b42:	2503      	movs	r5, #3
 8000b44:	e730      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b46:	9503      	str	r5, [sp, #12]
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	9203      	str	r2, [sp, #12]
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	9203      	str	r2, [sp, #12]
 8000b50:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b58:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000b66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000b6a:	e71d      	b.n	80009a8 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8000b6c:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b6e:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000b70:	d10e      	bne.n	8000b90 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	9505      	str	r5, [sp, #20]
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	9205      	str	r2, [sp, #20]
 8000b82:	699a      	ldr	r2, [r3, #24]
 8000b84:	9205      	str	r2, [sp, #20]
 8000b86:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b8e:	e781      	b.n	8000a94 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b94:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b96:	9506      	str	r5, [sp, #24]
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	9206      	str	r2, [sp, #24]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	9306      	str	r3, [sp, #24]
 8000ba0:	9b06      	ldr	r3, [sp, #24]
 8000ba2:	e779      	b.n	8000a98 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8000ba4:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ba6:	9600      	str	r6, [sp, #0]
 8000ba8:	463b      	mov	r3, r7
 8000baa:	f04f 0200 	mov.w	r2, #0
 8000bae:	4641      	mov	r1, r8
 8000bb0:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000bb2:	d124      	bne.n	8000bfe <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bb4:	f7ff fcea 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1c2      	bne.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
 8000bbc:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	1c51      	adds	r1, r2, #1
 8000bce:	6261      	str	r1, [r4, #36]	; 0x24
 8000bd0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000bd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000be0:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	6262      	str	r2, [r4, #36]	; 0x24
 8000be8:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bea:	6912      	ldr	r2, [r2, #16]
 8000bec:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8000bee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bf4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000bfc:	e74e      	b.n	8000a9c <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bfe:	f7ff fcc5 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000c02:	4602      	mov	r2, r0
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d19c      	bne.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000c08:	6821      	ldr	r1, [r4, #0]
 8000c0a:	680b      	ldr	r3, [r1, #0]
 8000c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c10:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c12:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c16:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c18:	1c59      	adds	r1, r3, #1
 8000c1a:	6261      	str	r1, [r4, #36]	; 0x24
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	6909      	ldr	r1, [r1, #16]
 8000c20:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8000c22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c24:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8000c26:	3b01      	subs	r3, #1
 8000c28:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c2c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	f7ff fca9 	bl	800058c <I2C_WaitOnFlagUntilTimeout>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	d0bf      	beq.n	8000bbe <HAL_I2C_Master_Receive+0x236>
 8000c3e:	e780      	b.n	8000b42 <HAL_I2C_Master_Receive+0x1ba>
 8000c40:	00100002 	.word	0x00100002
 8000c44:	00010002 	.word	0x00010002
 8000c48:	00010008 	.word	0x00010008
 8000c4c:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000c50:	4632      	mov	r2, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	4620      	mov	r0, r4
 8000c56:	f7ff fced 	bl	8000634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	f47f af2e 	bne.w	8000abc <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	6262      	str	r2, [r4, #36]	; 0x24
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	6912      	ldr	r2, [r2, #16]
 8000c6a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8000c6c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c6e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8000c70:	3b01      	subs	r3, #1
 8000c72:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c7c:	6953      	ldr	r3, [r2, #20]
 8000c7e:	075b      	lsls	r3, r3, #29
 8000c80:	f57f af0c 	bpl.w	8000a9c <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c86:	1c59      	adds	r1, r3, #1
 8000c88:	6261      	str	r1, [r4, #36]	; 0x24
 8000c8a:	e7ae      	b.n	8000bea <HAL_I2C_Master_Receive+0x262>

08000c8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000c90:	4604      	mov	r4, r0
{
 8000c92:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d060      	beq.n	8000d5a <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000c98:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8000c9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ca0:	b91b      	cbnz	r3, 8000caa <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ca2:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ca6:	f003 fe57 	bl	8004958 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000caa:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cac:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000cae:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000cb0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cb4:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8000cb8:	f001 faca 	bl	8002250 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	f104 0804 	add.w	r8, r4, #4
 8000cc6:	6033      	str	r3, [r6, #0]
 8000cc8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f001 faaf 	bl	8002230 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	6820      	ldr	r0, [r4, #0]
 8000cd6:	f001 fac5 	bl	8002264 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000cde:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 8000ce0:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000ce8:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000cec:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000cee:	3101      	adds	r1, #1
 8000cf0:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000cf2:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000cf6:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000cfa:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 8000cfc:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 8000cfe:	6410      	str	r0, [r2, #64]	; 0x40
 8000d00:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_PCD_Init+0x5c>
 8000d06:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000d08:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000d0a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000d0e:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 8000d10:	3201      	adds	r2, #1
 8000d12:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000d14:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000d18:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 8000d1c:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 8000d20:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000d24:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000d28:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 8000d2c:	d1ed      	bne.n	8000d0a <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d2e:	466e      	mov	r6, sp
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	6033      	str	r3, [r6, #0]
 8000d38:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d3c:	6820      	ldr	r0, [r4, #0]
 8000d3e:	f001 fa93 	bl	8002268 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000d42:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000d44:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000d48:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000d4a:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 8000d4e:	f001 fd63 	bl	8002818 <USB_DevDisconnect>
  return HAL_OK;
 8000d52:	2000      	movs	r0, #0
}
 8000d54:	b006      	add	sp, #24
 8000d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	e7fa      	b.n	8000d54 <HAL_PCD_Init+0xc8>

08000d5e <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000d5e:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000d62:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d64:	2b01      	cmp	r3, #1
{
 8000d66:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d68:	d00e      	beq.n	8000d88 <HAL_PCD_Start+0x2a>
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000d70:	f003 ff1f 	bl	8004bb2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000d74:	6820      	ldr	r0, [r4, #0]
 8000d76:	f001 fd4d 	bl	8002814 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	f001 fa5f 	bl	800223e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000d86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d88:	2002      	movs	r0, #2
}
 8000d8a:	bd10      	pop	{r4, pc}

08000d8c <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8000d8c:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 8000d90:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d92:	2a01      	cmp	r2, #1
{
 8000d94:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d96:	d00b      	beq.n	8000db0 <HAL_PCD_SetAddress+0x24>
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8000d9e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8000da2:	6800      	ldr	r0, [r0, #0]
 8000da4:	f001 fd30 	bl	8002808 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8000dae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000db0:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000db2:	bd10      	pop	{r4, pc}

08000db4 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000db8:	b248      	sxtb	r0, r1
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dc0:	bfb5      	itete	lt
 8000dc2:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000dc6:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000dcc:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000dd0:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000dd2:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000dd4:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000dd6:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000dd8:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 8000ddc:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d009      	beq.n	8000df6 <HAL_PCD_EP_Open+0x42>
 8000de2:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000de4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000de6:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000dea:	f001 fa59 	bl	80022a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000df6:	2002      	movs	r0, #2
}
 8000df8:	bd38      	pop	{r3, r4, r5, pc}

08000dfa <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000dfa:	b24b      	sxtb	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e02:	bfb5      	itete	lt
 8000e04:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e08:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e0c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e0e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000e12:	0fdb      	lsrs	r3, r3, #31
{  
 8000e14:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000e16:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000e18:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000e1a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 8000e1e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d009      	beq.n	8000e38 <HAL_PCD_EP_Close+0x3e>
 8000e24:	2301      	movs	r3, #1
 8000e26:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000e2a:	6800      	ldr	r0, [r0, #0]
 8000e2c:	f001 fbaa 	bl	8002584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000e36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000e38:	2002      	movs	r0, #2
}
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8000e3e:	2600      	movs	r6, #0
 8000e40:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e44:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000e46:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000e48:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000e4c:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e50:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000e52:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000e56:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000e5a:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 8000e5e:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e62:	6800      	ldr	r0, [r0, #0]
 8000e64:	f001 fcf2 	bl	800284c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000e68:	4630      	mov	r0, r6
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}

08000e6c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8000e6c:	f001 010f 	and.w	r1, r1, #15
 8000e70:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000e74:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000e78:	4770      	bx	lr

08000e7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000e7e:	b570      	push	{r4, r5, r6, lr}
 8000e80:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000e82:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000e84:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000e86:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000e88:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000e8a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e8e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e92:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000e94:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000e96:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000e98:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 8000e9c:	6800      	ldr	r0, [r0, #0]
 8000e9e:	f001 fcd5 	bl	800284c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ea8 <HAL_PCD_IRQHandler>:
{ 
 8000ea8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eae:	6800      	ldr	r0, [r0, #0]
 8000eb0:	f001 fcb4 	bl	800281c <USB_ReadInterrupts>
 8000eb4:	0400      	lsls	r0, r0, #16
 8000eb6:	f100 8098 	bmi.w	8000fea <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000eba:	6820      	ldr	r0, [r4, #0]
 8000ebc:	f001 fcae 	bl	800281c <USB_ReadInterrupts>
 8000ec0:	0541      	lsls	r1, r0, #21
 8000ec2:	d50f      	bpl.n	8000ee4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000ec6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c1b      	lsrs	r3, r3, #16
 8000ed4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000ed8:	f003 fd75 	bl	80049c6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff ff54 	bl	8000d8c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	f001 fc99 	bl	800281c <USB_ReadInterrupts>
 8000eea:	0447      	lsls	r7, r0, #17
 8000eec:	d508      	bpl.n	8000f00 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000f00:	6820      	ldr	r0, [r4, #0]
 8000f02:	f001 fc8b 	bl	800281c <USB_ReadInterrupts>
 8000f06:	0486      	lsls	r6, r0, #18
 8000f08:	d508      	bpl.n	8000f1c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	f001 fc7d 	bl	800281c <USB_ReadInterrupts>
 8000f22:	04c5      	lsls	r5, r0, #19
 8000f24:	d51c      	bpl.n	8000f60 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000f26:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000f28:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000f2a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	041b      	lsls	r3, r3, #16
 8000f34:	0c1b      	lsrs	r3, r3, #16
 8000f36:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000f3a:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000f3e:	f023 0308 	bic.w	r3, r3, #8
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	0c1b      	lsrs	r3, r3, #16
 8000f46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000f4a:	f003 fd59 	bl	8004a00 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000f4e:	6822      	ldr	r2, [r4, #0]
 8000f50:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f58:	041b      	lsls	r3, r3, #16
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	f001 fc5b 	bl	800281c <USB_ReadInterrupts>
 8000f66:	0500      	lsls	r0, r0, #20
 8000f68:	d51d      	bpl.n	8000fa6 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f6a:	6820      	ldr	r0, [r4, #0]
 8000f6c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000f7a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f82:	041b      	lsls	r3, r3, #16
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000f8a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000f98:	f001 fc40 	bl	800281c <USB_ReadInterrupts>
 8000f9c:	04c1      	lsls	r1, r0, #19
 8000f9e:	d402      	bmi.n	8000fa6 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f003 fd1d 	bl	80049e0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000fa6:	6820      	ldr	r0, [r4, #0]
 8000fa8:	f001 fc38 	bl	800281c <USB_ReadInterrupts>
 8000fac:	0582      	lsls	r2, r0, #22
 8000fae:	d50b      	bpl.n	8000fc8 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000fb0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000fb2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000fb4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000fc4:	f003 fcfb 	bl	80049be <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	f001 fc27 	bl	800281c <USB_ReadInterrupts>
 8000fce:	05c3      	lsls	r3, r0, #23
 8000fd0:	d508      	bpl.n	8000fe4 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fdc:	041b      	lsls	r3, r3, #16
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000fe4:	b002      	add	sp, #8
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000fea:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000fec:	4fc8      	ldr	r7, [pc, #800]	; (8001310 <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000fee:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001314 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ff2:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001318 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000ff6:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000ffa:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000ffe:	6820      	ldr	r0, [r4, #0]
 8001000:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001004:	b29b      	uxth	r3, r3
 8001006:	f8ad 3004 	strh.w	r3, [sp, #4]
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	f57f af55 	bpl.w	8000eba <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001010:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8001014:	f015 050f 	ands.w	r5, r5, #15
 8001018:	f040 80ab 	bne.w	8001172 <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800101c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001020:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001022:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001026:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001028:	d126      	bne.n	8001078 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800102a:	403b      	ands	r3, r7
 800102c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800102e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001032:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001036:	b29b      	uxth	r3, r3
 8001038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800103c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001040:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001044:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800104a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800104c:	4413      	add	r3, r2
 800104e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001050:	4620      	mov	r0, r4
 8001052:	f003 fcad 	bl	80049b0 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001056:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0cf      	beq.n	8000ffe <HAL_PCD_IRQHandler+0x156>
 800105e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001060:	2a00      	cmp	r2, #0
 8001062:	d1cc      	bne.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001064:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001072:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001076:	e7c2      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001078:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800107c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001080:	051a      	lsls	r2, r3, #20
 8001082:	d51f      	bpl.n	80010c4 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001084:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001088:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 800108c:	b29b      	uxth	r3, r3
 800108e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001092:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001096:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800109a:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800109e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80010a6:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80010aa:	f001 fccf 	bl	8002a4c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80010ae:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80010b0:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80010b2:	8813      	ldrh	r3, [r2, #0]
 80010b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010b8:	051b      	lsls	r3, r3, #20
 80010ba:	0d1b      	lsrs	r3, r3, #20
 80010bc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80010be:	f003 fc69 	bl	8004994 <HAL_PCD_SetupStageCallback>
 80010c2:	e79c      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80010c8:	041b      	lsls	r3, r3, #16
 80010ca:	d598      	bpl.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010cc:	8803      	ldrh	r3, [r0, #0]
 80010ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010d2:	051b      	lsls	r3, r3, #20
 80010d4:	0d1b      	lsrs	r3, r3, #20
 80010d6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010dc:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80010e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80010ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80010ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010f2:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 80010f6:	b163      	cbz	r3, 8001112 <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80010f8:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80010fc:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001100:	f001 fca4 	bl	8002a4c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001104:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001108:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 800110c:	4413      	add	r3, r2
 800110e:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001112:	2100      	movs	r1, #0
 8001114:	4620      	mov	r0, r4
 8001116:	f003 fc43 	bl	80049a0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800111a:	6822      	ldr	r2, [r4, #0]
 800111c:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8001120:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001124:	2d3e      	cmp	r5, #62	; 0x3e
 8001126:	b289      	uxth	r1, r1
 8001128:	f101 0106 	add.w	r1, r1, #6
 800112c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001130:	d917      	bls.n	8001162 <HAL_PCD_IRQHandler+0x2ba>
 8001132:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001136:	06ee      	lsls	r6, r5, #27
 8001138:	bf04      	itt	eq
 800113a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800113e:	b29b      	uxtheq	r3, r3
 8001140:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001144:	b29b      	uxth	r3, r3
 8001146:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800114a:	8813      	ldrh	r3, [r2, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	ea03 0308 	and.w	r3, r3, r8
 8001152:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115e:	8013      	strh	r3, [r2, #0]
 8001160:	e74d      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001162:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001166:	07ed      	lsls	r5, r5, #31
 8001168:	bf44      	itt	mi
 800116a:	3301      	addmi	r3, #1
 800116c:	b29b      	uxthmi	r3, r3
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	e7e8      	b.n	8001144 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001172:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001176:	b29b      	uxth	r3, r3
 8001178:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800117c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001180:	0419      	lsls	r1, r3, #16
 8001182:	d53f      	bpl.n	8001204 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001184:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001188:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800118c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001190:	051b      	lsls	r3, r3, #20
 8001192:	0d1b      	lsrs	r3, r3, #20
 8001194:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001198:	eb04 010a 	add.w	r1, r4, sl
 800119c:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d174      	bne.n	800128e <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80011a8:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	3306      	adds	r3, #6
 80011b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80011b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80011b8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80011bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80011c0:	b136      	cbz	r6, 80011d0 <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80011c2:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80011c6:	4633      	mov	r3, r6
 80011c8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80011cc:	f001 fc3e 	bl	8002a4c <USB_ReadPMA>
 80011d0:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80011d4:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80011d8:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80011dc:	4433      	add	r3, r6
 80011de:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011e2:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 80011e6:	4432      	add	r2, r6
 80011e8:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80011ec:	b123      	cbz	r3, 80011f8 <HAL_PCD_IRQHandler+0x350>
 80011ee:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 80011f2:	4286      	cmp	r6, r0
 80011f4:	f080 8086 	bcs.w	8001304 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80011f8:	44a2      	add	sl, r4
 80011fa:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 80011fe:	4620      	mov	r0, r4
 8001200:	f003 fbce 	bl	80049a0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001204:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001208:	061a      	lsls	r2, r3, #24
 800120a:	f57f aef8 	bpl.w	8000ffe <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800120e:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001210:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001212:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001216:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001218:	b29b      	uxth	r3, r3
 800121a:	403b      	ands	r3, r7
 800121c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001220:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001224:	3502      	adds	r5, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d178      	bne.n	800131c <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800122a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800122e:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001232:	b29b      	uxth	r3, r3
 8001234:	3302      	adds	r3, #2
 8001236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800123a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800123e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001242:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800124a:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 800124c:	b11b      	cbz	r3, 8001256 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800124e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001250:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001252:	f001 fae9 	bl	8002828 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	4426      	add	r6, r4
 800125a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800125e:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001262:	b29b      	uxth	r3, r3
 8001264:	3302      	adds	r3, #2
 8001266:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800126a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800126e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8001272:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001274:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001278:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 800127a:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800127c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800127e:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001280:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8085 	bne.w	8001392 <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001288:	f003 fb92 	bl	80049b0 <HAL_PCD_DataInStageCallback>
 800128c:	e6b7      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800128e:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8001292:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800129c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80012a0:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80012a2:	d021      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012a4:	3202      	adds	r2, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012ac:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80012b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80012b4:	b136      	cbz	r6, 80012c4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012b6:	4633      	mov	r3, r6
 80012b8:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012bc:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80012c0:	f001 fbc4 	bl	8002a4c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80012c4:	eb04 030a 	add.w	r3, r4, sl
 80012c8:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80012cc:	6822      	ldr	r2, [r4, #0]
 80012ce:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80012d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012d6:	051b      	lsls	r3, r3, #20
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012e2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012e6:	e773      	b.n	80011d0 <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012e8:	3206      	adds	r2, #6
 80012ea:	4413      	add	r3, r2
 80012ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80012f0:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80012f4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d0e3      	beq.n	80012c4 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80012fc:	4633      	mov	r3, r6
 80012fe:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001302:	e7db      	b.n	80012bc <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001304:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fd97 	bl	8000e3c <HAL_PCD_EP_Receive>
 800130e:	e779      	b.n	8001204 <HAL_PCD_IRQHandler+0x35c>
 8001310:	ffff8f0f 	.word	0xffff8f0f
 8001314:	ffffbf8f 	.word	0xffffbf8f
 8001318:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800131c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001320:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800132a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800132e:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001330:	d020      	beq.n	8001374 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001332:	3202      	adds	r2, #2
 8001334:	4413      	add	r3, r2
 8001336:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800133a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800133e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001346:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001348:	b11b      	cbz	r3, 8001352 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800134a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800134c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800134e:	f001 fa6b 	bl	8002828 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001352:	19a3      	adds	r3, r4, r6
 8001354:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800135e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001362:	051b      	lsls	r3, r3, #20
 8001364:	0d1b      	lsrs	r3, r3, #20
 8001366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001372:	e770      	b.n	8001256 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001374:	3206      	adds	r2, #6
 8001376:	4413      	add	r3, r2
 8001378:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800137c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001380:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001388:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0e1      	beq.n	8001352 <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800138e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001390:	e7dc      	b.n	800134c <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001392:	f7ff fd72 	bl	8000e7a <HAL_PCD_EP_Transmit>
 8001396:	e632      	b.n	8000ffe <HAL_PCD_IRQHandler+0x156>

08001398 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001398:	2201      	movs	r2, #1
{
 800139a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800139c:	b24b      	sxtb	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013a4:	bfb5      	itete	lt
 80013a6:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80013aa:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013ae:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80013b0:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80013b4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 80013b6:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80013b8:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 80013ba:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80013bc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80013be:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80013c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00e      	beq.n	80013e6 <HAL_PCD_EP_SetStall+0x4e>
 80013c8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 80013cc:	6800      	ldr	r0, [r0, #0]
 80013ce:	f001 f9a7 	bl	8002720 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80013d2:	b925      	cbnz	r5, 80013de <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013d4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	f001 fa23 	bl	8002824 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80013de:	2000      	movs	r0, #0
 80013e0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80013e6:	2002      	movs	r0, #2
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}

080013ea <HAL_PCD_EP_ClrStall>:
{
 80013ea:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 80013ec:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 80013ee:	b24b      	sxtb	r3, r1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80013f6:	bfb5      	itete	lt
 80013f8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80013fc:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001400:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001402:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001406:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001408:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 800140a:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800140c:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800140e:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001412:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001414:	2b01      	cmp	r3, #1
 8001416:	d009      	beq.n	800142c <HAL_PCD_EP_ClrStall+0x42>
 8001418:	2301      	movs	r3, #1
 800141a:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800141e:	6800      	ldr	r0, [r0, #0]
 8001420:	f001 f9b0 	bl	8002784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001424:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001428:	4620      	mov	r0, r4
 800142a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800142c:	2002      	movs	r0, #2
}
 800142e:	bd38      	pop	{r3, r4, r5, pc}

08001430 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001430:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001434:	bf1b      	ittet	ne
 8001436:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800143a:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800143e:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001442:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001444:	bf08      	it	eq
 8001446:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800144a:	b91a      	cbnz	r2, 8001454 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800144c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800144e:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001450:	2000      	movs	r0, #0
 8001452:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001454:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001456:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001458:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800145a:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800145c:	8103      	strh	r3, [r0, #8]
 800145e:	e7f7      	b.n	8001450 <HAL_PCDEx_PMAConfig+0x20>

08001460 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001460:	6803      	ldr	r3, [r0, #0]
{
 8001462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	07db      	lsls	r3, r3, #31
{
 8001468:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146a:	d410      	bmi.n	800148e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	079f      	lsls	r7, r3, #30
 8001470:	d45e      	bmi.n	8001530 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	0719      	lsls	r1, r3, #28
 8001476:	f100 8095 	bmi.w	80015a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	075a      	lsls	r2, r3, #29
 800147e:	f100 80bf 	bmi.w	8001600 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001482:	69ea      	ldr	r2, [r5, #28]
 8001484:	2a00      	cmp	r2, #0
 8001486:	f040 812d 	bne.w	80016e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	e014      	b.n	80014b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800148e:	4c90      	ldr	r4, [pc, #576]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d007      	beq.n	80014aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 80014a4:	6863      	ldr	r3, [r4, #4]
 80014a6:	03de      	lsls	r6, r3, #15
 80014a8:	d509      	bpl.n	80014be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	039c      	lsls	r4, r3, #14
 80014ae:	d5dd      	bpl.n	800146c <HAL_RCC_OscConfig+0xc>
 80014b0:	686b      	ldr	r3, [r5, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1da      	bne.n	800146c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	b002      	add	sp, #8
 80014ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	686b      	ldr	r3, [r5, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d110      	bne.n	80014e8 <HAL_RCC_OscConfig+0x88>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7fe fe91 	bl	80001f4 <HAL_GetTick>
 80014d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	0398      	lsls	r0, r3, #14
 80014d8:	d4c8      	bmi.n	800146c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014da:	f7fe fe8b 	bl	80001f4 <HAL_GetTick>
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	2864      	cmp	r0, #100	; 0x64
 80014e2:	d9f7      	bls.n	80014d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80014e4:	2003      	movs	r0, #3
 80014e6:	e7e7      	b.n	80014b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e8:	b99b      	cbnz	r3, 8001512 <HAL_RCC_OscConfig+0xb2>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014fa:	f7fe fe7b 	bl	80001f4 <HAL_GetTick>
 80014fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	0399      	lsls	r1, r3, #14
 8001504:	d5b2      	bpl.n	800146c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001506:	f7fe fe75 	bl	80001f4 <HAL_GetTick>
 800150a:	1b80      	subs	r0, r0, r6
 800150c:	2864      	cmp	r0, #100	; 0x64
 800150e:	d9f7      	bls.n	8001500 <HAL_RCC_OscConfig+0xa0>
 8001510:	e7e8      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	d103      	bne.n	8001522 <HAL_RCC_OscConfig+0xc2>
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	e7d1      	b.n	80014c6 <HAL_RCC_OscConfig+0x66>
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6023      	str	r3, [r4, #0]
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152e:	e7cd      	b.n	80014cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001530:	4c67      	ldr	r4, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	f013 0f0c 	tst.w	r3, #12
 8001538:	d007      	beq.n	800154a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d110      	bne.n	8001566 <HAL_RCC_OscConfig+0x106>
 8001544:	6863      	ldr	r3, [r4, #4]
 8001546:	03da      	lsls	r2, r3, #15
 8001548:	d40d      	bmi.n	8001566 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	079b      	lsls	r3, r3, #30
 800154e:	d502      	bpl.n	8001556 <HAL_RCC_OscConfig+0xf6>
 8001550:	692b      	ldr	r3, [r5, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1af      	bne.n	80014b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	696a      	ldr	r2, [r5, #20]
 800155a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800155e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001562:	6023      	str	r3, [r4, #0]
 8001564:	e785      	b.n	8001472 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	692a      	ldr	r2, [r5, #16]
 8001568:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 800156a:	b16a      	cbz	r2, 8001588 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001570:	f7fe fe40 	bl	80001f4 <HAL_GetTick>
 8001574:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	079f      	lsls	r7, r3, #30
 800157a:	d4ec      	bmi.n	8001556 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7fe fe3a 	bl	80001f4 <HAL_GetTick>
 8001580:	1b80      	subs	r0, r0, r6
 8001582:	2802      	cmp	r0, #2
 8001584:	d9f7      	bls.n	8001576 <HAL_RCC_OscConfig+0x116>
 8001586:	e7ad      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001588:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800158a:	f7fe fe33 	bl	80001f4 <HAL_GetTick>
 800158e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	0798      	lsls	r0, r3, #30
 8001594:	f57f af6d 	bpl.w	8001472 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7fe fe2c 	bl	80001f4 <HAL_GetTick>
 800159c:	1b80      	subs	r0, r0, r6
 800159e:	2802      	cmp	r0, #2
 80015a0:	d9f6      	bls.n	8001590 <HAL_RCC_OscConfig+0x130>
 80015a2:	e79f      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	69aa      	ldr	r2, [r5, #24]
 80015a6:	4c4a      	ldr	r4, [pc, #296]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x278>)
 80015aa:	b1da      	cbz	r2, 80015e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015b0:	f7fe fe20 	bl	80001f4 <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b8:	079b      	lsls	r3, r3, #30
 80015ba:	d50d      	bpl.n	80015d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80015ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80015cc:	9b01      	ldr	r3, [sp, #4]
 80015ce:	1e5a      	subs	r2, r3, #1
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f9      	bne.n	80015ca <HAL_RCC_OscConfig+0x16a>
 80015d6:	e750      	b.n	800147a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d8:	f7fe fe0c 	bl	80001f4 <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9e9      	bls.n	80015b6 <HAL_RCC_OscConfig+0x156>
 80015e2:	e77f      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80015e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015e6:	f7fe fe05 	bl	80001f4 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ee:	079f      	lsls	r7, r3, #30
 80015f0:	f57f af43 	bpl.w	800147a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7fe fdfe 	bl	80001f4 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f6      	bls.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015fe:	e771      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001600:	4c33      	ldr	r4, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001602:	69e3      	ldr	r3, [r4, #28]
 8001604:	00d8      	lsls	r0, r3, #3
 8001606:	d424      	bmi.n	8001652 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001608:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	69e3      	ldr	r3, [r4, #28]
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61e3      	str	r3, [r4, #28]
 8001612:	69e3      	ldr	r3, [r4, #28]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4e30      	ldr	r6, [pc, #192]	; (80016e0 <HAL_RCC_OscConfig+0x280>)
 800161e:	6833      	ldr	r3, [r6, #0]
 8001620:	05d9      	lsls	r1, r3, #23
 8001622:	d518      	bpl.n	8001656 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	68eb      	ldr	r3, [r5, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d126      	bne.n	8001678 <HAL_RCC_OscConfig+0x218>
 800162a:	6a23      	ldr	r3, [r4, #32]
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001632:	f7fe fddf 	bl	80001f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800163a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	6a23      	ldr	r3, [r4, #32]
 800163e:	079b      	lsls	r3, r3, #30
 8001640:	d53f      	bpl.n	80016c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001642:	2f00      	cmp	r7, #0
 8001644:	f43f af1d 	beq.w	8001482 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001648:	69e3      	ldr	r3, [r4, #28]
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	61e3      	str	r3, [r4, #28]
 8001650:	e717      	b.n	8001482 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2700      	movs	r7, #0
 8001654:	e7e2      	b.n	800161c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	6833      	ldr	r3, [r6, #0]
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800165e:	f7fe fdc9 	bl	80001f4 <HAL_GetTick>
 8001662:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	6833      	ldr	r3, [r6, #0]
 8001666:	05da      	lsls	r2, r3, #23
 8001668:	d4dc      	bmi.n	8001624 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7fe fdc3 	bl	80001f4 <HAL_GetTick>
 800166e:	eba0 0008 	sub.w	r0, r0, r8
 8001672:	2864      	cmp	r0, #100	; 0x64
 8001674:	d9f6      	bls.n	8001664 <HAL_RCC_OscConfig+0x204>
 8001676:	e735      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	b9ab      	cbnz	r3, 80016a6 <HAL_RCC_OscConfig+0x246>
 800167a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6223      	str	r3, [r4, #32]
 8001686:	6a23      	ldr	r3, [r4, #32]
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800168e:	f7fe fdb1 	bl	80001f4 <HAL_GetTick>
 8001692:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	6a23      	ldr	r3, [r4, #32]
 8001696:	0798      	lsls	r0, r3, #30
 8001698:	d5d3      	bpl.n	8001642 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7fe fdab 	bl	80001f4 <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	4540      	cmp	r0, r8
 80016a2:	d9f7      	bls.n	8001694 <HAL_RCC_OscConfig+0x234>
 80016a4:	e71e      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	6a23      	ldr	r3, [r4, #32]
 80016aa:	d103      	bne.n	80016b4 <HAL_RCC_OscConfig+0x254>
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6223      	str	r3, [r4, #32]
 80016b2:	e7ba      	b.n	800162a <HAL_RCC_OscConfig+0x1ca>
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6223      	str	r3, [r4, #32]
 80016ba:	6a23      	ldr	r3, [r4, #32]
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	e7b6      	b.n	8001630 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7fe fd97 	bl	80001f4 <HAL_GetTick>
 80016c6:	eba0 0008 	sub.w	r0, r0, r8
 80016ca:	42b0      	cmp	r0, r6
 80016cc:	d9b6      	bls.n	800163c <HAL_RCC_OscConfig+0x1dc>
 80016ce:	e709      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420000 	.word	0x42420000
 80016d8:	42420480 	.word	0x42420480
 80016dc:	200018e4 	.word	0x200018e4
 80016e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e4:	4c22      	ldr	r4, [pc, #136]	; (8001770 <HAL_RCC_OscConfig+0x310>)
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	f43f aee2 	beq.w	80014b6 <HAL_RCC_OscConfig+0x56>
 80016f2:	2300      	movs	r3, #0
 80016f4:	4e1f      	ldr	r6, [pc, #124]	; (8001774 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	d12b      	bne.n	8001754 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80016fc:	f7fe fd7a 	bl	80001f4 <HAL_GetTick>
 8001700:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	0199      	lsls	r1, r3, #6
 8001706:	d41f      	bmi.n	8001748 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	6a2b      	ldr	r3, [r5, #32]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001710:	6862      	ldr	r2, [r4, #4]
 8001712:	68a9      	ldr	r1, [r5, #8]
 8001714:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001718:	430a      	orrs	r2, r1
 800171a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800171c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800171e:	6862      	ldr	r2, [r4, #4]
 8001720:	430b      	orrs	r3, r1
 8001722:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001726:	4313      	orrs	r3, r2
 8001728:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800172a:	2301      	movs	r3, #1
 800172c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800172e:	f7fe fd61 	bl	80001f4 <HAL_GetTick>
 8001732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	019a      	lsls	r2, r3, #6
 8001738:	f53f aea7 	bmi.w	800148a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7fe fd5a 	bl	80001f4 <HAL_GetTick>
 8001740:	1b40      	subs	r0, r0, r5
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x2d4>
 8001746:	e6cd      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7fe fd54 	bl	80001f4 <HAL_GetTick>
 800174c:	1bc0      	subs	r0, r0, r7
 800174e:	2802      	cmp	r0, #2
 8001750:	d9d7      	bls.n	8001702 <HAL_RCC_OscConfig+0x2a2>
 8001752:	e6c7      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001754:	f7fe fd4e 	bl	80001f4 <HAL_GetTick>
 8001758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	f57f ae94 	bpl.w	800148a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001762:	f7fe fd47 	bl	80001f4 <HAL_GetTick>
 8001766:	1b40      	subs	r0, r0, r5
 8001768:	2802      	cmp	r0, #2
 800176a:	d9f6      	bls.n	800175a <HAL_RCC_OscConfig+0x2fa>
 800176c:	e6ba      	b.n	80014e4 <HAL_RCC_OscConfig+0x84>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420060 	.word	0x42420060

08001778 <HAL_RCC_GetSysClockFreq>:
{
 8001778:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800177c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177e:	ac02      	add	r4, sp, #8
 8001780:	f103 0510 	add.w	r5, r3, #16
 8001784:	4622      	mov	r2, r4
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	3308      	adds	r3, #8
 800178c:	c203      	stmia	r2!, {r0, r1}
 800178e:	42ab      	cmp	r3, r5
 8001790:	4614      	mov	r4, r2
 8001792:	d1f7      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001794:	2301      	movs	r3, #1
 8001796:	f88d 3004 	strb.w	r3, [sp, #4]
 800179a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800179c:	4911      	ldr	r1, [pc, #68]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800179e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80017a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017a4:	f003 020c 	and.w	r2, r3, #12
 80017a8:	2a08      	cmp	r2, #8
 80017aa:	d117      	bne.n	80017dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017b0:	a806      	add	r0, sp, #24
 80017b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ba:	d50c      	bpl.n	80017d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c6:	aa06      	add	r2, sp, #24
 80017c8:	4413      	add	r3, r2
 80017ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80017d2:	b007      	add	sp, #28
 80017d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_RCC_GetSysClockFreq+0x74>)
 80017d8:	4350      	muls	r0, r2
 80017da:	e7fa      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80017de:	e7f8      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80017e0:	08005f74 	.word	0x08005f74
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	003d0900 	.word	0x003d0900

080017f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x138>)
{
 80017f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f6:	6813      	ldr	r3, [r2, #0]
{
 80017f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	428b      	cmp	r3, r1
{
 8001800:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001802:	d328      	bcc.n	8001856 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	682a      	ldr	r2, [r5, #0]
 8001806:	0791      	lsls	r1, r2, #30
 8001808:	d432      	bmi.n	8001870 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	07d2      	lsls	r2, r2, #31
 800180c:	d438      	bmi.n	8001880 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_RCC_ClockConfig+0x138>)
 8001810:	6813      	ldr	r3, [r2, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	429e      	cmp	r6, r3
 8001818:	d373      	bcc.n	8001902 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181a:	682a      	ldr	r2, [r5, #0]
 800181c:	4c43      	ldr	r4, [pc, #268]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 800181e:	f012 0f04 	tst.w	r2, #4
 8001822:	d179      	bne.n	8001918 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	0713      	lsls	r3, r2, #28
 8001826:	d506      	bpl.n	8001836 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001828:	6863      	ldr	r3, [r4, #4]
 800182a:	692a      	ldr	r2, [r5, #16]
 800182c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001830:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001834:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f7ff ff9f 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	4a3c      	ldr	r2, [pc, #240]	; (8001930 <HAL_RCC_ClockConfig+0x140>)
 800183e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	40d8      	lsrs	r0, r3
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_ClockConfig+0x144>)
 8001848:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f7fe fc90 	bl	8000170 <HAL_InitTick>
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
}
 8001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f023 0307 	bic.w	r3, r3, #7
 800185c:	430b      	orrs	r3, r1
 800185e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	4299      	cmp	r1, r3
 8001868:	d0cc      	beq.n	8001804 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	492e      	ldr	r1, [pc, #184]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 8001872:	68a8      	ldr	r0, [r5, #8]
 8001874:	684b      	ldr	r3, [r1, #4]
 8001876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800187a:	4303      	orrs	r3, r0
 800187c:	604b      	str	r3, [r1, #4]
 800187e:	e7c4      	b.n	800180a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001880:	686a      	ldr	r2, [r5, #4]
 8001882:	4c2a      	ldr	r4, [pc, #168]	; (800192c <HAL_RCC_ClockConfig+0x13c>)
 8001884:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	d0ec      	beq.n	800186a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001890:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001892:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	4313      	orrs	r3, r2
 800189c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800189e:	f7fe fca9 	bl	80001f4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80018a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d114      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d0ac      	beq.n	800180e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7fe fc9e 	bl	80001f4 <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4540      	cmp	r0, r8
 80018bc:	d9f5      	bls.n	80018aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80018be:	2003      	movs	r0, #3
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c4:	2a02      	cmp	r2, #2
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018cc:	e7df      	b.n	800188e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	f013 0f02 	tst.w	r3, #2
 80018d2:	e7dc      	b.n	800188e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d10f      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	6863      	ldr	r3, [r4, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d095      	beq.n	800180e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7fe fc87 	bl	80001f4 <HAL_GetTick>
 80018e6:	1bc0      	subs	r0, r0, r7
 80018e8:	4540      	cmp	r0, r8
 80018ea:	d9f5      	bls.n	80018d8 <HAL_RCC_ClockConfig+0xe8>
 80018ec:	e7e7      	b.n	80018be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ee:	f7fe fc81 	bl	80001f4 <HAL_GetTick>
 80018f2:	1bc0      	subs	r0, r0, r7
 80018f4:	4540      	cmp	r0, r8
 80018f6:	d8e2      	bhi.n	80018be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	f013 0f0c 	tst.w	r3, #12
 80018fe:	d1f6      	bne.n	80018ee <HAL_RCC_ClockConfig+0xfe>
 8001900:	e785      	b.n	800180e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f023 0307 	bic.w	r3, r3, #7
 8001908:	4333      	orrs	r3, r6
 800190a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	429e      	cmp	r6, r3
 8001914:	d1a9      	bne.n	800186a <HAL_RCC_ClockConfig+0x7a>
 8001916:	e780      	b.n	800181a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	68e9      	ldr	r1, [r5, #12]
 800191c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001920:	430b      	orrs	r3, r1
 8001922:	6063      	str	r3, [r4, #4]
 8001924:	e77e      	b.n	8001824 <HAL_RCC_ClockConfig+0x34>
 8001926:	bf00      	nop
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	08005fe6 	.word	0x08005fe6
 8001934:	200018e4 	.word	0x200018e4

08001938 <HAL_RCC_GetHCLKFreq>:
}
 8001938:	4b01      	ldr	r3, [pc, #4]	; (8001940 <HAL_RCC_GetHCLKFreq+0x8>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200018e4 	.word	0x200018e4

08001944 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001952:	6810      	ldr	r0, [r2, #0]
}    
 8001954:	40d8      	lsrs	r0, r3
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	08005ff6 	.word	0x08005ff6
 8001960:	200018e4 	.word	0x200018e4

08001964 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001972:	6810      	ldr	r0, [r2, #0]
} 
 8001974:	40d8      	lsrs	r0, r3
 8001976:	4770      	bx	lr
 8001978:	40021000 	.word	0x40021000
 800197c:	08005ff6 	.word	0x08005ff6
 8001980:	200018e4 	.word	0x200018e4

08001984 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001984:	6803      	ldr	r3, [r0, #0]
{
 8001986:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800198a:	07d9      	lsls	r1, r3, #31
{
 800198c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800198e:	d520      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001990:	4c35      	ldr	r4, [pc, #212]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001992:	69e3      	ldr	r3, [r4, #28]
 8001994:	00da      	lsls	r2, r3, #3
 8001996:	d432      	bmi.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001998:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	69e3      	ldr	r3, [r4, #28]
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61e3      	str	r3, [r4, #28]
 80019a2:	69e3      	ldr	r3, [r4, #28]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4e2f      	ldr	r6, [pc, #188]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80019ae:	6833      	ldr	r3, [r6, #0]
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	d526      	bpl.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019ba:	d136      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80019bc:	6a23      	ldr	r3, [r4, #32]
 80019be:	686a      	ldr	r2, [r5, #4]
 80019c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c4:	4313      	orrs	r3, r2
 80019c6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c8:	b11f      	cbz	r7, 80019d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	69e3      	ldr	r3, [r4, #28]
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019d2:	6828      	ldr	r0, [r5, #0]
 80019d4:	0783      	lsls	r3, r0, #30
 80019d6:	d506      	bpl.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019da:	68a9      	ldr	r1, [r5, #8]
 80019dc:	6853      	ldr	r3, [r2, #4]
 80019de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019e6:	f010 0010 	ands.w	r0, r0, #16
 80019ea:	d01b      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019ee:	68e9      	ldr	r1, [r5, #12]
 80019f0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019f2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6053      	str	r3, [r2, #4]
 80019fc:	e012      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2700      	movs	r7, #0
 8001a00:	e7d4      	b.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	6833      	ldr	r3, [r6, #0]
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fbf3 	bl	80001f4 <HAL_GetTick>
 8001a0e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	6833      	ldr	r3, [r6, #0]
 8001a12:	05d8      	lsls	r0, r3, #23
 8001a14:	d4ce      	bmi.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7fe fbed 	bl	80001f4 <HAL_GetTick>
 8001a1a:	eba0 0008 	sub.w	r0, r0, r8
 8001a1e:	2864      	cmp	r0, #100	; 0x64
 8001a20:	d9f6      	bls.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
}
 8001a24:	b002      	add	sp, #8
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a2a:	686a      	ldr	r2, [r5, #4]
 8001a2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d0c3      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a34:	2001      	movs	r0, #1
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a38:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a3a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a42:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001a44:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a46:	07d9      	lsls	r1, r3, #31
 8001a48:	d5b8      	bpl.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001a4a:	f7fe fbd3 	bl	80001f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	6a23      	ldr	r3, [r4, #32]
 8001a56:	079a      	lsls	r2, r3, #30
 8001a58:	d4b0      	bmi.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fbcb 	bl	80001f4 <HAL_GetTick>
 8001a5e:	1b80      	subs	r0, r0, r6
 8001a60:	4540      	cmp	r0, r8
 8001a62:	d9f7      	bls.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001a64:	e7dd      	b.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42420440 	.word	0x42420440

08001a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4688      	mov	r8, r1
 8001a7c:	4617      	mov	r7, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001a82:	6822      	ldr	r2, [r4, #0]
 8001a84:	6893      	ldr	r3, [r2, #8]
 8001a86:	ea38 0303 	bics.w	r3, r8, r3
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	429f      	cmp	r7, r3
 8001a92:	d102      	bne.n	8001a9a <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a94:	2000      	movs	r0, #0
}
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a9a:	1c6b      	adds	r3, r5, #1
 8001a9c:	d0f2      	beq.n	8001a84 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a9e:	bb55      	cbnz	r5, 8001af6 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001aa8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001aaa:	6862      	ldr	r2, [r4, #4]
 8001aac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ab0:	d10a      	bne.n	8001ac8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001ab2:	68a2      	ldr	r2, [r4, #8]
 8001ab4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ab8:	d002      	beq.n	8001ac0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001aba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001abe:	d103      	bne.n	8001ac8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ac8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ace:	d109      	bne.n	8001ae4 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad6:	0412      	lsls	r2, r2, #16
 8001ad8:	0c12      	lsrs	r2, r2, #16
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae2:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001aea:	2300      	movs	r3, #0
 8001aec:	2003      	movs	r0, #3
 8001aee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001af6:	f7fe fb7d 	bl	80001f4 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	4285      	cmp	r5, r0
 8001afe:	d8c0      	bhi.n	8001a82 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001b00:	e7ce      	b.n	8001aa0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001b02 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b02:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b04:	460b      	mov	r3, r1
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	2200      	movs	r2, #0
{
 8001b0c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0e:	f7ff ffb1 	bl	8001a74 <SPI_WaitFlagStateUntilTimeout>
 8001b12:	b120      	cbz	r0, 8001b1e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001b14:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd10      	pop	{r4, pc}

08001b22 <HAL_SPI_Transmit>:
{
 8001b22:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001b26:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001b28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001b2c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001b2e:	2b01      	cmp	r3, #1
{
 8001b30:	460d      	mov	r5, r1
 8001b32:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001b34:	f000 809c 	beq.w	8001c70 <HAL_SPI_Transmit+0x14e>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001b3e:	f7fe fb59 	bl	80001f4 <HAL_GetTick>
 8001b42:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8001b44:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001b48:	b2c0      	uxtb	r0, r0
 8001b4a:	2801      	cmp	r0, #1
 8001b4c:	f040 808e 	bne.w	8001c6c <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0U))
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d04e      	beq.n	8001bf2 <HAL_SPI_Transmit+0xd0>
 8001b54:	f1b8 0f00 	cmp.w	r8, #0
 8001b58:	d04b      	beq.n	8001bf2 <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b64:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b66:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001b6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b6e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b70:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b72:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b74:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b7a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8001b7c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001b80:	bf02      	ittt	eq
 8001b82:	681a      	ldreq	r2, [r3, #0]
 8001b84:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8001b88:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001b8e:	bf5e      	ittt	pl
 8001b90:	681a      	ldrpl	r2, [r3, #0]
 8001b92:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8001b96:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b98:	68e2      	ldr	r2, [r4, #12]
 8001b9a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001b9e:	6862      	ldr	r2, [r4, #4]
 8001ba0:	d138      	bne.n	8001c14 <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001ba2:	b11a      	cbz	r2, 8001bac <HAL_SPI_Transmit+0x8a>
 8001ba4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	2a01      	cmp	r2, #1
 8001baa:	d106      	bne.n	8001bba <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001bac:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001bb0:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8001bb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001bba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b993      	cbnz	r3, 8001be6 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001bc0:	9700      	str	r7, [sp, #0]
 8001bc2:	4633      	mov	r3, r6
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ff53 	bl	8001a74 <SPI_WaitFlagStateUntilTimeout>
 8001bce:	b978      	cbnz	r0, 8001bf0 <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001bd0:	463a      	mov	r2, r7
 8001bd2:	4631      	mov	r1, r6
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff ff94 	bl	8001b02 <SPI_CheckFlag_BSY>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d038      	beq.n	8001c50 <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bde:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001be2:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001be4:	e005      	b.n	8001bf2 <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	0790      	lsls	r0, r2, #30
 8001bec:	d4de      	bmi.n	8001bac <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001bee:	b94e      	cbnz	r6, 8001c04 <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8001bf0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001bfe:	b004      	add	sp, #16
 8001c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c04:	1c71      	adds	r1, r6, #1
 8001c06:	d0d8      	beq.n	8001bba <HAL_SPI_Transmit+0x98>
 8001c08:	f7fe faf4 	bl	80001f4 <HAL_GetTick>
 8001c0c:	1bc0      	subs	r0, r0, r7
 8001c0e:	4286      	cmp	r6, r0
 8001c10:	d8d3      	bhi.n	8001bba <HAL_SPI_Transmit+0x98>
 8001c12:	e7ed      	b.n	8001bf0 <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001c14:	b11a      	cbz	r2, 8001c1e <HAL_SPI_Transmit+0xfc>
 8001c16:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d106      	bne.n	8001c2c <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001c1e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001c22:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001c24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001c2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0c5      	beq.n	8001bc0 <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	0792      	lsls	r2, r2, #30
 8001c3a:	d4f0      	bmi.n	8001c1e <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001c3c:	2e00      	cmp	r6, #0
 8001c3e:	d0d7      	beq.n	8001bf0 <HAL_SPI_Transmit+0xce>
 8001c40:	1c73      	adds	r3, r6, #1
 8001c42:	d0f3      	beq.n	8001c2c <HAL_SPI_Transmit+0x10a>
 8001c44:	f7fe fad6 	bl	80001f4 <HAL_GetTick>
 8001c48:	1bc0      	subs	r0, r0, r7
 8001c4a:	4286      	cmp	r6, r0
 8001c4c:	d8ee      	bhi.n	8001c2c <HAL_SPI_Transmit+0x10a>
 8001c4e:	e7cf      	b.n	8001bf0 <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c50:	68a3      	ldr	r3, [r4, #8]
 8001c52:	b933      	cbnz	r3, 8001c62 <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	9203      	str	r2, [sp, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c62:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001c64:	3000      	adds	r0, #0
 8001c66:	bf18      	it	ne
 8001c68:	2001      	movne	r0, #1
 8001c6a:	e7c2      	b.n	8001bf2 <HAL_SPI_Transmit+0xd0>
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	e7c0      	b.n	8001bf2 <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 8001c70:	2002      	movs	r0, #2
 8001c72:	e7c4      	b.n	8001bfe <HAL_SPI_Transmit+0xdc>

08001c74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c74:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001c76:	4604      	mov	r4, r0
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d034      	beq.n	8001ce6 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001c80:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001c84:	b90b      	cbnz	r3, 8001c8a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c86:	f002 fc01 	bl	800448c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c8a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c8c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001c92:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c94:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c9a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c9c:	6863      	ldr	r3, [r4, #4]
 8001c9e:	69a2      	ldr	r2, [r4, #24]
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	68e0      	ldr	r0, [r4, #12]
 8001ca4:	4303      	orrs	r3, r0
 8001ca6:	6920      	ldr	r0, [r4, #16]
 8001ca8:	4303      	orrs	r3, r0
 8001caa:	6960      	ldr	r0, [r4, #20]
 8001cac:	4303      	orrs	r3, r0
 8001cae:	69e0      	ldr	r0, [r4, #28]
 8001cb0:	4303      	orrs	r3, r0
 8001cb2:	6a20      	ldr	r0, [r4, #32]
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001cb8:	4303      	orrs	r3, r0
 8001cba:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cc2:	0c12      	lsrs	r2, r2, #16
 8001cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cc6:	f002 0204 	and.w	r2, r2, #4
 8001cca:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cce:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001cd0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cd2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cd4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cda:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001cdc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cde:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001ce0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001ce4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
}
 8001ce8:	bd10      	pop	{r4, pc}

08001cea <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001cee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	f04f 0302 	mov.w	r3, #2
 8001cf6:	d01c      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x48>
 8001cf8:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001cfa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cfe:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001d00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d04:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d06:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d0a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d10:	680a      	ldr	r2, [r1, #0]
 8001d12:	2a40      	cmp	r2, #64	; 0x40
 8001d14:	d079      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x120>
 8001d16:	d819      	bhi.n	8001d4c <HAL_TIM_ConfigClockSource+0x62>
 8001d18:	2a10      	cmp	r2, #16
 8001d1a:	f000 8093 	beq.w	8001e44 <HAL_TIM_ConfigClockSource+0x15a>
 8001d1e:	d80a      	bhi.n	8001d36 <HAL_TIM_ConfigClockSource+0x4c>
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	f000 8089 	beq.w	8001e38 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001d32:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d36:	2a20      	cmp	r2, #32
 8001d38:	f000 808a 	beq.w	8001e50 <HAL_TIM_ConfigClockSource+0x166>
 8001d3c:	2a30      	cmp	r2, #48	; 0x30
 8001d3e:	d1f2      	bne.n	8001d26 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d40:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d46:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001d4a:	e036      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d4c:	2a70      	cmp	r2, #112	; 0x70
 8001d4e:	d036      	beq.n	8001dbe <HAL_TIM_ConfigClockSource+0xd4>
 8001d50:	d81b      	bhi.n	8001d8a <HAL_TIM_ConfigClockSource+0xa0>
 8001d52:	2a50      	cmp	r2, #80	; 0x50
 8001d54:	d042      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0xf2>
 8001d56:	2a60      	cmp	r2, #96	; 0x60
 8001d58:	d1e5      	bne.n	8001d26 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d5a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d5c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d5e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d62:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d64:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d66:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d68:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d6a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d72:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d76:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d7a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d7c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d7e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d84:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001d88:	e017      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d8a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001d8e:	d011      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xca>
 8001d90:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d94:	d1c7      	bne.n	8001d26 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d96:	688a      	ldr	r2, [r1, #8]
 8001d98:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001d9a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d9c:	68c9      	ldr	r1, [r1, #12]
 8001d9e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001da4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001da8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001daa:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db2:	e002      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e7b3      	b.n	8001d26 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dbe:	688a      	ldr	r2, [r1, #8]
 8001dc0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dc2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc4:	68c9      	ldr	r1, [r1, #12]
 8001dc6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dd0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001dd2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001dd4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dd6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001dda:	e7ee      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ddc:	684c      	ldr	r4, [r1, #4]
 8001dde:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001de0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001de4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001de8:	f025 0501 	bic.w	r5, r5, #1
 8001dec:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dee:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001df0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001df2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001df6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dfc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001dfe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e04:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001e08:	e7d7      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0a:	684c      	ldr	r4, [r1, #4]
 8001e0c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e0e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e10:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e12:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	f025 0501 	bic.w	r5, r5, #1
 8001e1a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e1c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001e1e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e24:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e2a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e32:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001e36:	e7c0      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e38:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e3e:	f042 0207 	orr.w	r2, r2, #7
 8001e42:	e7ba      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e44:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e4a:	f042 0217 	orr.w	r2, r2, #23
 8001e4e:	e7b4      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e50:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e56:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001e5a:	e7ae      	b.n	8001dba <HAL_TIM_ConfigClockSource+0xd0>

08001e5c <HAL_TIM_PeriodElapsedCallback>:
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIM_OC_DelayElapsedCallback>:
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_IC_CaptureCallback>:
 8001e60:	4770      	bx	lr

08001e62 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_TriggerCallback>:
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e66:	6803      	ldr	r3, [r0, #0]
{
 8001e68:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6a:	691a      	ldr	r2, [r3, #16]
{
 8001e6c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6e:	0791      	lsls	r1, r2, #30
 8001e70:	d50e      	bpl.n	8001e90 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	0792      	lsls	r2, r2, #30
 8001e76:	d50b      	bpl.n	8001e90 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e78:	f06f 0202 	mvn.w	r2, #2
 8001e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e80:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e82:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e84:	079b      	lsls	r3, r3, #30
 8001e86:	d077      	beq.n	8001f78 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e88:	f7ff ffea 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	0750      	lsls	r0, r2, #29
 8001e96:	d510      	bpl.n	8001eba <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	0751      	lsls	r1, r2, #29
 8001e9c:	d50d      	bpl.n	8001eba <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e9e:	f06f 0204 	mvn.w	r2, #4
 8001ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eaa:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb0:	d068      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	f7ff ffd5 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	0712      	lsls	r2, r2, #28
 8001ec0:	d50f      	bpl.n	8001ee2 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	0710      	lsls	r0, r2, #28
 8001ec6:	d50c      	bpl.n	8001ee2 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ec8:	f06f 0208 	mvn.w	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ece:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ed2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed4:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed8:	d05a      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	f7ff ffc1 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	06d2      	lsls	r2, r2, #27
 8001ee8:	d510      	bpl.n	8001f0c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	06d0      	lsls	r0, r2, #27
 8001eee:	d50d      	bpl.n	8001f0c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efa:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f00:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f02:	d04b      	beq.n	8001f9c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f04:	f7ff ffac 	bl	8001e60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	07d1      	lsls	r1, r2, #31
 8001f12:	d508      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	07d2      	lsls	r2, r2, #31
 8001f18:	d505      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f1a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	f7ff ff9b 	bl	8001e5c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	0610      	lsls	r0, r2, #24
 8001f2c:	d508      	bpl.n	8001f40 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	0611      	lsls	r1, r2, #24
 8001f32:	d505      	bpl.n	8001f40 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f3c:	f000 f8ab 	bl	8002096 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	0652      	lsls	r2, r2, #25
 8001f46:	d508      	bpl.n	8001f5a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	0650      	lsls	r0, r2, #25
 8001f4c:	d505      	bpl.n	8001f5a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f56:	f7ff ff85 	bl	8001e64 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	0691      	lsls	r1, r2, #26
 8001f60:	d522      	bpl.n	8001fa8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	0692      	lsls	r2, r2, #26
 8001f66:	d51f      	bpl.n	8001fa8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f68:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f6c:	4620      	mov	r0, r4
}
 8001f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f72:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001f74:	f000 b88e 	b.w	8002094 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f78:	f7ff ff71 	bl	8001e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff70 	bl	8001e62 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f82:	e783      	b.n	8001e8c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f84:	f7ff ff6b 	bl	8001e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff6a 	bl	8001e62 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f8e:	e792      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f90:	f7ff ff65 	bl	8001e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff64 	bl	8001e62 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f9a:	e7a0      	b.n	8001ede <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9c:	f7ff ff5f 	bl	8001e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ff5e 	bl	8001e62 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fa6:	e7af      	b.n	8001f08 <HAL_TIM_IRQHandler+0xa2>
 8001fa8:	bd10      	pop	{r4, pc}
	...

08001fac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001fae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	d00a      	beq.n	8001fca <TIM_Base_SetConfig+0x1e>
 8001fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x1e>
 8001fba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x1e>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d115      	bne.n	8001ff6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001fca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fd0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <TIM_Base_SetConfig+0x6c>)
 8001fd4:	4290      	cmp	r0, r2
 8001fd6:	d00a      	beq.n	8001fee <TIM_Base_SetConfig+0x42>
 8001fd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x42>
 8001fde:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x42>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d103      	bne.n	8001ff6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001ff6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001ffc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ffe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	688b      	ldr	r3, [r1, #8]
 8002002:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002004:	680b      	ldr	r3, [r1, #0]
 8002006:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <TIM_Base_SetConfig+0x6c>)
 800200a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	bf04      	itt	eq
 800200e:	690b      	ldreq	r3, [r1, #16]
 8002010:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002012:	2301      	movs	r3, #1
 8002014:	6143      	str	r3, [r0, #20]
 8002016:	4770      	bx	lr
 8002018:	40012c00 	.word	0x40012c00

0800201c <HAL_TIM_Base_Init>:
{
 800201c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800201e:	4604      	mov	r4, r0
 8002020:	b1a0      	cbz	r0, 800204c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002022:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002026:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800202a:	b91b      	cbnz	r3, 8002034 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800202c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002030:	f002 fa56 	bl	80044e0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002034:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002036:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002038:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203c:	1d21      	adds	r1, r4, #4
 800203e:	f7ff ffb5 	bl	8001fac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002042:	2301      	movs	r3, #1
  return HAL_OK;
 8002044:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002046:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800204a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800204c:	2001      	movs	r0, #1
}
 800204e:	bd10      	pop	{r4, pc}

08002050 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002054:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002056:	2b01      	cmp	r3, #1
 8002058:	f04f 0302 	mov.w	r3, #2
 800205c:	d018      	beq.n	8002090 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800205e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002062:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002064:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002066:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002068:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800206a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800206e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4322      	orrs	r2, r4
 8002074:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002084:	2301      	movs	r3, #1
 8002086:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800208a:	2300      	movs	r3, #0
 800208c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002090:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002092:	bd10      	pop	{r4, pc}

08002094 <HAL_TIMEx_CommutationCallback>:
 8002094:	4770      	bx	lr

08002096 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002096:	4770      	bx	lr

08002098 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800209c:	6805      	ldr	r5, [r0, #0]
 800209e:	68c2      	ldr	r2, [r0, #12]
 80020a0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020a8:	4313      	orrs	r3, r2
 80020aa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80020ae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80020b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020b8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020bc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80020be:	4313      	orrs	r3, r2
 80020c0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c2:	696b      	ldr	r3, [r5, #20]
 80020c4:	6982      	ldr	r2, [r0, #24]
 80020c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ca:	4313      	orrs	r3, r2
 80020cc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <UART_SetConfig+0x138>)
{
 80020d0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80020d2:	429d      	cmp	r5, r3
 80020d4:	f04f 0419 	mov.w	r4, #25
 80020d8:	d146      	bne.n	8002168 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020da:	f7ff fc43 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 80020de:	fb04 f300 	mul.w	r3, r4, r0
 80020e2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020ea:	00b6      	lsls	r6, r6, #2
 80020ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80020f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80020f4:	011e      	lsls	r6, r3, #4
 80020f6:	f7ff fc35 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 80020fa:	4360      	muls	r0, r4
 80020fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	fbb0 f7f3 	udiv	r7, r0, r3
 8002106:	f7ff fc2d 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 800210a:	4360      	muls	r0, r4
 800210c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	fbb3 f3f8 	udiv	r3, r3, r8
 800211a:	fb08 7313 	mls	r3, r8, r3, r7
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	3332      	adds	r3, #50	; 0x32
 8002122:	fbb3 f3f8 	udiv	r3, r3, r8
 8002126:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800212a:	f7ff fc1b 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 800212e:	4360      	muls	r0, r4
 8002130:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	fbb0 faf2 	udiv	sl, r0, r2
 800213a:	f7ff fc13 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800213e:	4360      	muls	r0, r4
 8002140:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	fbb3 f3f8 	udiv	r3, r3, r8
 800214e:	fb08 a313 	mls	r3, r8, r3, sl
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	3332      	adds	r3, #50	; 0x32
 8002156:	fbb3 f3f8 	udiv	r3, r3, r8
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	433b      	orrs	r3, r7
 8002160:	4433      	add	r3, r6
 8002162:	60ab      	str	r3, [r5, #8]
 8002164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002168:	f7ff fbec 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 800216c:	fb04 f300 	mul.w	r3, r4, r0
 8002170:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002174:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002178:	00b6      	lsls	r6, r6, #2
 800217a:	fbb3 f3f6 	udiv	r3, r3, r6
 800217e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002182:	011e      	lsls	r6, r3, #4
 8002184:	f7ff fbde 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8002188:	4360      	muls	r0, r4
 800218a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fbb0 f7f3 	udiv	r7, r0, r3
 8002194:	f7ff fbd6 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8002198:	4360      	muls	r0, r4
 800219a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80021a8:	fb08 7313 	mls	r3, r8, r3, r7
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	3332      	adds	r3, #50	; 0x32
 80021b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80021b4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021b8:	f7ff fbc4 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4360      	muls	r0, r4
 80021be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	fbb0 faf2 	udiv	sl, r0, r2
 80021c8:	f7ff fbbc 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 80021cc:	e7b7      	b.n	800213e <UART_SetConfig+0xa6>
 80021ce:	bf00      	nop
 80021d0:	40013800 	.word	0x40013800

080021d4 <HAL_UART_Init>:
{
 80021d4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021d6:	4604      	mov	r4, r0
 80021d8:	b340      	cbz	r0, 800222c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021e2:	b91b      	cbnz	r3, 80021ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021e8:	f002 f9b0 	bl	800454c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021fe:	f7ff ff4b 	bl	8002098 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002202:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800220c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002214:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800221e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002220:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002222:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002226:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800222a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800222c:	2001      	movs	r0, #1
}
 800222e:	bd10      	pop	{r4, pc}

08002230 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002230:	b084      	sub	sp, #16
 8002232:	a801      	add	r0, sp, #4
 8002234:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002238:	b004      	add	sp, #16
 800223a:	2000      	movs	r0, #0
 800223c:	4770      	bx	lr

0800223e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800223e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002242:	b29b      	uxth	r3, r3
 8002244:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002248:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800224c:	2000      	movs	r0, #0
 800224e:	4770      	bx	lr

08002250 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002250:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002254:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002258:	045b      	lsls	r3, r3, #17
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002260:	2000      	movs	r0, #0
 8002262:	4770      	bx	lr

08002264 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002264:	2000      	movs	r0, #0
 8002266:	4770      	bx	lr

08002268 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002268:	b084      	sub	sp, #16
 800226a:	b510      	push	{r4, lr}
 800226c:	ac03      	add	r4, sp, #12
 800226e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8002272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8002276:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002278:	2301      	movs	r3, #1
 800227a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800227e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8002282:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002286:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800228a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800228e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002290:	b29b      	uxth	r3, r3
 8002292:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002296:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800229a:	4610      	mov	r0, r2
 800229c:	4770      	bx	lr
	...

080022a0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80022a0:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80022a2:	78cb      	ldrb	r3, [r1, #3]
 80022a4:	780a      	ldrb	r2, [r1, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d80f      	bhi.n	80022ca <USB_ActivateEndpoint+0x2a>
 80022aa:	e8df f003 	tbb	[pc, r3]
 80022ae:	6402      	.short	0x6402
 80022b0:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80022b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80022c6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80022ca:	f640 730f 	movw	r3, #3855	; 0xf0f
 80022ce:	780c      	ldrb	r4, [r1, #0]
 80022d0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80022d4:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80022d8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80022dc:	401a      	ands	r2, r3
 80022de:	432a      	orrs	r2, r5
 80022e0:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80022e4:	7a8a      	ldrb	r2, [r1, #10]
 80022e6:	780d      	ldrb	r5, [r1, #0]
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	f040 8097 	bne.w	800241c <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80022ee:	784c      	ldrb	r4, [r1, #1]
 80022f0:	888a      	ldrh	r2, [r1, #4]
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d04a      	beq.n	800238c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022f6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80022fa:	0852      	lsrs	r2, r2, #1
 80022fc:	b2a4      	uxth	r4, r4
 80022fe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002302:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002306:	0052      	lsls	r2, r2, #1
 8002308:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800230c:	780c      	ldrb	r4, [r1, #0]
 800230e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002312:	0652      	lsls	r2, r2, #25
 8002314:	d508      	bpl.n	8002328 <USB_ActivateEndpoint+0x88>
 8002316:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800231a:	4013      	ands	r3, r2
 800231c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002324:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002328:	780a      	ldrb	r2, [r1, #0]
 800232a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800232e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002346:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800234a:	2000      	movs	r0, #0
 800234c:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800234e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002352:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	e7b2      	b.n	80022c6 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002360:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002364:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002374:	e7a7      	b.n	80022c6 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002376:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800237a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800238a:	e79c      	b.n	80022c6 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800238c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002390:	0852      	lsrs	r2, r2, #1
 8002392:	b29b      	uxth	r3, r3
 8002394:	3304      	adds	r3, #4
 8002396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800239a:	0052      	lsls	r2, r2, #1
 800239c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80023a0:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023a4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80023a8:	690d      	ldr	r5, [r1, #16]
 80023aa:	b292      	uxth	r2, r2
 80023ac:	780b      	ldrb	r3, [r1, #0]
 80023ae:	3206      	adds	r2, #6
 80023b0:	2d3e      	cmp	r5, #62	; 0x3e
 80023b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80023b6:	d929      	bls.n	800240c <USB_ActivateEndpoint+0x16c>
 80023b8:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80023bc:	06eb      	lsls	r3, r5, #27
 80023be:	bf04      	itt	eq
 80023c0:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80023c4:	b29e      	uxtheq	r6, r3
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <USB_ActivateEndpoint+0x2e0>)
 80023c8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023d2:	780a      	ldrb	r2, [r1, #0]
 80023d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023d8:	045e      	lsls	r6, r3, #17
 80023da:	d50b      	bpl.n	80023f4 <USB_ActivateEndpoint+0x154>
 80023dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023e4:	051b      	lsls	r3, r3, #20
 80023e6:	0d1b      	lsrs	r3, r3, #20
 80023e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023f4:	780a      	ldrb	r2, [r1, #0]
 80023f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800240a:	e798      	b.n	800233e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800240c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002410:	07ed      	lsls	r5, r5, #31
 8002412:	bf44      	itt	mi
 8002414:	3301      	addmi	r3, #1
 8002416:	b29b      	uxthmi	r3, r3
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	e7d7      	b.n	80023cc <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800241c:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002420:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002424:	0512      	lsls	r2, r2, #20
 8002426:	0d12      	lsrs	r2, r2, #20
 8002428:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800242c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002430:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002434:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002438:	780c      	ldrb	r4, [r1, #0]
 800243a:	b292      	uxth	r2, r2
 800243c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002440:	88cc      	ldrh	r4, [r1, #6]
 8002442:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002446:	0864      	lsrs	r4, r4, #1
 8002448:	0064      	lsls	r4, r4, #1
 800244a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800244e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002452:	780c      	ldrb	r4, [r1, #0]
 8002454:	b292      	uxth	r2, r2
 8002456:	3204      	adds	r2, #4
 8002458:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800245c:	890c      	ldrh	r4, [r1, #8]
 800245e:	0864      	lsrs	r4, r4, #1
 8002460:	0064      	lsls	r4, r4, #1
 8002462:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002466:	784a      	ldrb	r2, [r1, #1]
 8002468:	780c      	ldrb	r4, [r1, #0]
 800246a:	2a00      	cmp	r2, #0
 800246c:	d147      	bne.n	80024fe <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800246e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002472:	0455      	lsls	r5, r2, #17
 8002474:	d508      	bpl.n	8002488 <USB_ActivateEndpoint+0x1e8>
 8002476:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800247a:	4013      	ands	r3, r2
 800247c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002488:	780a      	ldrb	r2, [r1, #0]
 800248a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800248e:	065c      	lsls	r4, r3, #25
 8002490:	d50b      	bpl.n	80024aa <USB_ActivateEndpoint+0x20a>
 8002492:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	051b      	lsls	r3, r3, #20
 800249c:	0d1b      	lsrs	r3, r3, #20
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80024aa:	780a      	ldrb	r2, [r1, #0]
 80024ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	0d1b      	lsrs	r3, r3, #20
 80024b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80024c4:	f248 0280 	movw	r2, #32896	; 0x8080
 80024c8:	780c      	ldrb	r4, [r1, #0]
 80024ca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80024ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80024de:	4313      	orrs	r3, r2
 80024e0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024e4:	7809      	ldrb	r1, [r1, #0]
 80024e6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80024fc:	e725      	b.n	800234a <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024fe:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002502:	0452      	lsls	r2, r2, #17
 8002504:	d508      	bpl.n	8002518 <USB_ActivateEndpoint+0x278>
 8002506:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800250a:	4013      	ands	r3, r2
 800250c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002518:	780a      	ldrb	r2, [r1, #0]
 800251a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800251e:	065b      	lsls	r3, r3, #25
 8002520:	d50b      	bpl.n	800253a <USB_ActivateEndpoint+0x29a>
 8002522:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800252a:	051b      	lsls	r3, r3, #20
 800252c:	0d1b      	lsrs	r3, r3, #20
 800252e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002536:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800253a:	780a      	ldrb	r2, [r1, #0]
 800253c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002544:	051b      	lsls	r3, r3, #20
 8002546:	0d1b      	lsrs	r3, r3, #20
 8002548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002554:	f248 0280 	movw	r2, #32896	; 0x8080
 8002558:	780c      	ldrb	r4, [r1, #0]
 800255a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	4313      	orrs	r3, r2
 800256c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002570:	7809      	ldrb	r1, [r1, #0]
 8002572:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	e7b8      	b.n	80024f2 <USB_ActivateEndpoint+0x252>
 8002580:	ffff8000 	.word	0xffff8000

08002584 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002584:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8002586:	7a8c      	ldrb	r4, [r1, #10]
 8002588:	784a      	ldrb	r2, [r1, #1]
 800258a:	780b      	ldrb	r3, [r1, #0]
 800258c:	bbcc      	cbnz	r4, 8002602 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 800258e:	b302      	cbz	r2, 80025d2 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002590:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002594:	0652      	lsls	r2, r2, #25
 8002596:	d50b      	bpl.n	80025b0 <USB_DeactivateEndpoint+0x2c>
 8002598:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800259c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025a0:	0512      	lsls	r2, r2, #20
 80025a2:	0d12      	lsrs	r2, r2, #20
 80025a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80025ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80025b0:	780a      	ldrb	r2, [r1, #0]
 80025b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80025ce:	2000      	movs	r0, #0
 80025d0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80025d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025d6:	0454      	lsls	r4, r2, #17
 80025d8:	d50b      	bpl.n	80025f2 <USB_DeactivateEndpoint+0x6e>
 80025da:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80025de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025e2:	0512      	lsls	r2, r2, #20
 80025e4:	0d12      	lsrs	r2, r2, #20
 80025e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025f2:	780a      	ldrb	r2, [r1, #0]
 80025f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002600:	e7dd      	b.n	80025be <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8002602:	2a00      	cmp	r2, #0
 8002604:	d148      	bne.n	8002698 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002606:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800260a:	0452      	lsls	r2, r2, #17
 800260c:	d50b      	bpl.n	8002626 <USB_DeactivateEndpoint+0xa2>
 800260e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002612:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002616:	0512      	lsls	r2, r2, #20
 8002618:	0d12      	lsrs	r2, r2, #20
 800261a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800261e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002622:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002626:	780a      	ldrb	r2, [r1, #0]
 8002628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800262c:	065c      	lsls	r4, r3, #25
 800262e:	d50b      	bpl.n	8002648 <USB_DeactivateEndpoint+0xc4>
 8002630:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002638:	051b      	lsls	r3, r3, #20
 800263a:	0d1b      	lsrs	r3, r3, #20
 800263c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002644:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002648:	780a      	ldrb	r2, [r1, #0]
 800264a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800264e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002652:	051b      	lsls	r3, r3, #20
 8002654:	0d1b      	lsrs	r3, r3, #20
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800265e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002662:	f248 0280 	movw	r2, #32896	; 0x8080
 8002666:	780c      	ldrb	r4, [r1, #0]
 8002668:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800266c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	4313      	orrs	r3, r2
 800267a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800267e:	7809      	ldrb	r1, [r1, #0]
 8002680:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800268c:	041b      	lsls	r3, r3, #16
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	4313      	orrs	r3, r2
 8002692:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002696:	e79a      	b.n	80025ce <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002698:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800269c:	0452      	lsls	r2, r2, #17
 800269e:	d50b      	bpl.n	80026b8 <USB_DeactivateEndpoint+0x134>
 80026a0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80026a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026a8:	0512      	lsls	r2, r2, #20
 80026aa:	0d12      	lsrs	r2, r2, #20
 80026ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80026b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026b8:	780a      	ldrb	r2, [r1, #0]
 80026ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026be:	065b      	lsls	r3, r3, #25
 80026c0:	d50b      	bpl.n	80026da <USB_DeactivateEndpoint+0x156>
 80026c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	0d1b      	lsrs	r3, r3, #20
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80026da:	780a      	ldrb	r2, [r1, #0]
 80026dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80026f4:	f248 0280 	movw	r2, #32896	; 0x8080
 80026f8:	780c      	ldrb	r4, [r1, #0]
 80026fa:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	4313      	orrs	r3, r2
 800270c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002710:	7809      	ldrb	r1, [r1, #0]
 8002712:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	e7b5      	b.n	800268c <USB_DeactivateEndpoint+0x108>

08002720 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002720:	780a      	ldrb	r2, [r1, #0]
 8002722:	b98a      	cbnz	r2, 8002748 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002724:	8803      	ldrh	r3, [r0, #0]
 8002726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002736:	f083 0310 	eor.w	r3, r3, #16
 800273a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002742:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002744:	2000      	movs	r0, #0
 8002746:	4770      	bx	lr
    if (ep->is_in)
 8002748:	784b      	ldrb	r3, [r1, #1]
 800274a:	b183      	cbz	r3, 800276e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800274c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002768:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800276c:	e7ea      	b.n	8002744 <USB_EPSetStall+0x24>
 800276e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002782:	e7ed      	b.n	8002760 <USB_EPSetStall+0x40>

08002784 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002784:	784b      	ldrb	r3, [r1, #1]
 8002786:	780a      	ldrb	r2, [r1, #0]
 8002788:	b313      	cbz	r3, 80027d0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800278a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800278e:	065b      	lsls	r3, r3, #25
 8002790:	d50b      	bpl.n	80027aa <USB_EPClearStall+0x26>
 8002792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800279a:	051b      	lsls	r3, r3, #20
 800279c:	0d1b      	lsrs	r3, r3, #20
 800279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80027aa:	780a      	ldrb	r2, [r1, #0]
 80027ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80027cc:	2000      	movs	r0, #0
 80027ce:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027d4:	045b      	lsls	r3, r3, #17
 80027d6:	d50b      	bpl.n	80027f0 <USB_EPClearStall+0x6c>
 80027d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e0:	051b      	lsls	r3, r3, #20
 80027e2:	0d1b      	lsrs	r3, r3, #20
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80027f0:	780a      	ldrb	r2, [r1, #0]
 80027f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002806:	e7db      	b.n	80027c0 <USB_EPClearStall+0x3c>

08002808 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002808:	b911      	cbnz	r1, 8002810 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002810:	2000      	movs	r0, #0
 8002812:	4770      	bx	lr

08002814 <USB_DevConnect>:
 8002814:	2000      	movs	r0, #0
 8002816:	4770      	bx	lr

08002818 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002818:	2000      	movs	r0, #0
 800281a:	4770      	bx	lr

0800281c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800281c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002820:	b280      	uxth	r0, r0
 8002822:	4770      	bx	lr

08002824 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002824:	2000      	movs	r0, #0
 8002826:	4770      	bx	lr

08002828 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002828:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 800282a:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800282c:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800282e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002832:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002834:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002838:	42a3      	cmp	r3, r4
 800283a:	d100      	bne.n	800283e <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800283c:	bd10      	pop	{r4, pc}
 800283e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002842:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002846:	3401      	adds	r4, #1
 8002848:	e7f6      	b.n	8002838 <USB_WritePMA+0x10>
	...

0800284c <USB_EPStartXfer>:
{
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002850:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002852:	7849      	ldrb	r1, [r1, #1]
{
 8002854:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002856:	2901      	cmp	r1, #1
 8002858:	6933      	ldr	r3, [r6, #16]
 800285a:	7ab0      	ldrb	r0, [r6, #10]
 800285c:	d166      	bne.n	800292c <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800285e:	429a      	cmp	r2, r3
 8002860:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002862:	bf9b      	ittet	ls
 8002864:	2300      	movls	r3, #0
 8002866:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002868:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 800286a:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 800286c:	bf88      	it	hi
 800286e:	61b2      	strhi	r2, [r6, #24]
 8002870:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002872:	bb10      	cbnz	r0, 80028ba <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002874:	88b2      	ldrh	r2, [r6, #4]
 8002876:	6971      	ldr	r1, [r6, #20]
 8002878:	4628      	mov	r0, r5
 800287a:	f7ff ffd5 	bl	8002828 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800287e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002882:	7832      	ldrb	r2, [r6, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	3302      	adds	r3, #2
 8002888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800288c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002890:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002894:	7832      	ldrb	r2, [r6, #0]
 8002896:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80028ba:	7832      	ldrb	r2, [r6, #0]
 80028bc:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028c6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80028ca:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80028cc:	d01a      	beq.n	8002904 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028ce:	3102      	adds	r1, #2
 80028d0:	440a      	add	r2, r1
 80028d2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80028d6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 80028da:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80028dc:	6971      	ldr	r1, [r6, #20]
 80028de:	4628      	mov	r0, r5
 80028e0:	f7ff ffa2 	bl	8002828 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80028e4:	7873      	ldrb	r3, [r6, #1]
 80028e6:	7832      	ldrb	r2, [r6, #0]
 80028e8:	b99b      	cbnz	r3, 8002912 <USB_EPStartXfer+0xc6>
 80028ea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80028ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f2:	051b      	lsls	r3, r3, #20
 80028f4:	0d1b      	lsrs	r3, r3, #20
 80028f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fe:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002902:	e7c7      	b.n	8002894 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002904:	440a      	add	r2, r1
 8002906:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800290a:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 800290e:	88f2      	ldrh	r2, [r6, #6]
 8002910:	e7e4      	b.n	80028dc <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002912:	2b01      	cmp	r3, #1
 8002914:	d1be      	bne.n	8002894 <USB_EPStartXfer+0x48>
 8002916:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800291a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291e:	051b      	lsls	r3, r3, #20
 8002920:	0d1b      	lsrs	r3, r3, #20
 8002922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	e7e8      	b.n	80028fe <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 800292c:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 800292e:	bf93      	iteet	ls
 8002930:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002932:	1ad2      	subhi	r2, r2, r3
 8002934:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002936:	61b3      	strls	r3, [r6, #24]
 8002938:	bf98      	it	ls
 800293a:	4613      	movls	r3, r2
 800293c:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 800293e:	bb70      	cbnz	r0, 800299e <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002940:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002944:	2b3e      	cmp	r3, #62	; 0x3e
 8002946:	b289      	uxth	r1, r1
 8002948:	f101 0106 	add.w	r1, r1, #6
 800294c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002950:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002954:	d918      	bls.n	8002988 <USB_EPStartXfer+0x13c>
 8002956:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800295a:	06db      	lsls	r3, r3, #27
 800295c:	bf04      	itt	eq
 800295e:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002962:	b29a      	uxtheq	r2, r3
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <USB_EPStartXfer+0x1fc>)
 8002966:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800296a:	b29b      	uxth	r3, r3
 800296c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002970:	7832      	ldrb	r2, [r6, #0]
 8002972:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002986:	e790      	b.n	80028aa <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002988:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800298c:	07dc      	lsls	r4, r3, #31
 800298e:	bf44      	itt	mi
 8002990:	3201      	addmi	r2, #1
 8002992:	b292      	uxthmi	r2, r2
 8002994:	0292      	lsls	r2, r2, #10
 8002996:	b292      	uxth	r2, r2
 8002998:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 800299c:	e7e8      	b.n	8002970 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800299e:	b9b9      	cbnz	r1, 80029d0 <USB_EPStartXfer+0x184>
 80029a0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80029a4:	2b3e      	cmp	r3, #62	; 0x3e
 80029a6:	b289      	uxth	r1, r1
 80029a8:	f101 0102 	add.w	r1, r1, #2
 80029ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80029b0:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 80029b4:	d928      	bls.n	8002a08 <USB_EPStartXfer+0x1bc>
 80029b6:	f3c3 104f 	ubfx	r0, r3, #5, #16
 80029ba:	06da      	lsls	r2, r3, #27
 80029bc:	bf04      	itt	eq
 80029be:	f100 32ff 	addeq.w	r2, r0, #4294967295
 80029c2:	b290      	uxtheq	r0, r2
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <USB_EPStartXfer+0x1fc>)
 80029c6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80029ca:	b292      	uxth	r2, r2
 80029cc:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80029d0:	7872      	ldrb	r2, [r6, #1]
 80029d2:	7831      	ldrb	r1, [r6, #0]
 80029d4:	bb5a      	cbnz	r2, 8002a2e <USB_EPStartXfer+0x1e2>
 80029d6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80029da:	2b3e      	cmp	r3, #62	; 0x3e
 80029dc:	b292      	uxth	r2, r2
 80029de:	f102 0206 	add.w	r2, r2, #6
 80029e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80029e6:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80029ea:	d915      	bls.n	8002a18 <USB_EPStartXfer+0x1cc>
 80029ec:	f3c3 114f 	ubfx	r1, r3, #5, #16
 80029f0:	06dc      	lsls	r4, r3, #27
 80029f2:	bf04      	itt	eq
 80029f4:	f101 33ff 	addeq.w	r3, r1, #4294967295
 80029f8:	b299      	uxtheq	r1, r3
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <USB_EPStartXfer+0x1fc>)
 80029fc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002a06:	e7b3      	b.n	8002970 <USB_EPStartXfer+0x124>
 8002a08:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002a0c:	07d8      	lsls	r0, r3, #31
 8002a0e:	bf44      	itt	mi
 8002a10:	3201      	addmi	r2, #1
 8002a12:	b292      	uxthmi	r2, r2
 8002a14:	0292      	lsls	r2, r2, #10
 8002a16:	e7d8      	b.n	80029ca <USB_EPStartXfer+0x17e>
 8002a18:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002a1c:	07db      	lsls	r3, r3, #31
 8002a1e:	bf44      	itt	mi
 8002a20:	3101      	addmi	r1, #1
 8002a22:	b289      	uxthmi	r1, r1
 8002a24:	0289      	lsls	r1, r1, #10
 8002a26:	b289      	uxth	r1, r1
 8002a28:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002a2c:	e7a0      	b.n	8002970 <USB_EPStartXfer+0x124>
 8002a2e:	2a01      	cmp	r2, #1
 8002a30:	d19e      	bne.n	8002970 <USB_EPStartXfer+0x124>
 8002a32:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002a36:	b292      	uxth	r2, r2
 8002a38:	3202      	adds	r2, #2
 8002a3a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002a3e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002a42:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002a46:	e793      	b.n	8002970 <USB_EPStartXfer+0x124>
 8002a48:	ffff8000 	.word	0xffff8000

08002a4c <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002a4c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002a4e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002a50:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a52:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002a56:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a58:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	d100      	bne.n	8002a62 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002a60:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002a62:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002a66:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002a6a:	3401      	adds	r4, #1
 8002a6c:	e7f6      	b.n	8002a5c <USB_ReadPMA+0x10>

08002a6e <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a6e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002a72:	b11b      	cbz	r3, 8002a7c <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002a74:	2000      	movs	r0, #0
 8002a76:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002a7a:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002a7c:	2002      	movs	r0, #2
  }
}
 8002a7e:	4770      	bx	lr

08002a80 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002a80:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002a84:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002a86:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002a8a:	b15b      	cbz	r3, 8002aa4 <USBD_CDC_EP0_RxReady+0x24>
 8002a8c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002a90:	28ff      	cmp	r0, #255	; 0xff
 8002a92:	d007      	beq.n	8002aa4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002a9e:	23ff      	movs	r3, #255	; 0xff
 8002aa0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	bd10      	pop	{r4, pc}

08002aa8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002aa8:	2343      	movs	r3, #67	; 0x43
 8002aaa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002aac:	4800      	ldr	r0, [pc, #0]	; (8002ab0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002aae:	4770      	bx	lr
 8002ab0:	20000040 	.word	0x20000040

08002ab4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002ab4:	2343      	movs	r3, #67	; 0x43
 8002ab6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002ab8:	4800      	ldr	r0, [pc, #0]	; (8002abc <USBD_CDC_GetHSCfgDesc+0x8>)
 8002aba:	4770      	bx	lr
 8002abc:	20000084 	.word	0x20000084

08002ac0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002ac0:	2343      	movs	r3, #67	; 0x43
 8002ac2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002ac4:	4800      	ldr	r0, [pc, #0]	; (8002ac8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002ac6:	4770      	bx	lr
 8002ac8:	200000d4 	.word	0x200000d4

08002acc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002acc:	230a      	movs	r3, #10
 8002ace:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002ad0:	4800      	ldr	r0, [pc, #0]	; (8002ad4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002ad2:	4770      	bx	lr
 8002ad4:	200000c8 	.word	0x200000c8

08002ad8 <USBD_CDC_DataOut>:
{      
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002adc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002ae0:	f002 f85c 	bl	8004b9c <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002ae4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002ae8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002aec:	b14b      	cbz	r3, 8002b02 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002aee:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002af2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002afc:	4798      	blx	r3
    return USBD_OK;
 8002afe:	2000      	movs	r0, #0
 8002b00:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002b02:	2002      	movs	r0, #2
}
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b08 <USBD_CDC_Setup>:
{
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b0a:	780f      	ldrb	r7, [r1, #0]
{
 8002b0c:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b0e:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002b12:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b14:	d023      	beq.n	8002b5e <USBD_CDC_Setup+0x56>
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d119      	bne.n	8002b4e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002b1a:	88ca      	ldrh	r2, [r1, #6]
 8002b1c:	784b      	ldrb	r3, [r1, #1]
 8002b1e:	b1c2      	cbz	r2, 8002b52 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002b20:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b22:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002b26:	d50b      	bpl.n	8002b40 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002b28:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	688f      	ldr	r7, [r1, #8]
 8002b30:	4629      	mov	r1, r5
 8002b32:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002b34:	4629      	mov	r1, r5
 8002b36:	4630      	mov	r0, r6
 8002b38:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8002b3a:	f000 fb8a 	bl	8003252 <USBD_CtlSendData>
      break;
 8002b3e:	e006      	b.n	8002b4e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002b40:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002b44:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f000 fb97 	bl	800327c <USBD_CtlPrepareRx>
}
 8002b4e:	2000      	movs	r0, #0
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002b52:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002b56:	6884      	ldr	r4, [r0, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	47a0      	blx	r4
 8002b5c:	e7f7      	b.n	8002b4e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002b5e:	784b      	ldrb	r3, [r1, #1]
 8002b60:	2b0a      	cmp	r3, #10
 8002b62:	d1f4      	bne.n	8002b4e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002b64:	2201      	movs	r2, #1
 8002b66:	4901      	ldr	r1, [pc, #4]	; (8002b6c <USBD_CDC_Setup+0x64>)
 8002b68:	e7e7      	b.n	8002b3a <USBD_CDC_Setup+0x32>
 8002b6a:	bf00      	nop
 8002b6c:	20001b18 	.word	0x20001b18

08002b70 <USBD_CDC_DeInit>:
{
 8002b70:	b510      	push	{r4, lr}
 8002b72:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002b74:	2181      	movs	r1, #129	; 0x81
 8002b76:	f001 ffad 	bl	8004ad4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f001 ffa9 	bl	8004ad4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002b82:	2182      	movs	r1, #130	; 0x82
 8002b84:	4620      	mov	r0, r4
 8002b86:	f001 ffa5 	bl	8004ad4 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002b8a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002b8e:	b153      	cbz	r3, 8002ba6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002b90:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002b98:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002b9c:	f002 f808 	bl	8004bb0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	bd10      	pop	{r4, pc}

08002baa <USBD_CDC_Init>:
{
 8002baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bac:	7c03      	ldrb	r3, [r0, #16]
{
 8002bae:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bb0:	bb7b      	cbnz	r3, 8002c12 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	2181      	movs	r1, #129	; 0x81
 8002bba:	f001 ff7b 	bl	8004ab4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f001 ff74 	bl	8004ab4 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002bcc:	2308      	movs	r3, #8
 8002bce:	2203      	movs	r2, #3
 8002bd0:	2182      	movs	r1, #130	; 0x82
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f001 ff6e 	bl	8004ab4 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002bd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002bdc:	f001 ffe4 	bl	8004ba8 <USBD_static_malloc>
 8002be0:	4606      	mov	r6, r0
 8002be2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002be6:	b320      	cbz	r0, 8002c32 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002be8:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002bea:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bf2:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002bf4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002bf8:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002bfc:	b987      	cbnz	r7, 8002c20 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c02:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002c06:	2101      	movs	r1, #1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f001 ffb9 	bl	8004b80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002c0e:	4638      	mov	r0, r7
 8002c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002c12:	2340      	movs	r3, #64	; 0x40
 8002c14:	2202      	movs	r2, #2
 8002c16:	2181      	movs	r1, #129	; 0x81
 8002c18:	f001 ff4c 	bl	8004ab4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002c1c:	2340      	movs	r3, #64	; 0x40
 8002c1e:	e7d0      	b.n	8002bc2 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002c20:	2340      	movs	r3, #64	; 0x40
 8002c22:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002c26:	2101      	movs	r1, #1
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f001 ffa9 	bl	8004b80 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002c2e:	4628      	mov	r0, r5
 8002c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002c32:	2001      	movs	r0, #1
}
 8002c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c36 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002c36:	b119      	cbz	r1, 8002c40 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002c38:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002c40:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002c42:	4770      	bx	lr

08002c44 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c44:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002c48:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002c4a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002c4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002c52:	4770      	bx	lr

08002c54 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002c54:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002c58:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002c5a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002c5e:	4770      	bx	lr

08002c60 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c60:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002c64:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002c66:	b172      	cbz	r2, 8002c86 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002c68:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	b964      	cbnz	r4, 8002c8a <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8002c70:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002c74:	2181      	movs	r1, #129	; 0x81
 8002c76:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002c7a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002c7e:	f001 ff71 	bl	8004b64 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8002c82:	4620      	mov	r0, r4
 8002c84:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002c86:	2002      	movs	r0, #2
 8002c88:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002c8a:	4618      	mov	r0, r3
  }
}
 8002c8c:	bd10      	pop	{r4, pc}

08002c8e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002c8e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002c92:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002c94:	b162      	cbz	r2, 8002cb0 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c96:	7c04      	ldrb	r4, [r0, #16]
 8002c98:	b944      	cbnz	r4, 8002cac <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002c9e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	f001 ff6c 	bl	8004b80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002ca8:	2000      	movs	r0, #0
 8002caa:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002cac:	2340      	movs	r3, #64	; 0x40
 8002cae:	e7f6      	b.n	8002c9e <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002cb0:	2002      	movs	r0, #2
  }
}
 8002cb2:	bd10      	pop	{r4, pc}

08002cb4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002cb4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002cb6:	b180      	cbz	r0, 8002cda <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002cb8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cbc:	b113      	cbz	r3, 8002cc4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002cc4:	b109      	cbz	r1, 8002cca <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002cc6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002cca:	2301      	movs	r3, #1
  pdev->id = id;
 8002ccc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002cce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002cd2:	f001 fe99 	bl	8004a08 <USBD_LL_Init>
  
  return USBD_OK; 
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002cda:	2002      	movs	r0, #2
}
 8002cdc:	bd08      	pop	{r3, pc}

08002cde <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002cde:	b119      	cbz	r1, 8002ce8 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002ce0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002ce8:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002cea:	4770      	bx	lr

08002cec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002cec:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002cee:	f001 fed3 	bl	8004a98 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	bd08      	pop	{r3, pc}

08002cf6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002cf6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002cf8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002cfc:	b90b      	cbnz	r3, 8002d02 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002cfe:	2002      	movs	r0, #2
 8002d00:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4798      	blx	r3
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1f9      	bne.n	8002cfe <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002d0a:	bd08      	pop	{r3, pc}

08002d0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d0c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002d0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4798      	blx	r3
  return USBD_OK;
}
 8002d16:	2000      	movs	r0, #0
 8002d18:	bd08      	pop	{r3, pc}

08002d1a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d1a:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d1c:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002d20:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d22:	4628      	mov	r0, r5
 8002d24:	f000 fa65 	bl	80031f2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d28:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002d2a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d2e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002d32:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002d36:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002d3a:	f001 031f 	and.w	r3, r1, #31
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d00e      	beq.n	8002d60 <USBD_LL_SetupStage+0x46>
 8002d42:	d307      	bcc.n	8002d54 <USBD_LL_SetupStage+0x3a>
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d010      	beq.n	8002d6a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002d48:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f001 fecf 	bl	8004af0 <USBD_LL_StallEP>
    break;
 8002d52:	e003      	b.n	8002d5c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 f8d6 	bl	8002f08 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002d60:	4629      	mov	r1, r5
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 f9ca 	bl	80030fc <USBD_StdItfReq>
    break;
 8002d68:	e7f8      	b.n	8002d5c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 f9dd 	bl	800312c <USBD_StdEPReq>
    break;
 8002d72:	e7f3      	b.n	8002d5c <USBD_LL_SetupStage+0x42>

08002d74 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4604      	mov	r4, r0
 8002d78:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002d7a:	bb11      	cbnz	r1, 8002dc2 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002d7c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d10f      	bne.n	8002da4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002d84:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002d88:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d90b      	bls.n	8002da8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002d90:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002d92:	429a      	cmp	r2, r3
 8002d94:	bf28      	it	cs
 8002d96:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002d98:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f000 fa7b 	bl	800329a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002da4:	2000      	movs	r0, #0
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002da8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	b123      	cbz	r3, 8002dba <USBD_LL_DataOutStage+0x46>
 8002db0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002db4:	2a03      	cmp	r2, #3
 8002db6:	d100      	bne.n	8002dba <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002db8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f000 fa75 	bl	80032aa <USBD_CtlSendStatus>
 8002dc0:	e7f0      	b.n	8002da4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002dc2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0eb      	beq.n	8002da4 <USBD_LL_DataOutStage+0x30>
 8002dcc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002dd0:	2a03      	cmp	r2, #3
 8002dd2:	d1e7      	bne.n	8002da4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002dd4:	4798      	blx	r3
 8002dd6:	e7e5      	b.n	8002da4 <USBD_LL_DataOutStage+0x30>

08002dd8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4613      	mov	r3, r2
 8002ddc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002dde:	460e      	mov	r6, r1
 8002de0:	2900      	cmp	r1, #0
 8002de2:	d13d      	bne.n	8002e60 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002de4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002de8:	2a02      	cmp	r2, #2
 8002dea:	d10f      	bne.n	8002e0c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002dec:	69c5      	ldr	r5, [r0, #28]
 8002dee:	6a02      	ldr	r2, [r0, #32]
 8002df0:	4295      	cmp	r5, r2
 8002df2:	d914      	bls.n	8002e1e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002df4:	1aaa      	subs	r2, r5, r2
 8002df6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002df8:	4619      	mov	r1, r3
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	f000 fa36 	bl	800326c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e00:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e02:	461a      	mov	r2, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	4620      	mov	r0, r4
 8002e08:	f001 feba 	bl	8004b80 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002e0c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002e1e:	6983      	ldr	r3, [r0, #24]
 8002e20:	fbb3 f5f2 	udiv	r5, r3, r2
 8002e24:	fb02 3515 	mls	r5, r2, r5, r3
 8002e28:	b965      	cbnz	r5, 8002e44 <USBD_LL_DataInStage+0x6c>
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d80a      	bhi.n	8002e44 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002e2e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d206      	bcs.n	8002e44 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002e36:	462a      	mov	r2, r5
 8002e38:	f000 fa18 	bl	800326c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002e3c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002e40:	462b      	mov	r3, r5
 8002e42:	e7de      	b.n	8002e02 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002e44:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	b12b      	cbz	r3, 8002e58 <USBD_LL_DataInStage+0x80>
 8002e4c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002e50:	2a03      	cmp	r2, #3
 8002e52:	d101      	bne.n	8002e58 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002e54:	4620      	mov	r0, r4
 8002e56:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 fa31 	bl	80032c0 <USBD_CtlReceiveStatus>
 8002e5e:	e7d5      	b.n	8002e0c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002e60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0d7      	beq.n	8002e1a <USBD_LL_DataInStage+0x42>
 8002e6a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e6e:	2a03      	cmp	r2, #3
 8002e70:	d1d3      	bne.n	8002e1a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002e72:	4798      	blx	r3
 8002e74:	e7d1      	b.n	8002e1a <USBD_LL_DataInStage+0x42>

08002e76 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002e76:	2200      	movs	r2, #0
{
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e7c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002e7e:	4611      	mov	r1, r2
 8002e80:	2340      	movs	r3, #64	; 0x40
 8002e82:	f001 fe17 	bl	8004ab4 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002e86:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002e88:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	4620      	mov	r0, r4
 8002e92:	f001 fe0f 	bl	8004ab4 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002e9c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002ea0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002ea2:	b12b      	cbz	r3, 8002eb0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002ea4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002ea8:	7921      	ldrb	r1, [r4, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4620      	mov	r0, r4
 8002eae:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}

08002eb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002eb4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	4770      	bx	lr

08002eba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002eba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ebe:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ec8:	2000      	movs	r0, #0
 8002eca:	4770      	bx	lr

08002ecc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002ecc:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002ed0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	4770      	bx	lr

08002ed8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002ed8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002eda:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ede:	2a03      	cmp	r2, #3
 8002ee0:	d104      	bne.n	8002eec <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002ee2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	b103      	cbz	r3, 8002eec <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002eea:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002eec:	2000      	movs	r0, #0
 8002eee:	bd08      	pop	{r3, pc}

08002ef0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	f001 fdfb 	bl	8004af0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002efa:	4620      	mov	r0, r4
}
 8002efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002f00:	2100      	movs	r1, #0
 8002f02:	f001 bdf5 	b.w	8004af0 <USBD_LL_StallEP>
	...

08002f08 <USBD_StdDevReq>:
{
 8002f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002f0a:	784b      	ldrb	r3, [r1, #1]
{
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d879      	bhi.n	8003008 <USBD_StdDevReq+0x100>
 8002f14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f18:	00e500c9 	.word	0x00e500c9
 8002f1c:	00d90078 	.word	0x00d90078
 8002f20:	006d0078 	.word	0x006d0078
 8002f24:	0078000a 	.word	0x0078000a
 8002f28:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002f2c:	884b      	ldrh	r3, [r1, #2]
 8002f2e:	0a1a      	lsrs	r2, r3, #8
 8002f30:	3a01      	subs	r2, #1
 8002f32:	2a06      	cmp	r2, #6
 8002f34:	d868      	bhi.n	8003008 <USBD_StdDevReq+0x100>
 8002f36:	e8df f002 	tbb	[pc, r2]
 8002f3a:	1c04      	.short	0x1c04
 8002f3c:	49676729 	.word	0x49676729
 8002f40:	52          	.byte	0x52
 8002f41:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002f42:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002f46:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002f48:	f10d 0106 	add.w	r1, sp, #6
 8002f4c:	7c20      	ldrb	r0, [r4, #16]
 8002f4e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002f50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d067      	beq.n	8003028 <USBD_StdDevReq+0x120>
 8002f58:	88eb      	ldrh	r3, [r5, #6]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d064      	beq.n	8003028 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf28      	it	cs
 8002f62:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002f64:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002f66:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 f971 	bl	8003252 <USBD_CtlSendData>
 8002f70:	e05a      	b.n	8003028 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002f72:	7c02      	ldrb	r2, [r0, #16]
 8002f74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f78:	b932      	cbnz	r2, 8002f88 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f7c:	f10d 0006 	add.w	r0, sp, #6
 8002f80:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f82:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f84:	7043      	strb	r3, [r0, #1]
 8002f86:	e7e3      	b.n	8002f50 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	e7f7      	b.n	8002f7c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d83a      	bhi.n	8003008 <USBD_StdDevReq+0x100>
 8002f92:	e8df f003 	tbb	[pc, r3]
 8002f96:	0703      	.short	0x0703
 8002f98:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002f9c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	e7d1      	b.n	8002f48 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002fa4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	e7cd      	b.n	8002f48 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002fac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	e7c9      	b.n	8002f48 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002fb4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	e7c5      	b.n	8002f48 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002fbc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	e7c1      	b.n	8002f48 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002fc4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	e7bd      	b.n	8002f48 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002fcc:	7c03      	ldrb	r3, [r0, #16]
 8002fce:	b9db      	cbnz	r3, 8003008 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002fd0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fd4:	f10d 0006 	add.w	r0, sp, #6
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	4798      	blx	r3
 8002fdc:	e7b8      	b.n	8002f50 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002fde:	7c03      	ldrb	r3, [r0, #16]
 8002fe0:	b993      	cbnz	r3, 8003008 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002fe2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002fe6:	f10d 0006 	add.w	r0, sp, #6
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	e7c8      	b.n	8002f84 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002ff2:	888b      	ldrh	r3, [r1, #4]
 8002ff4:	b943      	cbnz	r3, 8003008 <USBD_StdDevReq+0x100>
 8002ff6:	88cb      	ldrh	r3, [r1, #6]
 8002ff8:	b933      	cbnz	r3, 8003008 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002ffa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002ffe:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003000:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003002:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003006:	d103      	bne.n	8003010 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff ff71 	bl	8002ef0 <USBD_CtlError.constprop.0>
    break;
 800300e:	e00b      	b.n	8003028 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003010:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003014:	4629      	mov	r1, r5
 8003016:	f001 fd97 	bl	8004b48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800301a:	4620      	mov	r0, r4
 800301c:	f000 f945 	bl	80032aa <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003020:	b12d      	cbz	r5, 800302e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003022:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003024:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003028:	2000      	movs	r0, #0
 800302a:	b003      	add	sp, #12
 800302c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800302e:	2301      	movs	r3, #1
 8003030:	e7f8      	b.n	8003024 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8003032:	7889      	ldrb	r1, [r1, #2]
 8003034:	4d30      	ldr	r5, [pc, #192]	; (80030f8 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003036:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003038:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800303a:	d8e5      	bhi.n	8003008 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800303c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003040:	2b02      	cmp	r3, #2
 8003042:	d00c      	beq.n	800305e <USBD_StdDevReq+0x156>
 8003044:	2b03      	cmp	r3, #3
 8003046:	d1df      	bne.n	8003008 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003048:	b9b1      	cbnz	r1, 8003078 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800304a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800304c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800304e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 8003052:	f7ff fe5b 	bl	8002d0c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003056:	4620      	mov	r0, r4
 8003058:	f000 f927 	bl	80032aa <USBD_CtlSendStatus>
 800305c:	e7e4      	b.n	8003028 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800305e:	2900      	cmp	r1, #0
 8003060:	d0f9      	beq.n	8003056 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8003062:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003064:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003066:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003068:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff fe42 	bl	8002cf6 <USBD_SetClassConfig>
 8003072:	2802      	cmp	r0, #2
 8003074:	d1ef      	bne.n	8003056 <USBD_StdDevReq+0x14e>
 8003076:	e7c7      	b.n	8003008 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8003078:	6841      	ldr	r1, [r0, #4]
 800307a:	2901      	cmp	r1, #1
 800307c:	d0eb      	beq.n	8003056 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800307e:	b2c9      	uxtb	r1, r1
 8003080:	f7ff fe44 	bl	8002d0c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003084:	7829      	ldrb	r1, [r5, #0]
 8003086:	6061      	str	r1, [r4, #4]
 8003088:	e7f0      	b.n	800306c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800308a:	88ca      	ldrh	r2, [r1, #6]
 800308c:	2a01      	cmp	r2, #1
 800308e:	d1bb      	bne.n	8003008 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8003090:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <USBD_StdDevReq+0x198>
 8003098:	2b03      	cmp	r3, #3
 800309a:	d1b5      	bne.n	8003008 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800309c:	1d01      	adds	r1, r0, #4
 800309e:	e764      	b.n	8002f6a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80030a0:	4601      	mov	r1, r0
 80030a2:	2300      	movs	r3, #0
 80030a4:	f841 3f08 	str.w	r3, [r1, #8]!
 80030a8:	e75f      	b.n	8002f6a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80030aa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030ae:	3b02      	subs	r3, #2
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d8a9      	bhi.n	8003008 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80030b4:	2301      	movs	r3, #1
 80030b6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80030b8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80030bc:	b10b      	cbz	r3, 80030c2 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80030be:	2303      	movs	r3, #3
 80030c0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80030c2:	2202      	movs	r2, #2
 80030c4:	f104 010c 	add.w	r1, r4, #12
 80030c8:	e74f      	b.n	8002f6a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030ca:	884b      	ldrh	r3, [r1, #2]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d1ab      	bne.n	8003028 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80030d0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80030d4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80030d8:	4629      	mov	r1, r5
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4620      	mov	r0, r4
 80030de:	4798      	blx	r3
 80030e0:	e7b9      	b.n	8003056 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80030e2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030e6:	3b02      	subs	r3, #2
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d88d      	bhi.n	8003008 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80030ec:	884b      	ldrh	r3, [r1, #2]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d19a      	bne.n	8003028 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80030f2:	2300      	movs	r3, #0
 80030f4:	e7ec      	b.n	80030d0 <USBD_StdDevReq+0x1c8>
 80030f6:	bf00      	nop
 80030f8:	20001b19 	.word	0x20001b19

080030fc <USBD_StdItfReq>:
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80030fe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8003102:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003104:	2b03      	cmp	r3, #3
{
 8003106:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003108:	d10d      	bne.n	8003126 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800310a:	790b      	ldrb	r3, [r1, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d80a      	bhi.n	8003126 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003110:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003118:	88eb      	ldrh	r3, [r5, #6]
 800311a:	b913      	cbnz	r3, 8003122 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800311c:	4620      	mov	r0, r4
 800311e:	f000 f8c4 	bl	80032aa <USBD_CtlSendStatus>
}
 8003122:	2000      	movs	r0, #0
 8003124:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003126:	f7ff fee3 	bl	8002ef0 <USBD_CtlError.constprop.0>
    break;
 800312a:	e7fa      	b.n	8003122 <USBD_StdItfReq+0x26>

0800312c <USBD_StdEPReq>:
{
 800312c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800312e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003130:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003132:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003136:	2a20      	cmp	r2, #32
{
 8003138:	4604      	mov	r4, r0
 800313a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800313c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800313e:	d105      	bne.n	800314c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003140:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4798      	blx	r3
}
 8003148:	2000      	movs	r0, #0
 800314a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800314c:	784a      	ldrb	r2, [r1, #1]
 800314e:	2a01      	cmp	r2, #1
 8003150:	d01c      	beq.n	800318c <USBD_StdEPReq+0x60>
 8003152:	d32a      	bcc.n	80031aa <USBD_StdEPReq+0x7e>
 8003154:	2a03      	cmp	r2, #3
 8003156:	d1f7      	bne.n	8003148 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003158:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800315c:	2a02      	cmp	r2, #2
 800315e:	d040      	beq.n	80031e2 <USBD_StdEPReq+0xb6>
 8003160:	2a03      	cmp	r2, #3
 8003162:	d002      	beq.n	800316a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003164:	f7ff fec4 	bl	8002ef0 <USBD_CtlError.constprop.0>
      break;
 8003168:	e7ee      	b.n	8003148 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800316a:	884a      	ldrh	r2, [r1, #2]
 800316c:	b922      	cbnz	r2, 8003178 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800316e:	065e      	lsls	r6, r3, #25
 8003170:	d002      	beq.n	8003178 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8003172:	4619      	mov	r1, r3
 8003174:	f001 fcbc 	bl	8004af0 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003178:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800317c:	4629      	mov	r1, r5
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4620      	mov	r0, r4
 8003182:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003184:	4620      	mov	r0, r4
 8003186:	f000 f890 	bl	80032aa <USBD_CtlSendStatus>
 800318a:	e7dd      	b.n	8003148 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800318c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003190:	2a02      	cmp	r2, #2
 8003192:	d026      	beq.n	80031e2 <USBD_StdEPReq+0xb6>
 8003194:	2a03      	cmp	r2, #3
 8003196:	d1e5      	bne.n	8003164 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003198:	884a      	ldrh	r2, [r1, #2]
 800319a:	2a00      	cmp	r2, #0
 800319c:	d1d4      	bne.n	8003148 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800319e:	0659      	lsls	r1, r3, #25
 80031a0:	d0f0      	beq.n	8003184 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80031a2:	4619      	mov	r1, r3
 80031a4:	f001 fcb2 	bl	8004b0c <USBD_LL_ClearStallEP>
 80031a8:	e7e6      	b.n	8003178 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80031aa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80031ae:	2a02      	cmp	r2, #2
 80031b0:	d017      	beq.n	80031e2 <USBD_StdEPReq+0xb6>
 80031b2:	2a03      	cmp	r2, #3
 80031b4:	d1d6      	bne.n	8003164 <USBD_StdEPReq+0x38>
 80031b6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80031ba:	f016 0f80 	tst.w	r6, #128	; 0x80
 80031be:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80031c2:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80031c4:	bf14      	ite	ne
 80031c6:	3514      	addne	r5, #20
 80031c8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80031cc:	f001 fcac 	bl	8004b28 <USBD_LL_IsStallEP>
 80031d0:	b168      	cbz	r0, 80031ee <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80031d2:	2301      	movs	r3, #1
 80031d4:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80031d6:	2202      	movs	r2, #2
 80031d8:	4629      	mov	r1, r5
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f839 	bl	8003252 <USBD_CtlSendData>
      break;
 80031e0:	e7b2      	b.n	8003148 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80031e2:	065a      	lsls	r2, r3, #25
 80031e4:	d0b0      	beq.n	8003148 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80031e6:	4619      	mov	r1, r3
 80031e8:	f001 fc82 	bl	8004af0 <USBD_LL_StallEP>
 80031ec:	e7ac      	b.n	8003148 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80031ee:	6028      	str	r0, [r5, #0]
 80031f0:	e7f1      	b.n	80031d6 <USBD_StdEPReq+0xaa>

080031f2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80031f2:	780b      	ldrb	r3, [r1, #0]
 80031f4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80031f6:	784b      	ldrb	r3, [r1, #1]
 80031f8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80031fa:	78ca      	ldrb	r2, [r1, #3]
 80031fc:	788b      	ldrb	r3, [r1, #2]
 80031fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003202:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003204:	794a      	ldrb	r2, [r1, #5]
 8003206:	790b      	ldrb	r3, [r1, #4]
 8003208:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800320c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800320e:	79ca      	ldrb	r2, [r1, #7]
 8003210:	798b      	ldrb	r3, [r1, #6]
 8003212:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003216:	80c3      	strh	r3, [r0, #6]
 8003218:	4770      	bx	lr

0800321a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800321a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800321c:	b188      	cbz	r0, 8003242 <USBD_GetString+0x28>
 800321e:	4605      	mov	r5, r0
 8003220:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2c00      	cmp	r4, #0
 800322a:	d1f9      	bne.n	8003220 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	3302      	adds	r3, #2
 8003230:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003232:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003234:	2303      	movs	r3, #3
 8003236:	704b      	strb	r3, [r1, #1]
 8003238:	2302      	movs	r3, #2
 800323a:	3801      	subs	r0, #1
    while (*desc != '\0') 
 800323c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003240:	b905      	cbnz	r5, 8003244 <USBD_GetString+0x2a>
 8003242:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	54cd      	strb	r5, [r1, r3]
 8003248:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 800324a:	3302      	adds	r3, #2
 800324c:	b2db      	uxtb	r3, r3
 800324e:	548c      	strb	r4, [r1, r2]
 8003250:	e7f4      	b.n	800323c <USBD_GetString+0x22>

08003252 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003252:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003254:	2202      	movs	r2, #2
{
 8003256:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003258:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800325c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800325e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003260:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003262:	2100      	movs	r1, #0
 8003264:	f001 fc7e 	bl	8004b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003268:	2000      	movs	r0, #0
 800326a:	bd10      	pop	{r4, pc}

0800326c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800326c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800326e:	4613      	mov	r3, r2
 8003270:	460a      	mov	r2, r1
 8003272:	2100      	movs	r1, #0
 8003274:	f001 fc76 	bl	8004b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003278:	2000      	movs	r0, #0
 800327a:	bd08      	pop	{r3, pc}

0800327c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800327c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800327e:	2203      	movs	r2, #3
{
 8003280:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003282:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8003286:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800328a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800328c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8003290:	2100      	movs	r1, #0
 8003292:	f001 fc75 	bl	8004b80 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8003296:	2000      	movs	r0, #0
 8003298:	bd10      	pop	{r4, pc}

0800329a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800329a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800329c:	4613      	mov	r3, r2
 800329e:	460a      	mov	r2, r1
 80032a0:	2100      	movs	r1, #0
 80032a2:	f001 fc6d 	bl	8004b80 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80032a6:	2000      	movs	r0, #0
 80032a8:	bd08      	pop	{r3, pc}

080032aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80032aa:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80032ac:	2304      	movs	r3, #4
 80032ae:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80032b2:	2300      	movs	r3, #0
 80032b4:	461a      	mov	r2, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	f001 fc54 	bl	8004b64 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80032bc:	2000      	movs	r0, #0
 80032be:	bd08      	pop	{r3, pc}

080032c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80032c0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80032c2:	2305      	movs	r3, #5
 80032c4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80032c8:	2300      	movs	r3, #0
 80032ca:	461a      	mov	r2, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	f001 fc57 	bl	8004b80 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80032d2:	2000      	movs	r0, #0
 80032d4:	bd08      	pop	{r3, pc}
	...

080032d8 <ILI9341_SPI_Init>:
void ILI9341_SPI_Init(void)
{
	// SPI and GPIO initialized in main.c, generated by cubemx before I added lcd code // Jacek M.
	//MX_SPI1_Init();																							//SPI INIT
	//MX_GPIO_Init();																							//GPIO INIT
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80032d8:	2200      	movs	r2, #0
 80032da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032de:	4801      	ldr	r0, [pc, #4]	; (80032e4 <ILI9341_SPI_Init+0xc>)
 80032e0:	f7fd b8fa 	b.w	80004d8 <HAL_GPIO_WritePin>
 80032e4:	40010c00 	.word	0x40010c00

080032e8 <ILI9341_SPI_Send>:
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80032e8:	2301      	movs	r3, #1
{
 80032ea:	b507      	push	{r0, r1, r2, lr}
 80032ec:	a902      	add	r1, sp, #8
 80032ee:	f801 0d01 	strb.w	r0, [r1, #-1]!
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80032f2:	461a      	mov	r2, r3
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <ILI9341_SPI_Send+0x18>)
 80032f6:	f7fe fc14 	bl	8001b22 <HAL_SPI_Transmit>
}
 80032fa:	b003      	add	sp, #12
 80032fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003300:	20001e64 	.word	0x20001e64

08003304 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003308:	4c0b      	ldr	r4, [pc, #44]	; (8003338 <ILI9341_Write_Command+0x34>)
 800330a:	2200      	movs	r2, #0
 800330c:	4620      	mov	r0, r4
 800330e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003312:	f7fd f8e1 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800331c:	4620      	mov	r0, r4
 800331e:	f7fd f8db 	bl	80004d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8003322:	4628      	mov	r0, r5
 8003324:	f7ff ffe0 	bl	80032e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003328:	4620      	mov	r0, r4
}
 800332a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003334:	f7fd b8d0 	b.w	80004d8 <HAL_GPIO_WritePin>
 8003338:	40010c00 	.word	0x40010c00

0800333c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4605      	mov	r5, r0
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003340:	4c0b      	ldr	r4, [pc, #44]	; (8003370 <ILI9341_Write_Data+0x34>)
 8003342:	2201      	movs	r2, #1
 8003344:	4620      	mov	r0, r4
 8003346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800334a:	f7fd f8c5 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800334e:	2200      	movs	r2, #0
 8003350:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003354:	4620      	mov	r0, r4
 8003356:	f7fd f8bf 	bl	80004d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);
 800335a:	4628      	mov	r0, r5
 800335c:	f7ff ffc4 	bl	80032e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003360:	4620      	mov	r0, r4
}
 8003362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003366:	2201      	movs	r2, #1
 8003368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800336c:	f7fd b8b4 	b.w	80004d8 <HAL_GPIO_WritePin>
 8003370:	40010c00 	.word	0x40010c00

08003374 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	4607      	mov	r7, r0
 8003378:	4616      	mov	r6, r2
 800337a:	460d      	mov	r5, r1
 800337c:	461c      	mov	r4, r3
ILI9341_Write_Command(0x2A);
 800337e:	202a      	movs	r0, #42	; 0x2a
 8003380:	f7ff ffc0 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8003384:	0a38      	lsrs	r0, r7, #8
 8003386:	f7ff ffd9 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800338a:	b2f8      	uxtb	r0, r7
 800338c:	f7ff ffd6 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003390:	0a30      	lsrs	r0, r6, #8
 8003392:	f7ff ffd3 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003396:	b2f0      	uxtb	r0, r6
 8003398:	f7ff ffd0 	bl	800333c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800339c:	202b      	movs	r0, #43	; 0x2b
 800339e:	f7ff ffb1 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80033a2:	0a28      	lsrs	r0, r5, #8
 80033a4:	f7ff ffca 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80033a8:	b2e8      	uxtb	r0, r5
 80033aa:	f7ff ffc7 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80033ae:	0a20      	lsrs	r0, r4, #8
 80033b0:	f7ff ffc4 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80033b4:	b2e0      	uxtb	r0, r4
 80033b6:	f7ff ffc1 	bl	800333c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
}
 80033ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
ILI9341_Write_Command(0x2C);
 80033be:	202c      	movs	r0, #44	; 0x2c
 80033c0:	f7ff bfa0 	b.w	8003304 <ILI9341_Write_Command>

080033c4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80033c4:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80033c6:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <ILI9341_Reset+0x38>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7fd f882 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80033d4:	20c8      	movs	r0, #200	; 0xc8
 80033d6:	f7fc ff13 	bl	8000200 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7fd f879 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80033e6:	20c8      	movs	r0, #200	; 0xc8
 80033e8:	f7fc ff0a 	bl	8000200 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80033ec:	4620      	mov	r0, r4
}
 80033ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80033f2:	2201      	movs	r2, #1
 80033f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f8:	f7fd b86e 	b.w	80004d8 <HAL_GPIO_WritePin>
 80033fc:	40010c00 	.word	0x40010c00

08003400 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8003400:	b510      	push	{r4, lr}
 8003402:	4604      	mov	r4, r0

uint8_t screen_rotation = Rotation;

ILI9341_Write_Command(0x36);
 8003404:	2036      	movs	r0, #54	; 0x36
 8003406:	f7ff ff7d 	bl	8003304 <ILI9341_Write_Command>
HAL_Delay(1);
 800340a:	2001      	movs	r0, #1
 800340c:	f7fc fef8 	bl	8000200 <HAL_Delay>

switch(screen_rotation)
 8003410:	2c03      	cmp	r4, #3
 8003412:	d80d      	bhi.n	8003430 <ILI9341_Set_Rotation+0x30>
 8003414:	e8df f004 	tbb	[pc, r4]
 8003418:	18160d02 	.word	0x18160d02
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800341c:	2048      	movs	r0, #72	; 0x48
			ILI9341_Write_Data(0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800341e:	f7ff ff8d 	bl	800333c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003422:	22f0      	movs	r2, #240	; 0xf0
 8003424:	4b09      	ldr	r3, [pc, #36]	; (800344c <ILI9341_Set_Rotation+0x4c>)
 8003426:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003428:	f44f 72a0 	mov.w	r2, #320	; 0x140
			break;
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <ILI9341_Set_Rotation+0x50>)
 800342e:	801a      	strh	r2, [r3, #0]
 8003430:	bd10      	pop	{r4, pc}
			ILI9341_Write_Data(0x20|0x08);
 8003432:	2028      	movs	r0, #40	; 0x28
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003434:	f7ff ff82 	bl	800333c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003438:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <ILI9341_Set_Rotation+0x4c>)
 800343e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003440:	22f0      	movs	r2, #240	; 0xf0
 8003442:	e7f3      	b.n	800342c <ILI9341_Set_Rotation+0x2c>
			ILI9341_Write_Data(0x80|0x08);
 8003444:	2088      	movs	r0, #136	; 0x88
 8003446:	e7ea      	b.n	800341e <ILI9341_Set_Rotation+0x1e>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003448:	20e8      	movs	r0, #232	; 0xe8
 800344a:	e7f3      	b.n	8003434 <ILI9341_Set_Rotation+0x34>
 800344c:	2000011c 	.word	0x2000011c
 8003450:	2000011a 	.word	0x2000011a

08003454 <ILI9341_Enable>:
}

/*Enable LCD display*/
void ILI9341_Enable(void)
{
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003454:	2201      	movs	r2, #1
 8003456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800345a:	4801      	ldr	r0, [pc, #4]	; (8003460 <ILI9341_Enable+0xc>)
 800345c:	f7fd b83c 	b.w	80004d8 <HAL_GPIO_WritePin>
 8003460:	40010c00 	.word	0x40010c00

08003464 <ILI9341_Init>:
}

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003464:	b508      	push	{r3, lr}

ILI9341_Enable();
 8003466:	f7ff fff5 	bl	8003454 <ILI9341_Enable>
ILI9341_SPI_Init();
 800346a:	f7ff ff35 	bl	80032d8 <ILI9341_SPI_Init>
ILI9341_Reset();
 800346e:	f7ff ffa9 	bl	80033c4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003472:	2001      	movs	r0, #1
 8003474:	f7ff ff46 	bl	8003304 <ILI9341_Write_Command>
HAL_Delay(1000);
 8003478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800347c:	f7fc fec0 	bl	8000200 <HAL_Delay>

//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8003480:	20cb      	movs	r0, #203	; 0xcb
 8003482:	f7ff ff3f 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8003486:	2039      	movs	r0, #57	; 0x39
 8003488:	f7ff ff58 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800348c:	202c      	movs	r0, #44	; 0x2c
 800348e:	f7ff ff55 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003492:	2000      	movs	r0, #0
 8003494:	f7ff ff52 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8003498:	2034      	movs	r0, #52	; 0x34
 800349a:	f7ff ff4f 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800349e:	2002      	movs	r0, #2
 80034a0:	f7ff ff4c 	bl	800333c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80034a4:	20cf      	movs	r0, #207	; 0xcf
 80034a6:	f7ff ff2d 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7ff ff46 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80034b0:	20c1      	movs	r0, #193	; 0xc1
 80034b2:	f7ff ff43 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80034b6:	2030      	movs	r0, #48	; 0x30
 80034b8:	f7ff ff40 	bl	800333c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80034bc:	20e8      	movs	r0, #232	; 0xe8
 80034be:	f7ff ff21 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80034c2:	2085      	movs	r0, #133	; 0x85
 80034c4:	f7ff ff3a 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7ff ff37 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80034ce:	2078      	movs	r0, #120	; 0x78
 80034d0:	f7ff ff34 	bl	800333c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80034d4:	20ea      	movs	r0, #234	; 0xea
 80034d6:	f7ff ff15 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7ff ff2e 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7ff ff2b 	bl	800333c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80034e6:	20ed      	movs	r0, #237	; 0xed
 80034e8:	f7ff ff0c 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80034ec:	2064      	movs	r0, #100	; 0x64
 80034ee:	f7ff ff25 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80034f2:	2003      	movs	r0, #3
 80034f4:	f7ff ff22 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80034f8:	2012      	movs	r0, #18
 80034fa:	f7ff ff1f 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80034fe:	2081      	movs	r0, #129	; 0x81
 8003500:	f7ff ff1c 	bl	800333c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8003504:	20f7      	movs	r0, #247	; 0xf7
 8003506:	f7ff fefd 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800350a:	2020      	movs	r0, #32
 800350c:	f7ff ff16 	bl	800333c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003510:	20c0      	movs	r0, #192	; 0xc0
 8003512:	f7ff fef7 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8003516:	2023      	movs	r0, #35	; 0x23
 8003518:	f7ff ff10 	bl	800333c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800351c:	20c1      	movs	r0, #193	; 0xc1
 800351e:	f7ff fef1 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003522:	2010      	movs	r0, #16
 8003524:	f7ff ff0a 	bl	800333c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8003528:	20c5      	movs	r0, #197	; 0xc5
 800352a:	f7ff feeb 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800352e:	203e      	movs	r0, #62	; 0x3e
 8003530:	f7ff ff04 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8003534:	2028      	movs	r0, #40	; 0x28
 8003536:	f7ff ff01 	bl	800333c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800353a:	20c7      	movs	r0, #199	; 0xc7
 800353c:	f7ff fee2 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003540:	2086      	movs	r0, #134	; 0x86
 8003542:	f7ff fefb 	bl	800333c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8003546:	2036      	movs	r0, #54	; 0x36
 8003548:	f7ff fedc 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800354c:	2048      	movs	r0, #72	; 0x48
 800354e:	f7ff fef5 	bl	800333c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003552:	203a      	movs	r0, #58	; 0x3a
 8003554:	f7ff fed6 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8003558:	2055      	movs	r0, #85	; 0x55
 800355a:	f7ff feef 	bl	800333c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800355e:	20b1      	movs	r0, #177	; 0xb1
 8003560:	f7ff fed0 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7ff fee9 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800356a:	2018      	movs	r0, #24
 800356c:	f7ff fee6 	bl	800333c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003570:	20b6      	movs	r0, #182	; 0xb6
 8003572:	f7ff fec7 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003576:	2008      	movs	r0, #8
 8003578:	f7ff fee0 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800357c:	2082      	movs	r0, #130	; 0x82
 800357e:	f7ff fedd 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003582:	2027      	movs	r0, #39	; 0x27
 8003584:	f7ff feda 	bl	800333c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8003588:	20f2      	movs	r0, #242	; 0xf2
 800358a:	f7ff febb 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7ff fed4 	bl	800333c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8003594:	2026      	movs	r0, #38	; 0x26
 8003596:	f7ff feb5 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800359a:	2001      	movs	r0, #1
 800359c:	f7ff fece 	bl	800333c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80035a0:	20e0      	movs	r0, #224	; 0xe0
 80035a2:	f7ff feaf 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80035a6:	200f      	movs	r0, #15
 80035a8:	f7ff fec8 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80035ac:	2031      	movs	r0, #49	; 0x31
 80035ae:	f7ff fec5 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80035b2:	202b      	movs	r0, #43	; 0x2b
 80035b4:	f7ff fec2 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80035b8:	200c      	movs	r0, #12
 80035ba:	f7ff febf 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80035be:	200e      	movs	r0, #14
 80035c0:	f7ff febc 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80035c4:	2008      	movs	r0, #8
 80035c6:	f7ff feb9 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80035ca:	204e      	movs	r0, #78	; 0x4e
 80035cc:	f7ff feb6 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80035d0:	20f1      	movs	r0, #241	; 0xf1
 80035d2:	f7ff feb3 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80035d6:	2037      	movs	r0, #55	; 0x37
 80035d8:	f7ff feb0 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80035dc:	2007      	movs	r0, #7
 80035de:	f7ff fead 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80035e2:	2010      	movs	r0, #16
 80035e4:	f7ff feaa 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80035e8:	2003      	movs	r0, #3
 80035ea:	f7ff fea7 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80035ee:	200e      	movs	r0, #14
 80035f0:	f7ff fea4 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80035f4:	2009      	movs	r0, #9
 80035f6:	f7ff fea1 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7ff fe9e 	bl	800333c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003600:	20e1      	movs	r0, #225	; 0xe1
 8003602:	f7ff fe7f 	bl	8003304 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff fe98 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800360c:	200e      	movs	r0, #14
 800360e:	f7ff fe95 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003612:	2014      	movs	r0, #20
 8003614:	f7ff fe92 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003618:	2003      	movs	r0, #3
 800361a:	f7ff fe8f 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800361e:	2011      	movs	r0, #17
 8003620:	f7ff fe8c 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003624:	2007      	movs	r0, #7
 8003626:	f7ff fe89 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800362a:	2031      	movs	r0, #49	; 0x31
 800362c:	f7ff fe86 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003630:	20c1      	movs	r0, #193	; 0xc1
 8003632:	f7ff fe83 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8003636:	2048      	movs	r0, #72	; 0x48
 8003638:	f7ff fe80 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800363c:	2008      	movs	r0, #8
 800363e:	f7ff fe7d 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003642:	200f      	movs	r0, #15
 8003644:	f7ff fe7a 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003648:	200c      	movs	r0, #12
 800364a:	f7ff fe77 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800364e:	2031      	movs	r0, #49	; 0x31
 8003650:	f7ff fe74 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8003654:	2036      	movs	r0, #54	; 0x36
 8003656:	f7ff fe71 	bl	800333c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800365a:	200f      	movs	r0, #15
 800365c:	f7ff fe6e 	bl	800333c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003660:	2011      	movs	r0, #17
 8003662:	f7ff fe4f 	bl	8003304 <ILI9341_Write_Command>
HAL_Delay(120);
 8003666:	2078      	movs	r0, #120	; 0x78
 8003668:	f7fc fdca 	bl	8000200 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800366c:	2029      	movs	r0, #41	; 0x29
 800366e:	f7ff fe49 	bl	8003304 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
}
 8003672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003676:	2000      	movs	r0, #0
 8003678:	f7ff bec2 	b.w	8003400 <ILI9341_Set_Rotation>

0800367c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//SENDS COLOUR
uint32_t Buffer_Size = 0;
if((Size*2) < BURST_MAX_SIZE)
 8003680:	004d      	lsls	r5, r1, #1
{
	Buffer_Size = Size;
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8003682:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
{
 8003686:	460c      	mov	r4, r1
	Buffer_Size = BURST_MAX_SIZE;
 8003688:	bf34      	ite	cc
 800368a:	460c      	movcc	r4, r1
 800368c:	f44f 74fa 	movcs.w	r4, #500	; 0x1f4
{
 8003690:	af00      	add	r7, sp, #0
 8003692:	4680      	mov	r8, r0
}

HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003694:	2201      	movs	r2, #1
 8003696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800369a:	4820      	ldr	r0, [pc, #128]	; (800371c <ILI9341_Draw_Colour_Burst+0xa0>)
 800369c:	f7fc ff1c 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a6:	481d      	ldr	r0, [pc, #116]	; (800371c <ILI9341_Draw_Colour_Burst+0xa0>)
 80036a8:	f7fc ff16 	bl	80004d8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
unsigned char burst_buffer[Buffer_Size];
 80036ac:	1de3      	adds	r3, r4, #7
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	ebad 0d03 	sub.w	sp, sp, r3
 80036b6:	466e      	mov	r6, sp
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80036b8:	2300      	movs	r3, #0
unsigned char chifted = 	Colour>>8;;
 80036ba:	ea4f 2218 	mov.w	r2, r8, lsr #8
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80036be:	429c      	cmp	r4, r3
 80036c0:	d815      	bhi.n	80036ee <ILI9341_Draw_Colour_Burst+0x72>
		burst_buffer[j] = 	chifted;
		burst_buffer[j+1] = Colour;
	}

uint32_t Sending_Size = Size*2;
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80036c2:	fbb5 f9f4 	udiv	r9, r5, r4
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80036c6:	fb04 5519 	mls	r5, r4, r9, r5

if(Sending_in_Block != 0)
 80036ca:	f1b9 0f00 	cmp.w	r9, #0
 80036ce:	d114      	bne.n	80036fa <ILI9341_Draw_Colour_Burst+0x7e>
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80036d0:	230a      	movs	r3, #10
 80036d2:	b2aa      	uxth	r2, r5
 80036d4:	4631      	mov	r1, r6
 80036d6:	4812      	ldr	r0, [pc, #72]	; (8003720 <ILI9341_Draw_Colour_Burst+0xa4>)
 80036d8:	f7fe fa23 	bl	8001b22 <HAL_SPI_Transmit>

HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036dc:	2201      	movs	r2, #1
 80036de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036e2:	480e      	ldr	r0, [pc, #56]	; (800371c <ILI9341_Draw_Colour_Burst+0xa0>)
 80036e4:	f7fc fef8 	bl	80004d8 <HAL_GPIO_WritePin>
}
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		burst_buffer[j+1] = Colour;
 80036ee:	18f1      	adds	r1, r6, r3
		burst_buffer[j] = 	chifted;
 80036f0:	54f2      	strb	r2, [r6, r3]
		burst_buffer[j+1] = Colour;
 80036f2:	f881 8001 	strb.w	r8, [r1, #1]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80036f6:	3302      	adds	r3, #2
 80036f8:	e7e1      	b.n	80036be <ILI9341_Draw_Colour_Burst+0x42>
 80036fa:	f04f 0800 	mov.w	r8, #0
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80036fe:	f8df a020 	ldr.w	sl, [pc, #32]	; 8003720 <ILI9341_Draw_Colour_Burst+0xa4>
 8003702:	b2a4      	uxth	r4, r4
 8003704:	230a      	movs	r3, #10
 8003706:	4622      	mov	r2, r4
 8003708:	4631      	mov	r1, r6
 800370a:	4650      	mov	r0, sl
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800370c:	f108 0801 	add.w	r8, r8, #1
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8003710:	f7fe fa07 	bl	8001b22 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003714:	45c1      	cmp	r9, r8
 8003716:	d1f5      	bne.n	8003704 <ILI9341_Draw_Colour_Burst+0x88>
 8003718:	e7da      	b.n	80036d0 <ILI9341_Draw_Colour_Burst+0x54>
 800371a:	bf00      	nop
 800371c:	40010c00 	.word	0x40010c00
 8003720:	20001e64 	.word	0x20001e64

08003724 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8003724:	2100      	movs	r1, #0
{
 8003726:	b570      	push	{r4, r5, r6, lr}
 8003728:	4606      	mov	r6, r0
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 800372a:	4d09      	ldr	r5, [pc, #36]	; (8003750 <ILI9341_Fill_Screen+0x2c>)
 800372c:	4c09      	ldr	r4, [pc, #36]	; (8003754 <ILI9341_Fill_Screen+0x30>)
 800372e:	882a      	ldrh	r2, [r5, #0]
 8003730:	8823      	ldrh	r3, [r4, #0]
 8003732:	4608      	mov	r0, r1
 8003734:	b29b      	uxth	r3, r3
 8003736:	b292      	uxth	r2, r2
 8003738:	f7ff fe1c 	bl	8003374 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 800373c:	882b      	ldrh	r3, [r5, #0]
 800373e:	8821      	ldrh	r1, [r4, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	b289      	uxth	r1, r1
 8003744:	4630      	mov	r0, r6
}
 8003746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 800374a:	4359      	muls	r1, r3
 800374c:	f7ff bf96 	b.w	800367c <ILI9341_Draw_Colour_Burst>
 8003750:	2000011c 	.word	0x2000011c
 8003754:	2000011a 	.word	0x2000011a

08003758 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour)
{
 8003758:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800375a:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <ILI9341_Draw_Pixel+0x170>)
{
 800375c:	4605      	mov	r5, r0
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800375e:	881b      	ldrh	r3, [r3, #0]
{
 8003760:	460c      	mov	r4, r1
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003762:	b29b      	uxth	r3, r3
 8003764:	4283      	cmp	r3, r0
{
 8003766:	4616      	mov	r6, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003768:	f240 80ac 	bls.w	80038c4 <ILI9341_Draw_Pixel+0x16c>
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <ILI9341_Draw_Pixel+0x174>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	428b      	cmp	r3, r1
 8003774:	f240 80a6 	bls.w	80038c4 <ILI9341_Draw_Pixel+0x16c>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800377e:	4854      	ldr	r0, [pc, #336]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003780:	f7fc feaa 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800378a:	4851      	ldr	r0, [pc, #324]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800378c:	f7fc fea4 	bl	80004d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8003790:	202a      	movs	r0, #42	; 0x2a
 8003792:	f7ff fda9 	bl	80032e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003796:	2201      	movs	r2, #1
 8003798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800379c:	484c      	ldr	r0, [pc, #304]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800379e:	f7fc fe9b 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037a8:	4849      	ldr	r0, [pc, #292]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 80037aa:	f7fc fe95 	bl	80004d8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80037ae:	2200      	movs	r2, #0
 80037b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037b4:	4846      	ldr	r0, [pc, #280]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 80037b6:	f7fc fe8f 	bl	80004d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80037ba:	0a2b      	lsrs	r3, r5, #8
 80037bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80037c0:	b2eb      	uxtb	r3, r5
 80037c2:	f88d 3009 	strb.w	r3, [sp, #9]
 80037c6:	3501      	adds	r5, #1
 80037c8:	3301      	adds	r3, #1
 80037ca:	f88d 300b 	strb.w	r3, [sp, #11]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80037ce:	2204      	movs	r2, #4
 80037d0:	2301      	movs	r3, #1
 80037d2:	a902      	add	r1, sp, #8
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80037d4:	122d      	asrs	r5, r5, #8
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80037d6:	483f      	ldr	r0, [pc, #252]	; (80038d4 <ILI9341_Draw_Pixel+0x17c>)
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80037d8:	f88d 500a 	strb.w	r5, [sp, #10]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80037dc:	f7fe f9a1 	bl	8001b22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80037e0:	2201      	movs	r2, #1
 80037e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037e6:	483a      	ldr	r0, [pc, #232]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 80037e8:	f7fc fe76 	bl	80004d8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f2:	4837      	ldr	r0, [pc, #220]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 80037f4:	f7fc fe70 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80037f8:	2200      	movs	r2, #0
 80037fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037fe:	4834      	ldr	r0, [pc, #208]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003800:	f7fc fe6a 	bl	80004d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8003804:	202b      	movs	r0, #43	; 0x2b
 8003806:	f7ff fd6f 	bl	80032e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800380a:	2201      	movs	r2, #1
 800380c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003810:	482f      	ldr	r0, [pc, #188]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003812:	f7fc fe61 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003816:	2201      	movs	r2, #1
 8003818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800381c:	482c      	ldr	r0, [pc, #176]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800381e:	f7fc fe5b 	bl	80004d8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003822:	2200      	movs	r2, #0
 8003824:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003828:	4829      	ldr	r0, [pc, #164]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800382a:	f7fc fe55 	bl	80004d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800382e:	0a23      	lsrs	r3, r4, #8
 8003830:	f88d 300c 	strb.w	r3, [sp, #12]
 8003834:	b2e3      	uxtb	r3, r4
 8003836:	f88d 300d 	strb.w	r3, [sp, #13]
 800383a:	3401      	adds	r4, #1
 800383c:	3301      	adds	r3, #1
 800383e:	f88d 300f 	strb.w	r3, [sp, #15]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003842:	2204      	movs	r2, #4
 8003844:	2301      	movs	r3, #1
 8003846:	a903      	add	r1, sp, #12
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003848:	1224      	asrs	r4, r4, #8
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800384a:	4822      	ldr	r0, [pc, #136]	; (80038d4 <ILI9341_Draw_Pixel+0x17c>)
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800384c:	f88d 400e 	strb.w	r4, [sp, #14]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003850:	f7fe f967 	bl	8001b22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003854:	2201      	movs	r2, #1
 8003856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800385a:	481d      	ldr	r0, [pc, #116]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800385c:	f7fc fe3c 	bl	80004d8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003866:	481a      	ldr	r0, [pc, #104]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003868:	f7fc fe36 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003872:	4817      	ldr	r0, [pc, #92]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003874:	f7fc fe30 	bl	80004d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	f7ff fd35 	bl	80032e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800387e:	2201      	movs	r2, #1
 8003880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003884:	4812      	ldr	r0, [pc, #72]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003886:	f7fc fe27 	bl	80004d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800388a:	2201      	movs	r2, #1
 800388c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003890:	480f      	ldr	r0, [pc, #60]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 8003892:	f7fc fe21 	bl	80004d8 <HAL_GPIO_WritePin>

//COLOUR
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003896:	2200      	movs	r2, #0
 8003898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 800389e:	f7fc fe1b 	bl	80004d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80038a2:	0a33      	lsrs	r3, r6, #8
 80038a4:	f88d 3004 	strb.w	r3, [sp, #4]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80038a8:	2202      	movs	r2, #2
 80038aa:	a901      	add	r1, sp, #4
 80038ac:	2301      	movs	r3, #1
 80038ae:	4809      	ldr	r0, [pc, #36]	; (80038d4 <ILI9341_Draw_Pixel+0x17c>)
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80038b0:	f88d 6005 	strb.w	r6, [sp, #5]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80038b4:	f7fe f935 	bl	8001b22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80038b8:	2201      	movs	r2, #1
 80038ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038be:	4804      	ldr	r0, [pc, #16]	; (80038d0 <ILI9341_Draw_Pixel+0x178>)
 80038c0:	f7fc fe0a 	bl	80004d8 <HAL_GPIO_WritePin>

}
 80038c4:	b004      	add	sp, #16
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	2000011c 	.word	0x2000011c
 80038cc:	2000011a 	.word	0x2000011a
 80038d0:	40010c00 	.word	0x40010c00
 80038d4:	20001e64 	.word	0x20001e64

080038d8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80038d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80038da:	4f1a      	ldr	r7, [pc, #104]	; (8003944 <ILI9341_Draw_Rectangle+0x6c>)
{
 80038dc:	461c      	mov	r4, r3
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80038de:	883b      	ldrh	r3, [r7, #0]
{
 80038e0:	4615      	mov	r5, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4283      	cmp	r3, r0
{
 80038e6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80038ea:	d929      	bls.n	8003940 <ILI9341_Draw_Rectangle+0x68>
 80038ec:	4b16      	ldr	r3, [pc, #88]	; (8003948 <ILI9341_Draw_Rectangle+0x70>)
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	b292      	uxth	r2, r2
 80038f2:	428a      	cmp	r2, r1
 80038f4:	d924      	bls.n	8003940 <ILI9341_Draw_Rectangle+0x68>
if((X+Width-1)>=LCD_WIDTH)
 80038f6:	883a      	ldrh	r2, [r7, #0]
 80038f8:	eb00 0e05 	add.w	lr, r0, r5
 80038fc:	b292      	uxth	r2, r2
 80038fe:	4596      	cmp	lr, r2
	{
		Width=LCD_WIDTH-X;
 8003900:	bfc8      	it	gt
 8003902:	883d      	ldrhgt	r5, [r7, #0]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003904:	881a      	ldrh	r2, [r3, #0]
		Width=LCD_WIDTH-X;
 8003906:	bfc8      	it	gt
 8003908:	1a2d      	subgt	r5, r5, r0
if((Y+Height-1)>=LCD_HEIGHT)
 800390a:	eb01 0704 	add.w	r7, r1, r4
 800390e:	b292      	uxth	r2, r2
		Width=LCD_WIDTH-X;
 8003910:	bfc8      	it	gt
 8003912:	b2ad      	uxthgt	r5, r5
if((Y+Height-1)>=LCD_HEIGHT)
 8003914:	4297      	cmp	r7, r2
	{
		Height=LCD_HEIGHT-Y;
 8003916:	bfc8      	it	gt
 8003918:	881c      	ldrhgt	r4, [r3, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800391a:	f100 32ff 	add.w	r2, r0, #4294967295
		Height=LCD_HEIGHT-Y;
 800391e:	bfc4      	itt	gt
 8003920:	1a64      	subgt	r4, r4, r1
 8003922:	b2a4      	uxthgt	r4, r4
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003924:	1e4b      	subs	r3, r1, #1
 8003926:	4423      	add	r3, r4
 8003928:	442a      	add	r2, r5
 800392a:	b29b      	uxth	r3, r3
 800392c:	b292      	uxth	r2, r2
 800392e:	f7ff fd21 	bl	8003374 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003932:	fb05 f104 	mul.w	r1, r5, r4
 8003936:	4630      	mov	r0, r6
}
 8003938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800393c:	f7ff be9e 	b.w	800367c <ILI9341_Draw_Colour_Burst>
 8003940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003942:	bf00      	nop
 8003944:	2000011c 	.word	0x2000011c
 8003948:	2000011a 	.word	0x2000011a

0800394c <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	461d      	mov	r5, r3
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <ILI9341_Draw_Horizontal_Line+0x48>)
{
 8003952:	4614      	mov	r4, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	b292      	uxth	r2, r2
 8003958:	4282      	cmp	r2, r0
 800395a:	d91a      	bls.n	8003992 <ILI9341_Draw_Horizontal_Line+0x46>
 800395c:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <ILI9341_Draw_Horizontal_Line+0x4c>)
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	b292      	uxth	r2, r2
 8003962:	428a      	cmp	r2, r1
 8003964:	d915      	bls.n	8003992 <ILI9341_Draw_Horizontal_Line+0x46>
if((X+Width-1)>=LCD_WIDTH)
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	1906      	adds	r6, r0, r4
 800396a:	b292      	uxth	r2, r2
 800396c:	4296      	cmp	r6, r2
	{
		Width=LCD_WIDTH-X;
 800396e:	bfc8      	it	gt
 8003970:	881c      	ldrhgt	r4, [r3, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8003972:	f100 32ff 	add.w	r2, r0, #4294967295
		Width=LCD_WIDTH-X;
 8003976:	bfc4      	itt	gt
 8003978:	1a24      	subgt	r4, r4, r0
 800397a:	b2a4      	uxthgt	r4, r4
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800397c:	4422      	add	r2, r4
 800397e:	460b      	mov	r3, r1
 8003980:	b292      	uxth	r2, r2
 8003982:	f7ff fcf7 	bl	8003374 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
}
 800398a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ILI9341_Draw_Colour_Burst(Colour, Width);
 800398e:	f7ff be75 	b.w	800367c <ILI9341_Draw_Colour_Burst>
 8003992:	bd70      	pop	{r4, r5, r6, pc}
 8003994:	2000011c 	.word	0x2000011c
 8003998:	2000011a 	.word	0x2000011a

0800399c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	461d      	mov	r5, r3
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <ILI9341_Draw_Vertical_Line+0x48>)
{
 80039a2:	4614      	mov	r4, r2
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4283      	cmp	r3, r0
 80039aa:	d91a      	bls.n	80039e2 <ILI9341_Draw_Vertical_Line+0x46>
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <ILI9341_Draw_Vertical_Line+0x4c>)
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	b292      	uxth	r2, r2
 80039b2:	428a      	cmp	r2, r1
 80039b4:	d915      	bls.n	80039e2 <ILI9341_Draw_Vertical_Line+0x46>
if((Y+Height-1)>=LCD_HEIGHT)
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	190e      	adds	r6, r1, r4
 80039ba:	b292      	uxth	r2, r2
 80039bc:	4296      	cmp	r6, r2
	{
		Height=LCD_HEIGHT-Y;
 80039be:	bfc8      	it	gt
 80039c0:	881c      	ldrhgt	r4, [r3, #0]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80039c2:	f101 33ff 	add.w	r3, r1, #4294967295
		Height=LCD_HEIGHT-Y;
 80039c6:	bfc4      	itt	gt
 80039c8:	1a64      	subgt	r4, r4, r1
 80039ca:	b2a4      	uxthgt	r4, r4
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80039cc:	4423      	add	r3, r4
 80039ce:	4602      	mov	r2, r0
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f7ff fccf 	bl	8003374 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
}
 80039da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ILI9341_Draw_Colour_Burst(Colour, Height);
 80039de:	f7ff be4d 	b.w	800367c <ILI9341_Draw_Colour_Burst>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	2000011c 	.word	0x2000011c
 80039e8:	2000011a 	.word	0x2000011a

080039ec <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80039f0:	b510      	push	{r4, lr}
 80039f2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039f4:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80039f6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80039f8:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039fc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80039fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a02:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a04:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a06:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a08:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a0a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003a0c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a0e:	f7fd fd27 	bl	8001460 <HAL_RCC_OscConfig>
 8003a12:	b100      	cbz	r0, 8003a16 <SystemClock_Config+0x2a>
 8003a14:	e7fe      	b.n	8003a14 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a16:	230f      	movs	r3, #15
 8003a18:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a1e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a20:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a22:	4621      	mov	r1, r4
 8003a24:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a26:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a28:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a2a:	f7fd fee1 	bl	80017f0 <HAL_RCC_ClockConfig>
 8003a2e:	b100      	cbz	r0, 8003a32 <SystemClock_Config+0x46>
 8003a30:	e7fe      	b.n	8003a30 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003a32:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003a34:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a36:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003a38:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a3a:	f7fd ffa3 	bl	8001984 <HAL_RCCEx_PeriphCLKConfig>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	b100      	cbz	r0, 8003a44 <SystemClock_Config+0x58>
 8003a42:	e7fe      	b.n	8003a42 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a44:	f7fd ff78 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8003a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a50:	f7fc fc3a 	bl	80002c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003a54:	2004      	movs	r0, #4
 8003a56:	f7fc fc4d 	bl	80002f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	f7fc fbf1 	bl	8000248 <HAL_NVIC_SetPriority>
}
 8003a66:	b014      	add	sp, #80	; 0x50
 8003a68:	bd10      	pop	{r4, pc}
	...

08003a6c <main>:
{
 8003a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	microsecondCounter = 0;
 8003a70:	2400      	movs	r4, #0
 8003a72:	4ba8      	ldr	r3, [pc, #672]	; (8003d14 <main+0x2a8>)
{
 8003a74:	b0ff      	sub	sp, #508	; 0x1fc
	microsecondCounter = 0;
 8003a76:	801c      	strh	r4, [r3, #0]
  HAL_Init();
 8003a78:	f7fc fb9e 	bl	80001b8 <HAL_Init>
  SystemClock_Config();
 8003a7c:	f7ff ffb6 	bl	80039ec <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a80:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <main+0x2ac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8003a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a86:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8003a88:	48a4      	ldr	r0, [pc, #656]	; (8003d1c <main+0x2b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a8a:	f042 0210 	orr.w	r2, r2, #16
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_CS_Pin|LCD_DCRS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a92:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a94:	f002 0210 	and.w	r2, r2, #16
 8003a98:	9203      	str	r2, [sp, #12]
 8003a9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9e:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa0:	f042 0220 	orr.w	r2, r2, #32
 8003aa4:	619a      	str	r2, [r3, #24]
 8003aa6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DHT22_IN_Pin */
  GPIO_InitStruct.Pin = DHT22_IN_Pin;
 8003aa8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aac:	f002 0220 	and.w	r2, r2, #32
 8003ab0:	9204      	str	r2, [sp, #16]
 8003ab2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	699a      	ldr	r2, [r3, #24]
  hi2c1.Init.ClockSpeed = 100000;
 8003ab6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8003d58 <main+0x2ec>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	f042 0204 	orr.w	r2, r2, #4
 8003abe:	619a      	str	r2, [r3, #24]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	f002 0204 	and.w	r2, r2, #4
 8003ac6:	9205      	str	r2, [sp, #20]
 8003ac8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	f042 0208 	orr.w	r2, r2, #8
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8003ad4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	9306      	str	r3, [sp, #24]
 8003adc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 8003ade:	f7fc fcfb 	bl	80004d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_RESET_Pin|LCD_CS_Pin|LCD_DCRS_Pin, GPIO_PIN_RESET);
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003ae8:	488d      	ldr	r0, [pc, #564]	; (8003d20 <main+0x2b4>)
 8003aea:	f7fc fcf5 	bl	80004d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED13_Pin;
 8003aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8003af2:	a93e      	add	r1, sp, #248	; 0xf8
 8003af4:	4889      	ldr	r0, [pc, #548]	; (8003d1c <main+0x2b0>)
  GPIO_InitStruct.Pin = LED13_Pin;
 8003af6:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	953f      	str	r5, [sp, #252]	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	9741      	str	r7, [sp, #260]	; 0x104
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8003afc:	f7fc fc0c 	bl	8000318 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DHT22_IN_GPIO_Port, &GPIO_InitStruct);
 8003b00:	a93e      	add	r1, sp, #248	; 0xf8
 8003b02:	4887      	ldr	r0, [pc, #540]	; (8003d20 <main+0x2b4>)
  GPIO_InitStruct.Pin = DHT22_IN_Pin;
 8003b04:	963e      	str	r6, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b06:	943f      	str	r4, [sp, #252]	; 0xfc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	9440      	str	r4, [sp, #256]	; 0x100
  HAL_GPIO_Init(DHT22_IN_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	f7fc fc05 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_DCRS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_DCRS_Pin;
 8003b0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b12:	4883      	ldr	r0, [pc, #524]	; (8003d20 <main+0x2b4>)
 8003b14:	a93e      	add	r1, sp, #248	; 0xf8
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_DCRS_Pin;
 8003b16:	933e      	str	r3, [sp, #248]	; 0xf8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	953f      	str	r5, [sp, #252]	; 0xfc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1a:	9741      	str	r7, [sp, #260]	; 0x104
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1c:	f7fc fbfc 	bl	8000318 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8003b20:	4880      	ldr	r0, [pc, #512]	; (8003d24 <main+0x2b8>)
  hi2c1.Init.ClockSpeed = 100000;
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <main+0x2bc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b24:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8003b26:	e880 0108 	stmia.w	r0, {r3, r8}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8003b2e:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b30:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b32:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b34:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b36:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b38:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b3a:	f7fc fdcf 	bl	80006dc <HAL_I2C_Init>
 8003b3e:	b100      	cbz	r0, 8003b42 <main+0xd6>
 8003b40:	e7fe      	b.n	8003b40 <main+0xd4>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b42:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Instance = SPI1;
 8003b46:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <main+0x2c0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b48:	4a79      	ldr	r2, [pc, #484]	; (8003d30 <main+0x2c4>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b4a:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b4c:	e883 1004 	stmia.w	r3, {r2, ip}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003b56:	2208      	movs	r2, #8
 8003b58:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8003b5a:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b5c:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5e:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b60:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b62:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b64:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b66:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b68:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b6c:	f7fe f882 	bl	8001c74 <HAL_SPI_Init>
 8003b70:	b100      	cbz	r0, 8003b74 <main+0x108>
 8003b72:	e7fe      	b.n	8003b72 <main+0x106>
  htim1.Init.Prescaler = 36;
 8003b74:	f04f 0e24 	mov.w	lr, #36	; 0x24
  htim1.Instance = TIM1;
 8003b78:	4c6e      	ldr	r4, [pc, #440]	; (8003d34 <main+0x2c8>)
  htim1.Init.Prescaler = 36;
 8003b7a:	4b6f      	ldr	r3, [pc, #444]	; (8003d38 <main+0x2cc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7c:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 36;
 8003b7e:	e884 4008 	stmia.w	r4, {r3, lr}
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b82:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b84:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b86:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b88:	4620      	mov	r0, r4
  htim1.Init.Period = 1;
 8003b8a:	60e5      	str	r5, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b8c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b8e:	f7fe fa45 	bl	800201c <HAL_TIM_Base_Init>
 8003b92:	b100      	cbz	r0, 8003b96 <main+0x12a>
 8003b94:	e7fe      	b.n	8003b94 <main+0x128>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b96:	a93e      	add	r1, sp, #248	; 0xf8
 8003b98:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b9a:	963e      	str	r6, [sp, #248]	; 0xf8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b9c:	f7fe f8a5 	bl	8001cea <HAL_TIM_ConfigClockSource>
 8003ba0:	b100      	cbz	r0, 8003ba4 <main+0x138>
 8003ba2:	e7fe      	b.n	8003ba2 <main+0x136>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	ae07      	add	r6, sp, #28
 8003ba6:	6030      	str	r0, [r6, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba8:	6070      	str	r0, [r6, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003baa:	4631      	mov	r1, r6
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7fe fa4f 	bl	8002050 <HAL_TIMEx_MasterConfigSynchronization>
 8003bb2:	b100      	cbz	r0, 8003bb6 <main+0x14a>
 8003bb4:	e7fe      	b.n	8003bb4 <main+0x148>
  huart1.Init.BaudRate = 115200;
 8003bb6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Instance = USART1;
 8003bba:	4b60      	ldr	r3, [pc, #384]	; (8003d3c <main+0x2d0>)
  huart1.Init.BaudRate = 115200;
 8003bbc:	4960      	ldr	r1, [pc, #384]	; (8003d40 <main+0x2d4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bbe:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8003bc0:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bc4:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bc6:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bc8:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bca:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bcc:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bce:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bd0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bd2:	f7fe faff 	bl	80021d4 <HAL_UART_Init>
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	b100      	cbz	r0, 8003bdc <main+0x170>
 8003bda:	e7fe      	b.n	8003bda <main+0x16e>
  MX_USB_DEVICE_Init();
 8003bdc:	f000 fd2a 	bl	8004634 <MX_USB_DEVICE_Init>
   ILI9341_Init();
 8003be0:	f7ff fc40 	bl	8003464 <ILI9341_Init>
   HAL_Delay(500);
 8003be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003be8:	f7fc fb0a 	bl	8000200 <HAL_Delay>
   ILI9341_Fill_Screen(0x1863);
 8003bec:	f641 0063 	movw	r0, #6243	; 0x1863
 8003bf0:	f7ff fd98 	bl	8003724 <ILI9341_Fill_Screen>
   setCurrentBGColor(0x1863);
 8003bf4:	f641 0063 	movw	r0, #6243	; 0x1863
 8003bf8:	f000 fb84 	bl	8004304 <setCurrentBGColor>
   setCurrentColor(GREEN);
 8003bfc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8003c00:	f000 fb7a 	bl	80042f8 <setCurrentColor>
   ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8003c04:	4628      	mov	r0, r5
 8003c06:	f7ff fbfb 	bl	8003400 <ILI9341_Set_Rotation>
   HAL_Delay(150);
 8003c0a:	2096      	movs	r0, #150	; 0x96
 8003c0c:	f7fc faf8 	bl	8000200 <HAL_Delay>
	sprintf(tempstring, "!!!  loriland.ml !!!");
 8003c10:	494c      	ldr	r1, [pc, #304]	; (8003d44 <main+0x2d8>)
 8003c12:	a83e      	add	r0, sp, #248	; 0xf8
 8003c14:	f001 f8ce 	bl	8004db4 <strcpy>
	outtextxy32x(0, 0, tempstring, 0);
 8003c18:	4623      	mov	r3, r4
 8003c1a:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 fbb0 	bl	8004384 <outtextxy32x>
	sprintf(tempstring, "Temp:");
 8003c24:	4948      	ldr	r1, [pc, #288]	; (8003d48 <main+0x2dc>)
 8003c26:	a83e      	add	r0, sp, #248	; 0xf8
 8003c28:	f001 f8c4 	bl	8004db4 <strcpy>
	outtextxy32x(2, 3, tempstring, 1);
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c30:	2103      	movs	r1, #3
 8003c32:	4638      	mov	r0, r7
 8003c34:	f000 fba6 	bl	8004384 <outtextxy32x>
	sprintf(tempstring, "Humidity:");
 8003c38:	4944      	ldr	r1, [pc, #272]	; (8003d4c <main+0x2e0>)
 8003c3a:	a83e      	add	r0, sp, #248	; 0xf8
 8003c3c:	f001 f8ba 	bl	8004db4 <strcpy>
	outtextxy32x(2, 4, tempstring, 1);
 8003c40:	462b      	mov	r3, r5
 8003c42:	aa3e      	add	r2, sp, #248	; 0xf8
 8003c44:	2104      	movs	r1, #4
 8003c46:	4638      	mov	r0, r7
 8003c48:	f000 fb9c 	bl	8004384 <outtextxy32x>
	ILI9341_Draw_Horizontal_Line(20, 31, 280, frameColor);
 8003c4c:	231f      	movs	r3, #31
 8003c4e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003c52:	4619      	mov	r1, r3
 8003c54:	2014      	movs	r0, #20
 8003c56:	f7ff fe79 	bl	800394c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(20, 96, 280, frameColor);
 8003c5a:	231f      	movs	r3, #31
 8003c5c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003c60:	2160      	movs	r1, #96	; 0x60
 8003c62:	2014      	movs	r0, #20
 8003c64:	f7ff fe72 	bl	800394c <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Vertical_Line(300, 31, 64, frameColor);
 8003c68:	231f      	movs	r3, #31
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c72:	f7ff fe93 	bl	800399c <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(20, 31, 64, frameColor);
 8003c76:	231f      	movs	r3, #31
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	2014      	movs	r0, #20
 8003c7e:	f7ff fe8d 	bl	800399c <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Rectangle(20, 170, 280, 64, BLUE);
 8003c82:	231f      	movs	r3, #31
 8003c84:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	21aa      	movs	r1, #170	; 0xaa
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	2014      	movs	r0, #20
 8003c90:	f7ff fe22 	bl	80038d8 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(21, 171, 278, 62, 0x1863);
 8003c94:	f641 0363 	movw	r3, #6243	; 0x1863
 8003c98:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	21ab      	movs	r1, #171	; 0xab
 8003ca0:	233e      	movs	r3, #62	; 0x3e
 8003ca2:	2015      	movs	r0, #21
 8003ca4:	f7ff fe18 	bl	80038d8 <ILI9341_Draw_Rectangle>
	memset(&tempHistory, 0, 220);
 8003ca8:	22dc      	movs	r2, #220	; 0xdc
 8003caa:	4621      	mov	r1, r4
 8003cac:	4630      	mov	r0, r6
 8003cae:	f001 f828 	bl	8004d02 <memset>
   char LED = 1;
 8003cb2:	46a8      	mov	r8, r5
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003cb4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8003d1c <main+0x2b0>
		   		   if(delayCounter == 10)
 8003cb8:	4d25      	ldr	r5, [pc, #148]	; (8003d50 <main+0x2e4>)
	   switch(taskCounter)
 8003cba:	2c05      	cmp	r4, #5
 8003cbc:	d80e      	bhi.n	8003cdc <main+0x270>
 8003cbe:	e8df f004 	tbb	[pc, r4]
 8003cc2:	4d03      	.short	0x4d03
 8003cc4:	b575726f 	.word	0xb575726f
			   if(LED == 1)
 8003cc8:	f1b8 0f01 	cmp.w	r8, #1
 8003ccc:	d119      	bne.n	8003d02 <main+0x296>
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd4:	4648      	mov	r0, r9
 8003cd6:	f7fc fbff 	bl	80004d8 <HAL_GPIO_WritePin>
				   LED = 0;
 8003cda:	46a0      	mov	r8, r4
	   if(!readUSBSerial(USBtext))
 8003cdc:	481d      	ldr	r0, [pc, #116]	; (8003d54 <main+0x2e8>)
 8003cde:	f000 f9fd 	bl	80040dc <readUSBSerial>
 8003ce2:	b920      	cbnz	r0, 8003cee <main+0x282>
		   command = DecodeCommand(USBtext);
 8003ce4:	481b      	ldr	r0, [pc, #108]	; (8003d54 <main+0x2e8>)
 8003ce6:	f000 fd7f 	bl	80047e8 <DecodeCommand>
		   DoCommand(command);
 8003cea:	f000 fcbf 	bl	800466c <DoCommand>
	   taskCounter++;
 8003cee:	3401      	adds	r4, #1
 8003cf0:	b2e4      	uxtb	r4, r4
		   taskCounter = 0;
 8003cf2:	2c06      	cmp	r4, #6
	   HAL_Delay(20);
 8003cf4:	f04f 0014 	mov.w	r0, #20
		   taskCounter = 0;
 8003cf8:	bf28      	it	cs
 8003cfa:	2400      	movcs	r4, #0
	   HAL_Delay(20);
 8003cfc:	f7fc fa80 	bl	8000200 <HAL_Delay>
	   switch(taskCounter)
 8003d00:	e7db      	b.n	8003cba <main+0x24e>
				   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003d02:	2201      	movs	r2, #1
 8003d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d08:	4648      	mov	r0, r9
 8003d0a:	f7fc fbe5 	bl	80004d8 <HAL_GPIO_WritePin>
				   LED = 1;
 8003d0e:	f04f 0801 	mov.w	r8, #1
 8003d12:	e7e3      	b.n	8003cdc <main+0x270>
 8003d14:	20001f58 	.word	0x20001f58
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	40010c00 	.word	0x40010c00
 8003d24:	20001ec0 	.word	0x20001ec0
 8003d28:	40005400 	.word	0x40005400
 8003d2c:	20001e64 	.word	0x20001e64
 8003d30:	40013000 	.word	0x40013000
 8003d34:	20001f5c 	.word	0x20001f5c
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	20001f18 	.word	0x20001f18
 8003d40:	40013800 	.word	0x40013800
 8003d44:	08005f90 	.word	0x08005f90
 8003d48:	08005fa5 	.word	0x08005fa5
 8003d4c:	08005fab 	.word	0x08005fab
 8003d50:	20000120 	.word	0x20000120
 8003d54:	20001b1c 	.word	0x20001b1c
 8003d58:	000186a0 	.word	0x000186a0
		   		   if(delayCounter == 10)
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d105      	bne.n	8003d6e <main+0x302>
		   			   delayCounter = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	602b      	str	r3, [r5, #0]
		   			   readDHT22Data();
 8003d66:	f000 f8b7 	bl	8003ed8 <readDHT22Data>
				   	   DHT22_DecodeReadings();
 8003d6a:	f000 f94d 	bl	8004008 <DHT22_DecodeReadings>
		   		   delayCounter++;
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	602b      	str	r3, [r5, #0]
			   humi = DHT22_GetHumidity();
 8003d74:	f000 f898 	bl	8003ea8 <DHT22_GetHumidity>
 8003d78:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <main+0x408>)
 8003d7a:	6018      	str	r0, [r3, #0]
			   temp = DHT22_GetTemperature();
 8003d7c:	f000 f8a0 	bl	8003ec0 <DHT22_GetTemperature>
			   if( (temp - 220) < 0)
 8003d80:	28db      	cmp	r0, #219	; 0xdb
				   tempHistory[0] = (temp - 220)%60; 	// 0 at 22.0 C, max at 28.3C
 8003d82:	bfc8      	it	gt
 8003d84:	223c      	movgt	r2, #60	; 0x3c
			   temp = DHT22_GetTemperature();
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <main+0x40c>)
 8003d88:	6018      	str	r0, [r3, #0]
				   tempHistory[0] = (temp - 220)%60; 	// 0 at 22.0 C, max at 28.3C
 8003d8a:	bfc5      	ittet	gt
 8003d8c:	38dc      	subgt	r0, #220	; 0xdc
 8003d8e:	fb90 f3f2 	sdivgt	r3, r0, r2
				   tempHistory[0] = 0;
 8003d92:	2300      	movle	r3, #0
				   tempHistory[0] = (temp - 220)%60; 	// 0 at 22.0 C, max at 28.3C
 8003d94:	fb02 0013 	mlsgt	r0, r2, r3, r0
				   tempHistory[0] = 0;
 8003d98:	bfd4      	ite	le
 8003d9a:	7033      	strble	r3, [r6, #0]
				   tempHistory[0] = (temp - 220)%60; 	// 0 at 22.0 C, max at 28.3C
 8003d9c:	7030      	strbgt	r0, [r6, #0]
 8003d9e:	e79d      	b.n	8003cdc <main+0x270>
			   getCurrentTime();
 8003da0:	f000 fa78 	bl	8004294 <getCurrentTime>
			   break;
 8003da4:	e79a      	b.n	8003cdc <main+0x270>
			   getCurrentDate();
 8003da6:	f000 f9b3 	bl	8004110 <getCurrentDate>
			   break;
 8003daa:	e797      	b.n	8003cdc <main+0x270>
			   sprintf(tempstring, "%02d:%02d:%02d", dateTime.dt_hours, dateTime.dt_minutes, dateTime.dt_seconds);
 8003dac:	4f33      	ldr	r7, [pc, #204]	; (8003e7c <main+0x410>)
 8003dae:	a83e      	add	r0, sp, #248	; 0xf8
 8003db0:	7839      	ldrb	r1, [r7, #0]
 8003db2:	787b      	ldrb	r3, [r7, #1]
 8003db4:	78ba      	ldrb	r2, [r7, #2]
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	4931      	ldr	r1, [pc, #196]	; (8003e80 <main+0x414>)
 8003dba:	f000 ffab 	bl	8004d14 <siprintf>
			   outtextxy32x(6, 1, tempstring, 0);
 8003dbe:	aa3e      	add	r2, sp, #248	; 0xf8
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2006      	movs	r0, #6
 8003dc6:	f000 fadd 	bl	8004384 <outtextxy32x>
			   sprintf(tempstring, "%02d.%02d.%04d", dateTime.dt_day, dateTime.dt_month, dateTime.dt_year);
 8003dca:	797b      	ldrb	r3, [r7, #5]
 8003dcc:	793a      	ldrb	r2, [r7, #4]
 8003dce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
			   sprintf(tempstring, "%02d.%dC", temp/10, temp%10);
 8003dd2:	270a      	movs	r7, #10
			   sprintf(tempstring, "%02d.%02d.%04d", dateTime.dt_day, dateTime.dt_month, dateTime.dt_year);
 8003dd4:	9100      	str	r1, [sp, #0]
 8003dd6:	a83e      	add	r0, sp, #248	; 0xf8
 8003dd8:	492a      	ldr	r1, [pc, #168]	; (8003e84 <main+0x418>)
 8003dda:	f000 ff9b 	bl	8004d14 <siprintf>
			   outtextxy32x(5, 2, tempstring, 0);
 8003dde:	aa3e      	add	r2, sp, #248	; 0xf8
 8003de0:	2300      	movs	r3, #0
 8003de2:	2102      	movs	r1, #2
 8003de4:	2005      	movs	r0, #5
 8003de6:	f000 facd 	bl	8004384 <outtextxy32x>
			   sprintf(tempstring, "%02d.%dC", temp/10, temp%10);
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <main+0x40c>)
 8003dec:	4926      	ldr	r1, [pc, #152]	; (8003e88 <main+0x41c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	a83e      	add	r0, sp, #248	; 0xf8
 8003df2:	fb93 f2f7 	sdiv	r2, r3, r7
 8003df6:	fb07 3312 	mls	r3, r7, r2, r3
 8003dfa:	f000 ff8b 	bl	8004d14 <siprintf>
			   outtextxy32x(12, 3, tempstring, 1);
 8003dfe:	aa3e      	add	r2, sp, #248	; 0xf8
 8003e00:	2301      	movs	r3, #1
 8003e02:	2103      	movs	r1, #3
 8003e04:	200c      	movs	r0, #12
 8003e06:	f000 fabd 	bl	8004384 <outtextxy32x>
			   sprintf(tempstring, "%02d.%d%%", humi/10, humi%10);
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <main+0x408>)
 8003e0c:	491f      	ldr	r1, [pc, #124]	; (8003e8c <main+0x420>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	a83e      	add	r0, sp, #248	; 0xf8
 8003e12:	fb93 f2f7 	sdiv	r2, r3, r7
 8003e16:	fb07 3312 	mls	r3, r7, r2, r3
 8003e1a:	f000 ff7b 	bl	8004d14 <siprintf>
			   outtextxy32x(12, 4, tempstring, 1);
 8003e1e:	2301      	movs	r3, #1
 8003e20:	aa3e      	add	r2, sp, #248	; 0xf8
 8003e22:	2104      	movs	r1, #4
 8003e24:	200c      	movs	r0, #12
 8003e26:	f000 faad 	bl	8004384 <outtextxy32x>
			   break;
 8003e2a:	e757      	b.n	8003cdc <main+0x270>
				ILI9341_Draw_Rectangle(21, 171, 278, 62, 0x1863);
 8003e2c:	f641 0363 	movw	r3, #6243	; 0x1863
 8003e30:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	21ab      	movs	r1, #171	; 0xab
 8003e38:	233e      	movs	r3, #62	; 0x3e
 8003e3a:	2015      	movs	r0, #21
 8003e3c:	f7ff fd4c 	bl	80038d8 <ILI9341_Draw_Rectangle>
 8003e40:	2701      	movs	r7, #1
					ILI9341_Draw_Pixel(277 - ti, 232 - tempHistory[ti], WHITE);
 8003e42:	19f3      	adds	r3, r6, r7
 8003e44:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003e48:	f5c7 708b 	rsb	r0, r7, #278	; 0x116
 8003e4c:	f1c1 01e8 	rsb	r1, r1, #232	; 0xe8
 8003e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e54:	b289      	uxth	r1, r1
 8003e56:	b280      	uxth	r0, r0
 8003e58:	3701      	adds	r7, #1
 8003e5a:	f7ff fc7d 	bl	8003758 <ILI9341_Draw_Pixel>
				for(int ti = 0; ti < 220; ti++)
 8003e5e:	2fdd      	cmp	r7, #221	; 0xdd
 8003e60:	d1ef      	bne.n	8003e42 <main+0x3d6>
 8003e62:	f10d 03f7 	add.w	r3, sp, #247	; 0xf7
					tempHistory[thi] = tempHistory[thi-1];
 8003e66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
				for(int thi = 219; thi > 0; thi--)
 8003e6a:	42b3      	cmp	r3, r6
					tempHistory[thi] = tempHistory[thi-1];
 8003e6c:	705a      	strb	r2, [r3, #1]
				for(int thi = 219; thi > 0; thi--)
 8003e6e:	d1fa      	bne.n	8003e66 <main+0x3fa>
 8003e70:	e734      	b.n	8003cdc <main+0x270>
 8003e72:	bf00      	nop
 8003e74:	20001ebc 	.word	0x20001ebc
 8003e78:	20001f14 	.word	0x20001f14
 8003e7c:	200020ee 	.word	0x200020ee
 8003e80:	08005fb5 	.word	0x08005fb5
 8003e84:	08005fc4 	.word	0x08005fc4
 8003e88:	08005fd3 	.word	0x08005fd3
 8003e8c:	08005fdc 	.word	0x08005fdc

08003e90 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003e90:	e7fe      	b.n	8003e90 <_Error_Handler>

08003e92 <Delay_us>:
//
//	while(microsecondCounter < us)
//	{
//
//	}
	for(short i = 0; i < us; i++)
 8003e92:	2300      	movs	r3, #0
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	4290      	cmp	r0, r2
 8003e98:	dc00      	bgt.n	8003e9c <Delay_us+0xa>
		for(int j = 0; j< MICROSECCONSTANT; j++)
		{
			asm volatile("nop");
		}
	}
}
 8003e9a:	4770      	bx	lr
 8003e9c:	2248      	movs	r2, #72	; 0x48
			asm volatile("nop");
 8003e9e:	bf00      	nop
		for(int j = 0; j< MICROSECCONSTANT; j++)
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	d1fc      	bne.n	8003e9e <Delay_us+0xc>
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	e7f5      	b.n	8003e94 <Delay_us+0x2>

08003ea8 <DHT22_GetHumidity>:



uint16_t DHT22_GetHumidity(void)
{
	return (hMSB << 8) + hLSB;
 8003ea8:	4a03      	ldr	r2, [pc, #12]	; (8003eb8 <DHT22_GetHumidity+0x10>)
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <DHT22_GetHumidity+0x14>)
 8003eac:	7810      	ldrb	r0, [r2, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 8003eb4:	b280      	uxth	r0, r0
 8003eb6:	4770      	bx	lr
 8003eb8:	20001c2c 	.word	0x20001c2c
 8003ebc:	20001c2d 	.word	0x20001c2d

08003ec0 <DHT22_GetTemperature>:

uint16_t DHT22_GetTemperature(void)
{
	return (tMSB << 8) + tLSB;
 8003ec0:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <DHT22_GetTemperature+0x10>)
 8003ec2:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <DHT22_GetTemperature+0x14>)
 8003ec4:	7810      	ldrb	r0, [r2, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 8003ecc:	b280      	uxth	r0, r0
 8003ece:	4770      	bx	lr
 8003ed0:	20001c2f 	.word	0x20001c2f
 8003ed4:	20001c30 	.word	0x20001c30

08003ed8 <readDHT22Data>:


// Read Information from DHT22
int readDHT22Data()
{
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	// Switch pin to input with Pull-Up
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
	//PORT.Pull = GPIO_NOPULL;
	PORT.Pin = DHT22_GPIO_PIN;
 8003eda:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 8003ede:	2301      	movs	r3, #1
	PORT.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee0:	2402      	movs	r4, #2
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee2:	4d46      	ldr	r5, [pc, #280]	; (8003ffc <readDHT22Data+0x124>)
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003ee4:	4e46      	ldr	r6, [pc, #280]	; (8004000 <readDHT22Data+0x128>)
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4630      	mov	r0, r6
	PORT.Mode = GPIO_MODE_OUTPUT_PP;
 8003eea:	606b      	str	r3, [r5, #4]
	PORT.Speed = GPIO_SPEED_FREQ_LOW;
 8003eec:	60ec      	str	r4, [r5, #12]
	PORT.Pin = DHT22_GPIO_PIN;
 8003eee:	602f      	str	r7, [r5, #0]
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003ef0:	f7fc fa12 	bl	8000318 <HAL_GPIO_Init>



	// Generate start impulse for sensor
	DHT22_GPIO_PORT->BRR = DHT22_GPIO_PIN; // Pull down SDA (Bit_SET)
	HAL_Delay(2); // Host start signal at least 800us
 8003ef4:	4620      	mov	r0, r4
	DHT22_GPIO_PORT->BSRR = DHT22_GPIO_PIN; // Release SDA (Bit_RESET)

	//Delay_us(50);
	// Switch pin to input with Pull-Up
	PORT.Mode = GPIO_MODE_INPUT;
 8003ef6:	2400      	movs	r4, #0
	DHT22_GPIO_PORT->BRR = DHT22_GPIO_PIN; // Pull down SDA (Bit_SET)
 8003ef8:	6177      	str	r7, [r6, #20]
	HAL_Delay(2); // Host start signal at least 800us
 8003efa:	f7fc f981 	bl	8000200 <HAL_Delay>
	DHT22_GPIO_PORT->BSRR = DHT22_GPIO_PIN; // Release SDA (Bit_RESET)
 8003efe:	6137      	str	r7, [r6, #16]
	PORT.Pull = GPIO_NOPULL;
	PORT.Pin = DHT22_GPIO_PIN;
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003f00:	4629      	mov	r1, r5
 8003f02:	4630      	mov	r0, r6
	PORT.Mode = GPIO_MODE_INPUT;
 8003f04:	606c      	str	r4, [r5, #4]
	PORT.Pull = GPIO_NOPULL;
 8003f06:	60ac      	str	r4, [r5, #8]
	PORT.Pin = DHT22_GPIO_PIN;
 8003f08:	602f      	str	r7, [r5, #0]
	HAL_GPIO_Init(DHT22_GPIO_PORT,&PORT);
 8003f0a:	f7fc fa05 	bl	8000318 <HAL_GPIO_Init>

	// Wait for AM2302 to start communicate
	wait = 0;
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 200)) Delay_us(2);
 8003f0e:	68b1      	ldr	r1, [r6, #8]
 8003f10:	f411 5180 	ands.w	r1, r1, #4096	; 0x1000
 8003f14:	d11f      	bne.n	8003f56 <readDHT22Data+0x7e>
	if (wait > 50) return DHT22_RCV_NO_RESPONSE;
 8003f16:	2c32      	cmp	r4, #50	; 0x32
 8003f18:	d820      	bhi.n	8003f5c <readDHT22Data+0x84>

	// Check ACK strobe from sensor
	wait = 0;
	while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 8003f1a:	4c39      	ldr	r4, [pc, #228]	; (8004000 <readDHT22Data+0x128>)
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	04de      	lsls	r6, r3, #19
 8003f20:	d402      	bmi.n	8003f28 <readDHT22Data+0x50>
 8003f22:	3101      	adds	r1, #1
 8003f24:	2965      	cmp	r1, #101	; 0x65
 8003f26:	d11b      	bne.n	8003f60 <readDHT22Data+0x88>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK1;
 8003f28:	3908      	subs	r1, #8
 8003f2a:	2907      	cmp	r1, #7
 8003f2c:	d85f      	bhi.n	8003fee <readDHT22Data+0x116>
 8003f2e:	2100      	movs	r1, #0

	wait = 0;
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 8003f30:	4c33      	ldr	r4, [pc, #204]	; (8004000 <readDHT22Data+0x128>)
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	04dd      	lsls	r5, r3, #19
 8003f36:	d502      	bpl.n	8003f3e <readDHT22Data+0x66>
 8003f38:	3101      	adds	r1, #1
 8003f3a:	2965      	cmp	r1, #101	; 0x65
 8003f3c:	d114      	bne.n	8003f68 <readDHT22Data+0x90>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK2;
 8003f3e:	3908      	subs	r1, #8
 8003f40:	2907      	cmp	r1, #7
 8003f42:	d856      	bhi.n	8003ff2 <readDHT22Data+0x11a>
 8003f44:	2400      	movs	r4, #0
	// ACK strobe received --> receive 40 bits
	i = 0;
	while (i < 40) {
		// Measure bit start impulse (T_low = 50us)
		wait = 0;
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003f46:	4d2e      	ldr	r5, [pc, #184]	; (8004000 <readDHT22Data+0x128>)
		if (wait > 16) {
			// invalid bit start impulse length
			bits[i] = 0xffff;
 8003f48:	4e2e      	ldr	r6, [pc, #184]	; (8004004 <readDHT22Data+0x12c>)
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	e013      	b.n	8003f76 <readDHT22Data+0x9e>
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 200)) Delay_us(2);
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f7ff ff9f 	bl	8003e92 <Delay_us>
 8003f54:	e7db      	b.n	8003f0e <readDHT22Data+0x36>
 8003f56:	3401      	adds	r4, #1
 8003f58:	2cc9      	cmp	r4, #201	; 0xc9
 8003f5a:	d1f8      	bne.n	8003f4e <readDHT22Data+0x76>
	if (wait > 50) return DHT22_RCV_NO_RESPONSE;
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 8003f60:	2001      	movs	r0, #1
 8003f62:	f7ff ff96 	bl	8003e92 <Delay_us>
 8003f66:	e7d9      	b.n	8003f1c <readDHT22Data+0x44>
	while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 100)) Delay_us(1);
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7ff ff92 	bl	8003e92 <Delay_us>
 8003f6e:	e7e0      	b.n	8003f32 <readDHT22Data+0x5a>
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f7ff ff8e 	bl	8003e92 <Delay_us>
 8003f76:	68ab      	ldr	r3, [r5, #8]
 8003f78:	04d8      	lsls	r0, r3, #19
 8003f7a:	d50d      	bpl.n	8003f98 <readDHT22Data+0xc0>
		if (wait > 16) {
 8003f7c:	2910      	cmp	r1, #16
 8003f7e:	d80e      	bhi.n	8003f9e <readDHT22Data+0xc6>
 8003f80:	2100      	movs	r1, #0
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
		} else {
			// Measure bit impulse length (T_h0 = 25us, T_h1 = 70us)
			wait = 0;
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003f82:	68ab      	ldr	r3, [r5, #8]
 8003f84:	04db      	lsls	r3, r3, #19
 8003f86:	d42c      	bmi.n	8003fe2 <readDHT22Data+0x10a>
			bits[i] = (wait < 16) ? wait : 0xffff;
 8003f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f8c:	290f      	cmp	r1, #15
 8003f8e:	bf88      	it	hi
 8003f90:	4619      	movhi	r1, r3
 8003f92:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
 8003f96:	e00b      	b.n	8003fb0 <readDHT22Data+0xd8>
		while (!(DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003f98:	3101      	adds	r1, #1
 8003f9a:	2915      	cmp	r1, #21
 8003f9c:	d1e8      	bne.n	8003f70 <readDHT22Data+0x98>
			bits[i] = 0xffff;
 8003f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fa2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003fa6:	68ab      	ldr	r3, [r5, #8]
 8003fa8:	04da      	lsls	r2, r3, #19
 8003faa:	d501      	bpl.n	8003fb0 <readDHT22Data+0xd8>
 8003fac:	2913      	cmp	r1, #19
 8003fae:	d90f      	bls.n	8003fd0 <readDHT22Data+0xf8>
 8003fb0:	3401      	adds	r4, #1
	while (i < 40) {
 8003fb2:	2c28      	cmp	r4, #40	; 0x28
 8003fb4:	d1c9      	bne.n	8003f4a <readDHT22Data+0x72>
 8003fb6:	2300      	movs	r3, #0
		}

		i++;
	}

	for (i = 0; i < 40; i++) if (bits[i] == 0xffff) return DHT22_RCV_RCV_TIMEOUT;
 8003fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fbc:	4a11      	ldr	r2, [pc, #68]	; (8004004 <readDHT22Data+0x12c>)
 8003fbe:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003fc2:	4288      	cmp	r0, r1
 8003fc4:	d017      	beq.n	8003ff6 <readDHT22Data+0x11e>
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	2b28      	cmp	r3, #40	; 0x28
 8003fca:	d1f8      	bne.n	8003fbe <readDHT22Data+0xe6>

	return DHT22_RCV_OK;
 8003fcc:	2000      	movs	r0, #0
 8003fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7ff ff5e 	bl	8003e92 <Delay_us>
 8003fd6:	3101      	adds	r1, #1
 8003fd8:	e7e5      	b.n	8003fa6 <readDHT22Data+0xce>
			while ((DHT22_GPIO_PORT->IDR & DHT22_GPIO_PIN) && (wait++ < 20)) Delay_us(1);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f7ff ff59 	bl	8003e92 <Delay_us>
 8003fe0:	e7cf      	b.n	8003f82 <readDHT22Data+0xaa>
 8003fe2:	3101      	adds	r1, #1
 8003fe4:	2915      	cmp	r1, #21
 8003fe6:	d1f8      	bne.n	8003fda <readDHT22Data+0x102>
 8003fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fec:	e7d1      	b.n	8003f92 <readDHT22Data+0xba>
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK1;
 8003fee:	2002      	movs	r0, #2
 8003ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((wait < 8) || (wait > 15)) return DHT22_RCV_BAD_ACK2;
 8003ff2:	2003      	movs	r0, #3
 8003ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < 40; i++) if (bits[i] == 0xffff) return DHT22_RCV_RCV_TIMEOUT;
 8003ff6:	2004      	movs	r0, #4
}
 8003ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20001c1c 	.word	0x20001c1c
 8004000:	40010c00 	.word	0x40010c00
 8004004:	2000209c 	.word	0x2000209c

08004008 <DHT22_DecodeReadings>:

uint16_t DHT22_DecodeReadings(void)
{
 8004008:	2000      	movs	r0, #0
 800400a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t  i = 0;

	hMSB = 0;
	for (; i < 8; i++) {
		hMSB <<= 1;
		if (bits[i] > 7) hMSB |= 1;
 800400c:	4d2d      	ldr	r5, [pc, #180]	; (80040c4 <DHT22_DecodeReadings+0xbc>)
{
 800400e:	4604      	mov	r4, r0
 8004010:	462f      	mov	r7, r5
		if (bits[i] > 7) hMSB |= 1;
 8004012:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
		hMSB <<= 1;
 8004016:	0061      	lsls	r1, r4, #1
		if (bits[i] > 7) hMSB |= 1;
 8004018:	2b07      	cmp	r3, #7
		hMSB <<= 1;
 800401a:	b2cc      	uxtb	r4, r1
 800401c:	f100 0001 	add.w	r0, r0, #1
		if (bits[i] > 7) hMSB |= 1;
 8004020:	bf88      	it	hi
 8004022:	f044 0401 	orrhi.w	r4, r4, #1
	for (; i < 8; i++) {
 8004026:	2808      	cmp	r0, #8
 8004028:	d1f3      	bne.n	8004012 <DHT22_DecodeReadings+0xa>
 800402a:	2000      	movs	r0, #0
 800402c:	4601      	mov	r1, r0
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <DHT22_DecodeReadings+0xc0>)
 8004030:	701c      	strb	r4, [r3, #0]
	}
	hLSB = 0;
	for (; i < 16; i++) {
		hLSB <<= 1;
		if (bits[i] > 7) hLSB |= 1;
 8004032:	183b      	adds	r3, r7, r0
 8004034:	8a1b      	ldrh	r3, [r3, #16]
		hLSB <<= 1;
 8004036:	0049      	lsls	r1, r1, #1
		if (bits[i] > 7) hLSB |= 1;
 8004038:	2b07      	cmp	r3, #7
		hLSB <<= 1;
 800403a:	b2c9      	uxtb	r1, r1
 800403c:	f100 0002 	add.w	r0, r0, #2
		if (bits[i] > 7) hLSB |= 1;
 8004040:	bf88      	it	hi
 8004042:	f041 0101 	orrhi.w	r1, r1, #1
	for (; i < 16; i++) {
 8004046:	2810      	cmp	r0, #16
 8004048:	d1f3      	bne.n	8004032 <DHT22_DecodeReadings+0x2a>
 800404a:	2500      	movs	r5, #0
 800404c:	462a      	mov	r2, r5
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <DHT22_DecodeReadings+0xc4>)
 8004050:	7019      	strb	r1, [r3, #0]
	}
	tMSB = 0;
	for (; i < 24; i++) {
		tMSB <<= 1;
		if (bits[i] > 7) tMSB |= 1;
 8004052:	197b      	adds	r3, r7, r5
 8004054:	8c1b      	ldrh	r3, [r3, #32]
		tMSB <<= 1;
 8004056:	0052      	lsls	r2, r2, #1
		if (bits[i] > 7) tMSB |= 1;
 8004058:	2b07      	cmp	r3, #7
		tMSB <<= 1;
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	f105 0502 	add.w	r5, r5, #2
		if (bits[i] > 7) tMSB |= 1;
 8004060:	bf88      	it	hi
 8004062:	f042 0201 	orrhi.w	r2, r2, #1
	for (; i < 24; i++) {
 8004066:	2d10      	cmp	r5, #16
 8004068:	d1f3      	bne.n	8004052 <DHT22_DecodeReadings+0x4a>
 800406a:	2500      	movs	r5, #0
 800406c:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <DHT22_DecodeReadings+0xc8>)
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	462b      	mov	r3, r5
	}
	tLSB = 0;
	for (; i < 32; i++) {
		tLSB <<= 1;
		if (bits[i] > 7) tLSB |= 1;
 8004072:	1978      	adds	r0, r7, r5
 8004074:	8e00      	ldrh	r0, [r0, #48]	; 0x30
		tLSB <<= 1;
 8004076:	005b      	lsls	r3, r3, #1
		if (bits[i] > 7) tLSB |= 1;
 8004078:	2807      	cmp	r0, #7
		tLSB <<= 1;
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f105 0502 	add.w	r5, r5, #2
		if (bits[i] > 7) tLSB |= 1;
 8004080:	bf88      	it	hi
 8004082:	f043 0301 	orrhi.w	r3, r3, #1
	for (; i < 32; i++) {
 8004086:	2d10      	cmp	r5, #16
 8004088:	d1f3      	bne.n	8004072 <DHT22_DecodeReadings+0x6a>
 800408a:	2600      	movs	r6, #0
 800408c:	4811      	ldr	r0, [pc, #68]	; (80040d4 <DHT22_DecodeReadings+0xcc>)
 800408e:	4d12      	ldr	r5, [pc, #72]	; (80040d8 <DHT22_DecodeReadings+0xd0>)
 8004090:	7003      	strb	r3, [r0, #0]
 8004092:	7828      	ldrb	r0, [r5, #0]
	}
	for (; i < 40; i++) {
		parity_rcv <<= 1;
		if (bits[i] > 7) parity_rcv |= 1;
 8004094:	eb07 0e06 	add.w	lr, r7, r6
 8004098:	f8be e040 	ldrh.w	lr, [lr, #64]	; 0x40
		parity_rcv <<= 1;
 800409c:	0040      	lsls	r0, r0, #1
		if (bits[i] > 7) parity_rcv |= 1;
 800409e:	f1be 0f07 	cmp.w	lr, #7
		parity_rcv <<= 1;
 80040a2:	b2c0      	uxtb	r0, r0
 80040a4:	f106 0602 	add.w	r6, r6, #2
		if (bits[i] > 7) parity_rcv |= 1;
 80040a8:	bf88      	it	hi
 80040aa:	f040 0001 	orrhi.w	r0, r0, #1
	for (; i < 40; i++) {
 80040ae:	2e10      	cmp	r6, #16
 80040b0:	d1f0      	bne.n	8004094 <DHT22_DecodeReadings+0x8c>
	}

	parity  = hMSB + hLSB + tMSB + tLSB;
 80040b2:	4421      	add	r1, r4
 80040b4:	440a      	add	r2, r1
 80040b6:	4413      	add	r3, r2
 80040b8:	7028      	strb	r0, [r5, #0]

	return (parity_rcv << 8) | parity;
 80040ba:	b2db      	uxtb	r3, r3
}
 80040bc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2000209c 	.word	0x2000209c
 80040c8:	20001c2d 	.word	0x20001c2d
 80040cc:	20001c2c 	.word	0x20001c2c
 80040d0:	20001c30 	.word	0x20001c30
 80040d4:	20001c2f 	.word	0x20001c2f
 80040d8:	20001c2e 	.word	0x20001c2e

080040dc <readUSBSerial>:



// Two functions to read and write from/to USB Serial console
int readUSBSerial(unsigned char* receiveText)
{
 80040dc:	b510      	push	{r4, lr}

	if(newUSBCommandReceived)
 80040de:	4c05      	ldr	r4, [pc, #20]	; (80040f4 <readUSBSerial+0x18>)
 80040e0:	7823      	ldrb	r3, [r4, #0]
 80040e2:	b12b      	cbz	r3, 80040f0 <readUSBSerial+0x14>
	{
		// Copy the USB Receive buffer to receiveText
		strcpy(receiveText, userRxBuf);
 80040e4:	4904      	ldr	r1, [pc, #16]	; (80040f8 <readUSBSerial+0x1c>)
 80040e6:	f000 fe65 	bl	8004db4 <strcpy>
		newUSBCommandReceived = 0;
 80040ea:	2000      	movs	r0, #0
 80040ec:	7020      	strb	r0, [r4, #0]
		// Nothing to receive, walk away
		return(1);
	}
	//CDC_Receive_FS(receiveText, 255);

	return(0);
 80040ee:	bd10      	pop	{r4, pc}
		return(1);
 80040f0:	2001      	movs	r0, #1
}
 80040f2:	bd10      	pop	{r4, pc}
 80040f4:	200020ec 	.word	0x200020ec
 80040f8:	20001f9c 	.word	0x20001f9c

080040fc <writeUSBSerial>:

int writeUSBSerial(unsigned char* sendText)
{
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4604      	mov	r4, r0
	CDC_Transmit_FS(sendText, strlen(sendText));
 8004100:	f7fc f82e 	bl	8000160 <strlen>
 8004104:	b281      	uxth	r1, r0
 8004106:	4620      	mov	r0, r4
 8004108:	f000 fc10 	bl	800492c <CDC_Transmit_FS>

	return(0);
}
 800410c:	2000      	movs	r0, #0
 800410e:	bd10      	pop	{r4, pc}

08004110 <getCurrentDate>:
{
	int errCheck = 0;

	int addr = DS3231_ADDRESS<<1;
	unsigned char data[4];
	memset(data, 0, 4);
 8004110:	2300      	movs	r3, #0
{
 8004112:	b530      	push	{r4, r5, lr}
 8004114:	b085      	sub	sp, #20
	memset(data, 0, 4);
 8004116:	9303      	str	r3, [sp, #12]

	// All
	data[0] = 0x03;
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 8004118:	2564      	movs	r5, #100	; 0x64
	data[0] = 0x03;
 800411a:	2303      	movs	r3, #3
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 800411c:	4c24      	ldr	r4, [pc, #144]	; (80041b0 <getCurrentDate+0xa0>)
 800411e:	aa03      	add	r2, sp, #12
	data[0] = 0x03;
 8004120:	f88d 300c 	strb.w	r3, [sp, #12]
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 8004124:	21d0      	movs	r1, #208	; 0xd0
 8004126:	2301      	movs	r3, #1
 8004128:	9500      	str	r5, [sp, #0]
 800412a:	4620      	mov	r0, r4
 800412c:	f7fc fb56 	bl	80007dc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8004130:	2014      	movs	r0, #20
 8004132:	f7fc f865 	bl	8000200 <HAL_Delay>
	errCheck = HAL_I2C_Master_Receive(&hi2c1, addr, data, 4, 100);
 8004136:	aa03      	add	r2, sp, #12
 8004138:	2304      	movs	r3, #4
 800413a:	21d0      	movs	r1, #208	; 0xd0
 800413c:	9500      	str	r5, [sp, #0]
 800413e:	4620      	mov	r0, r4
 8004140:	f7fc fc22 	bl	8000988 <HAL_I2C_Master_Receive>
 8004144:	4604      	mov	r4, r0
	HAL_Delay(20);
 8004146:	2014      	movs	r0, #20
 8004148:	f7fc f85a 	bl	8000200 <HAL_Delay>

	dateTime.dt_weekday = data[0] & 0x7;	// Make sure we only use first 3 bits, rest SHOULD be 0, but you never know
 800414c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004150:	4818      	ldr	r0, [pc, #96]	; (80041b4 <getCurrentDate+0xa4>)
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	70c3      	strb	r3, [r0, #3]
	dateTime.dt_day		= (data[1] & 0xf) + ((data[1] & 0x30) >> 4) *10;
 8004158:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800415c:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8004160:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800416c:	7103      	strb	r3, [r0, #4]
	dateTime.dt_month	= (data[2] & 0xf) + ((data[2] & 0x10) >> 4) *10;
 800416e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004172:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8004176:	0091      	lsls	r1, r2, #2
 8004178:	440a      	add	r2, r1
 800417a:	f003 010f 	and.w	r1, r3, #15
 800417e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
	dateTime.dt_year	= (data[3] & 0xf) + ((data[3] & 0xf0) >> 4) *10 + ((data[2] & BIT7)>>7)*100 + 2000;
 8004182:	09db      	lsrs	r3, r3, #7
 8004184:	f89d 100f 	ldrb.w	r1, [sp, #15]
	dateTime.dt_month	= (data[2] & 0xf) + ((data[2] & 0x10) >> 4) *10;
 8004188:	7142      	strb	r2, [r0, #5]
	dateTime.dt_year	= (data[3] & 0xf) + ((data[3] & 0xf0) >> 4) *10 + ((data[2] & BIT7)>>7)*100 + 2000;
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	f001 020f 	and.w	r2, r1, #15
 8004192:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8004196:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800419a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800419e:	090a      	lsrs	r2, r1, #4
 80041a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80041a8:	80c3      	strh	r3, [r0, #6]

	return(errCheck);
}
 80041aa:	4620      	mov	r0, r4
 80041ac:	b005      	add	sp, #20
 80041ae:	bd30      	pop	{r4, r5, pc}
 80041b0:	20001ec0 	.word	0x20001ec0
 80041b4:	200020ee 	.word	0x200020ee

080041b8 <MinToBIN>:
}

unsigned char MinToBIN(unsigned char min)
{
	unsigned char bin;
	bin = (min % 10) + (min/10 << 4);
 80041b8:	230a      	movs	r3, #10
 80041ba:	fbb0 f2f3 	udiv	r2, r0, r3
 80041be:	fb03 0012 	mls	r0, r3, r2, r0
 80041c2:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	return(bin);
}
 80041c6:	b2c0      	uxtb	r0, r0
 80041c8:	4770      	bx	lr

080041ca <HourToBIN>:

unsigned char HourToBIN(unsigned char hour)
{
	unsigned char bin;
	// ASSUME 24 HOUR MODE
	bin = hour > 19 ? (hour % 10) + BIT5 : (hour % 10) + BIT4 * (hour > 9);
 80041ca:	2813      	cmp	r0, #19
 80041cc:	f04f 010a 	mov.w	r1, #10
 80041d0:	d906      	bls.n	80041e0 <HourToBIN+0x16>
 80041d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80041d6:	fb01 0012 	mls	r0, r1, r2, r0
 80041da:	3020      	adds	r0, #32
 80041dc:	b2c0      	uxtb	r0, r0
 80041de:	4770      	bx	lr
 80041e0:	fbb0 f3f1 	udiv	r3, r0, r1
 80041e4:	2809      	cmp	r0, #9
 80041e6:	fb01 0313 	mls	r3, r1, r3, r0
 80041ea:	bf8c      	ite	hi
 80041ec:	2010      	movhi	r0, #16
 80041ee:	2000      	movls	r0, #0
 80041f0:	4418      	add	r0, r3
 80041f2:	f000 00ff 	and.w	r0, r0, #255	; 0xff
	return(bin);
}
 80041f6:	4770      	bx	lr

080041f8 <setCurrentTime>:
{
 80041f8:	b530      	push	{r4, r5, lr}
	memset(data, 0, 4);
 80041fa:	2400      	movs	r4, #0
{
 80041fc:	b085      	sub	sp, #20
 80041fe:	4605      	mov	r5, r0
	data[1] = SecToBIN(sec);
 8004200:	4610      	mov	r0, r2
	memset(data, 0, 4);
 8004202:	9403      	str	r4, [sp, #12]
	data[1] = SecToBIN(sec);
 8004204:	f7ff ffd8 	bl	80041b8 <MinToBIN>
 8004208:	f88d 000d 	strb.w	r0, [sp, #13]
	data[2] = MinToBIN(min);
 800420c:	4608      	mov	r0, r1
 800420e:	f7ff ffd3 	bl	80041b8 <MinToBIN>
 8004212:	f88d 000e 	strb.w	r0, [sp, #14]
	data[3] = HourToBIN(hour);
 8004216:	4628      	mov	r0, r5
 8004218:	f7ff ffd7 	bl	80041ca <HourToBIN>
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 4, 100);
 800421c:	2364      	movs	r3, #100	; 0x64
	data[3] = HourToBIN(hour);
 800421e:	f88d 000f 	strb.w	r0, [sp, #15]
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 4, 100);
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	aa03      	add	r2, sp, #12
 8004226:	2304      	movs	r3, #4
 8004228:	21d0      	movs	r1, #208	; 0xd0
 800422a:	4804      	ldr	r0, [pc, #16]	; (800423c <setCurrentTime+0x44>)
 800422c:	f7fc fad6 	bl	80007dc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8004230:	2014      	movs	r0, #20
 8004232:	f7fb ffe5 	bl	8000200 <HAL_Delay>
}
 8004236:	4620      	mov	r0, r4
 8004238:	b005      	add	sp, #20
 800423a:	bd30      	pop	{r4, r5, pc}
 800423c:	20001ec0 	.word	0x20001ec0

08004240 <BINtoMin>:
}

unsigned char BINtoMin(unsigned char bin)
{
	unsigned char min;
	min = (bin & 0xf) + ((bin>>4)*10);
 8004240:	0903      	lsrs	r3, r0, #4
 8004242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004246:	f000 000f 	and.w	r0, r0, #15
 800424a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
	return(min);
}
 800424e:	b2c0      	uxtb	r0, r0
 8004250:	4770      	bx	lr

08004252 <BINtoHour>:

unsigned char BINtoHour(unsigned char bin)
{
 8004252:	1102      	asrs	r2, r0, #4
	unsigned char hour;
	// hour = if BIT6 set - 12HOUR MODE, else 24HOUR MODDE, BIT5 set - PM, else 20s +
	hour = (bin & 0x40) ? (bin & 0xf) + ((bin & 0x20) >> 5)*12 + ((bin & 0x10) >> 4)*10 : (bin & 0xf) + ((bin & 0x20) >> 5)*20 + ((bin & 0x10) >> 4)*10 ;
 8004254:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004258:	f002 0201 	and.w	r2, r2, #1
 800425c:	ea4f 1360 	mov.w	r3, r0, asr #5
 8004260:	f000 010f 	and.w	r1, r0, #15
 8004264:	ea4f 0082 	mov.w	r0, r2, lsl #2
 8004268:	d00a      	beq.n	8004280 <BINtoHour+0x2e>
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	4410      	add	r0, r2
 8004270:	005a      	lsls	r2, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800427a:	4408      	add	r0, r1
 800427c:	b2c0      	uxtb	r0, r0
	return(hour);
}
 800427e:	4770      	bx	lr
	hour = (bin & 0x40) ? (bin & 0xf) + ((bin & 0x20) >> 5)*12 + ((bin & 0x10) >> 4)*10 : (bin & 0xf) + ((bin & 0x20) >> 5)*20 + ((bin & 0x10) >> 4)*10 ;
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	4402      	add	r2, r0
 8004286:	0098      	lsls	r0, r3, #2
 8004288:	4418      	add	r0, r3
 800428a:	0080      	lsls	r0, r0, #2
 800428c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8004290:	e7f3      	b.n	800427a <BINtoHour+0x28>
	...

08004294 <getCurrentTime>:
{
 8004294:	b530      	push	{r4, r5, lr}
	memset(data, 0, 4);
 8004296:	2300      	movs	r3, #0
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 8004298:	2564      	movs	r5, #100	; 0x64
 800429a:	4c15      	ldr	r4, [pc, #84]	; (80042f0 <getCurrentTime+0x5c>)
{
 800429c:	b085      	sub	sp, #20
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 800429e:	aa03      	add	r2, sp, #12
	memset(data, 0, 4);
 80042a0:	9303      	str	r3, [sp, #12]
	errCheck = HAL_I2C_Master_Transmit(&hi2c1, addr, data, 1, 100);
 80042a2:	21d0      	movs	r1, #208	; 0xd0
 80042a4:	2301      	movs	r3, #1
 80042a6:	9500      	str	r5, [sp, #0]
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7fc fa97 	bl	80007dc <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80042ae:	2014      	movs	r0, #20
 80042b0:	f7fb ffa6 	bl	8000200 <HAL_Delay>
	errCheck = HAL_I2C_Master_Receive(&hi2c1, addr, data, 4, 100);
 80042b4:	2304      	movs	r3, #4
 80042b6:	21d0      	movs	r1, #208	; 0xd0
 80042b8:	aa03      	add	r2, sp, #12
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	4620      	mov	r0, r4
 80042be:	f7fc fb63 	bl	8000988 <HAL_I2C_Master_Receive>
 80042c2:	4604      	mov	r4, r0
	HAL_Delay(20);
 80042c4:	2014      	movs	r0, #20
 80042c6:	f7fb ff9b 	bl	8000200 <HAL_Delay>
	dateTime.dt_hours = 	BINtoHour(data[2]);
 80042ca:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80042ce:	f7ff ffc0 	bl	8004252 <BINtoHour>
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <getCurrentTime+0x60>)
 80042d4:	7090      	strb	r0, [r2, #2]
	dateTime.dt_minutes =	BINtoMin(data[1]);
 80042d6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80042da:	f7ff ffb1 	bl	8004240 <BINtoMin>
 80042de:	7050      	strb	r0, [r2, #1]
	dateTime.dt_seconds = 	BINtoSec(data[0]);
 80042e0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80042e4:	f7ff ffac 	bl	8004240 <BINtoMin>
 80042e8:	7010      	strb	r0, [r2, #0]
}
 80042ea:	4620      	mov	r0, r4
 80042ec:	b005      	add	sp, #20
 80042ee:	bd30      	pop	{r4, r5, pc}
 80042f0:	20001ec0 	.word	0x20001ec0
 80042f4:	200020ee 	.word	0x200020ee

080042f8 <setCurrentColor>:
extern unsigned short currentBGColor;


void setCurrentColor(unsigned short color)
{
	currentColor = color;
 80042f8:	4b01      	ldr	r3, [pc, #4]	; (8004300 <setCurrentColor+0x8>)
 80042fa:	8018      	strh	r0, [r3, #0]
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20001b1a 	.word	0x20001b1a

08004304 <setCurrentBGColor>:
}

void setCurrentBGColor(unsigned short color)
{
	currentBGColor = color;
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <setCurrentBGColor+0x8>)
 8004306:	8018      	strh	r0, [r3, #0]
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000118 	.word	0x20000118

08004310 <outcharxy32x>:




void outcharxy32x(unsigned short x, unsigned short y, unsigned char c, unsigned char offset)
{
 8004310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned short charline;
	unsigned char index = c - 32;
	//get8x16index(c);

	for(int i = 0; i < 32; i++)
 8004314:	2400      	movs	r4, #0
	unsigned char index = c - 32;
 8004316:	f1a2 0520 	sub.w	r5, r2, #32
 800431a:	b2ed      	uxtb	r5, r5
			{
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentColor);
			}
			else
			{
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentBGColor);
 800431c:	0100      	lsls	r0, r0, #4
 800431e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004322:	01ad      	lsls	r5, r5, #6
 8004324:	b287      	uxth	r7, r0
 8004326:	fa1f f883 	uxth.w	r8, r3
		for(int j = 0; j < 16; j++)
 800432a:	f04f 0900 	mov.w	r9, #0
		memcpy(&charline, xbmFont[index]+2*i, 2);
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <outcharxy32x+0x68>)
 8004330:	eb08 0604 	add.w	r6, r8, r4
 8004334:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8004338:	f833 a005 	ldrh.w	sl, [r3, r5]
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentColor);
 800433c:	f8df b040 	ldr.w	fp, [pc, #64]	; 8004380 <outcharxy32x+0x70>
 8004340:	b2b6      	uxth	r6, r6
			if((charline >> j) & 0x01)
 8004342:	fa4a f209 	asr.w	r2, sl, r9
 8004346:	f012 0f01 	tst.w	r2, #1
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentBGColor);
 800434a:	bf08      	it	eq
 800434c:	4b0b      	ldreq	r3, [pc, #44]	; (800437c <outcharxy32x+0x6c>)
 800434e:	eb07 0009 	add.w	r0, r7, r9
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentColor);
 8004352:	bf14      	ite	ne
 8004354:	f8bb 2000 	ldrhne.w	r2, [fp]
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentBGColor);
 8004358:	881a      	ldrheq	r2, [r3, #0]
 800435a:	4631      	mov	r1, r6
 800435c:	b280      	uxth	r0, r0
		for(int j = 0; j < 16; j++)
 800435e:	f109 0901 	add.w	r9, r9, #1
				ILI9341_Draw_Pixel(x*16 + j, y*32 + i + offset, currentBGColor);
 8004362:	f7ff f9f9 	bl	8003758 <ILI9341_Draw_Pixel>
		for(int j = 0; j < 16; j++)
 8004366:	f1b9 0f10 	cmp.w	r9, #16
 800436a:	d1ea      	bne.n	8004342 <outcharxy32x+0x32>
	for(int i = 0; i < 32; i++)
 800436c:	3401      	adds	r4, #1
 800436e:	2c20      	cmp	r4, #32
 8004370:	d1db      	bne.n	800432a <outcharxy32x+0x1a>
			}
		}
	}
}
 8004372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	20000124 	.word	0x20000124
 800437c:	20000118 	.word	0x20000118
 8004380:	20001b1a 	.word	0x20001b1a

08004384 <outtextxy32x>:

void outtextxy32x(unsigned short x, unsigned short y, unsigned char* str, unsigned char offset)
{
 8004384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004388:	4605      	mov	r5, r0
 800438a:	4614      	mov	r4, r2
	short len = strlen(str);
 800438c:	4610      	mov	r0, r2
{
 800438e:	4688      	mov	r8, r1
 8004390:	4699      	mov	r9, r3
	short len = strlen(str);
 8004392:	f7fb fee5 	bl	8000160 <strlen>
 8004396:	b2a6      	uxth	r6, r4
 8004398:	b207      	sxth	r7, r0

	for(short i = 0; i < len; i++)
	{
		outcharxy32x(x+i, y, str[i], offset);
 800439a:	1bad      	subs	r5, r5, r6
 800439c:	b2a0      	uxth	r0, r4
	for(short i = 0; i < len; i++)
 800439e:	1b83      	subs	r3, r0, r6
 80043a0:	b21b      	sxth	r3, r3
 80043a2:	429f      	cmp	r7, r3
 80043a4:	dc01      	bgt.n	80043aa <outtextxy32x+0x26>
	}
}
 80043a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		outcharxy32x(x+i, y, str[i], offset);
 80043aa:	4428      	add	r0, r5
 80043ac:	464b      	mov	r3, r9
 80043ae:	f814 2b01 	ldrb.w	r2, [r4], #1
 80043b2:	4641      	mov	r1, r8
 80043b4:	b280      	uxth	r0, r0
 80043b6:	f7ff ffab 	bl	8004310 <outcharxy32x>
 80043ba:	e7ef      	b.n	800439c <outtextxy32x+0x18>

080043bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_MspInit+0x84>)
{
 80043be:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80043c0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	619a      	str	r2, [r3, #24]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d4:	f7fb ff26 	bl	8000224 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80043d8:	2200      	movs	r2, #0
 80043da:	f06f 000b 	mvn.w	r0, #11
 80043de:	4611      	mov	r1, r2
 80043e0:	f7fb ff32 	bl	8000248 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	f06f 000a 	mvn.w	r0, #10
 80043ea:	4611      	mov	r1, r2
 80043ec:	f7fb ff2c 	bl	8000248 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	f06f 0009 	mvn.w	r0, #9
 80043f6:	4611      	mov	r1, r2
 80043f8:	f7fb ff26 	bl	8000248 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80043fc:	2200      	movs	r2, #0
 80043fe:	f06f 0004 	mvn.w	r0, #4
 8004402:	4611      	mov	r1, r2
 8004404:	f7fb ff20 	bl	8000248 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004408:	2200      	movs	r2, #0
 800440a:	f06f 0003 	mvn.w	r0, #3
 800440e:	4611      	mov	r1, r2
 8004410:	f7fb ff1a 	bl	8000248 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004414:	2200      	movs	r2, #0
 8004416:	f06f 0001 	mvn.w	r0, #1
 800441a:	4611      	mov	r1, r2
 800441c:	f7fb ff14 	bl	8000248 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	4611      	mov	r1, r2
 8004428:	f7fb ff0e 	bl	8000248 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <HAL_MspInit+0x88>)
 800442e:	6853      	ldr	r3, [r2, #4]
 8004430:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800443a:	b003      	add	sp, #12
 800443c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004440:	40021000 	.word	0x40021000
 8004444:	40010000 	.word	0x40010000

08004448 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800444a:	6802      	ldr	r2, [r0, #0]
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_I2C_MspInit+0x38>)
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004452:	23c0      	movs	r3, #192	; 0xc0
 8004454:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004456:	2312      	movs	r3, #18
 8004458:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800445a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800445c:	a902      	add	r1, sp, #8
 800445e:	4809      	ldr	r0, [pc, #36]	; (8004484 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004460:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004462:	f7fb ff59 	bl	8000318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_I2C_MspInit+0x40>)
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800446e:	61da      	str	r2, [r3, #28]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800447a:	b007      	add	sp, #28
 800447c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004480:	40005400 	.word	0x40005400
 8004484:	40010c00 	.word	0x40010c00
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800448c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800448e:	6802      	ldr	r2, [r0, #0]
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_SPI_MspInit+0x4c>)
 8004492:	429a      	cmp	r2, r3
 8004494:	d11d      	bne.n	80044d2 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004496:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800449a:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800449e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a2:	619a      	str	r2, [r3, #24]
 80044a4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a6:	480d      	ldr	r0, [pc, #52]	; (80044dc <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80044b0:	23a0      	movs	r3, #160	; 0xa0
 80044b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044b8:	2303      	movs	r3, #3
 80044ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044bc:	f7fb ff2c 	bl	8000318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	a902      	add	r1, sp, #8
 80044c8:	4804      	ldr	r0, [pc, #16]	; (80044dc <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ce:	f7fb ff23 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80044d2:	b007      	add	sp, #28
 80044d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80044d8:	40013000 	.word	0x40013000
 80044dc:	40010800 	.word	0x40010800

080044e0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044e0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_TIM_Base_MspInit+0x68>)
 80044e4:	6802      	ldr	r2, [r0, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d12a      	bne.n	8004540 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044ea:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80044ee:	699a      	ldr	r2, [r3, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80044f0:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f6:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044fa:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80044fc:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8004506:	f7fb fe9f 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800450a:	2018      	movs	r0, #24
 800450c:	f7fb fed0 	bl	80002b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2019      	movs	r0, #25
 8004514:	4611      	mov	r1, r2
 8004516:	f7fb fe97 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800451a:	2019      	movs	r0, #25
 800451c:	f7fb fec8 	bl	80002b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004520:	2200      	movs	r2, #0
 8004522:	201a      	movs	r0, #26
 8004524:	4611      	mov	r1, r2
 8004526:	f7fb fe8f 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800452a:	201a      	movs	r0, #26
 800452c:	f7fb fec0 	bl	80002b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	201b      	movs	r0, #27
 8004534:	4611      	mov	r1, r2
 8004536:	f7fb fe87 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800453a:	201b      	movs	r0, #27
 800453c:	f7fb feb8 	bl	80002b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004540:	b003      	add	sp, #12
 8004542:	f85d fb04 	ldr.w	pc, [sp], #4
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00

0800454c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800454c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800454e:	6802      	ldr	r2, [r0, #0]
 8004550:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_UART_MspInit+0x50>)
 8004552:	429a      	cmp	r2, r3
 8004554:	d11f      	bne.n	8004596 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004556:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800455a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800455e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004562:	619a      	str	r2, [r3, #24]
 8004564:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004566:	480e      	ldr	r0, [pc, #56]	; (80045a0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004574:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	f7fb fecb 	bl	8000318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004586:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004588:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	a902      	add	r1, sp, #8
 800458c:	4804      	ldr	r0, [pc, #16]	; (80045a0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800458e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004590:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004592:	f7fb fec1 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004596:	b007      	add	sp, #28
 8004598:	f85d fb04 	ldr.w	pc, [sp], #4
 800459c:	40013800 	.word	0x40013800
 80045a0:	40010800 	.word	0x40010800

080045a4 <NMI_Handler>:
 80045a4:	4770      	bx	lr

080045a6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80045a6:	e7fe      	b.n	80045a6 <HardFault_Handler>

080045a8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80045a8:	e7fe      	b.n	80045a8 <MemManage_Handler>

080045aa <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80045aa:	e7fe      	b.n	80045aa <BusFault_Handler>

080045ac <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80045ac:	e7fe      	b.n	80045ac <UsageFault_Handler>

080045ae <SVC_Handler>:
 80045ae:	4770      	bx	lr

080045b0 <DebugMon_Handler>:
 80045b0:	4770      	bx	lr

080045b2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80045b2:	4770      	bx	lr

080045b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80045b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b6:	f7fb fe11 	bl	80001dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80045be:	f7fb bea6 	b.w	800030e <HAL_SYSTICK_IRQHandler>
	...

080045c4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80045c6:	f7fc bc6f 	b.w	8000ea8 <HAL_PCD_IRQHandler>
 80045ca:	bf00      	nop
 80045cc:	20002aec 	.word	0x20002aec

080045d0 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <TIM1_CC_IRQHandler+0x8>)
 80045d2:	f7fd bc48 	b.w	8001e66 <HAL_TIM_IRQHandler>
 80045d6:	bf00      	nop
 80045d8:	20001f5c 	.word	0x20001f5c

080045dc <TIM1_TRG_COM_IRQHandler>:
 80045dc:	f7ff bff8 	b.w	80045d0 <TIM1_CC_IRQHandler>

080045e0 <TIM1_UP_IRQHandler>:
 80045e0:	f7ff bff6 	b.w	80045d0 <TIM1_CC_IRQHandler>

080045e4 <TIM1_BRK_IRQHandler>:
 80045e4:	f7ff bff4 	b.w	80045d0 <TIM1_CC_IRQHandler>

080045e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80045e8:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <SystemInit+0x40>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	4a0d      	ldr	r2, [pc, #52]	; (800462c <SystemInit+0x44>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004604:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800460c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004614:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004616:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800461a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800461c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <SystemInit+0x48>)
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	f8ff0000 	.word	0xf8ff0000
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004634:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004636:	4c09      	ldr	r4, [pc, #36]	; (800465c <MX_USB_DEVICE_Init+0x28>)
 8004638:	2200      	movs	r2, #0
 800463a:	4909      	ldr	r1, [pc, #36]	; (8004660 <MX_USB_DEVICE_Init+0x2c>)
 800463c:	4620      	mov	r0, r4
 800463e:	f7fe fb39 	bl	8002cb4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <MX_USB_DEVICE_Init+0x30>)
 8004644:	4620      	mov	r0, r4
 8004646:	f7fe fb4a 	bl	8002cde <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800464a:	4620      	mov	r0, r4
 800464c:	4906      	ldr	r1, [pc, #24]	; (8004668 <MX_USB_DEVICE_Init+0x34>)
 800464e:	f7fe faf2 	bl	8002c36 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8004652:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8004658:	f7fe bb48 	b.w	8002cec <USBD_Start>
 800465c:	200020f8 	.word	0x200020f8
 8004660:	200018f8 	.word	0x200018f8
 8004664:	20000008 	.word	0x20000008
 8004668:	200018e8 	.word	0x200018e8

0800466c <DoCommand>:
	}

}

void DoCommand(int command)
{
 800466c:	b510      	push	{r4, lr}

	unsigned char text[256] = "";
 800466e:	2100      	movs	r1, #0
{
 8004670:	4604      	mov	r4, r0
 8004672:	b0c4      	sub	sp, #272	; 0x110
	unsigned char text[256] = "";
 8004674:	22fc      	movs	r2, #252	; 0xfc
 8004676:	a805      	add	r0, sp, #20
 8004678:	9104      	str	r1, [sp, #16]
 800467a:	f000 fb42 	bl	8004d02 <memset>

	if((command == COMMAND_ALL) || (command == COMMAND_TIME))
 800467e:	1e63      	subs	r3, r4, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d930      	bls.n	80046e6 <DoCommand+0x7a>
		sprintf(text, "%02d:%02d:%04d\n", dateTime.dt_hours, dateTime.dt_minutes, dateTime.dt_seconds);
		writeUSBSerial(text);
		HAL_Delay(5);
	}

	if((command == COMMAND_ALL) || (command == COMMAND_DATE))
 8004684:	2c03      	cmp	r4, #3
 8004686:	d112      	bne.n	80046ae <DoCommand+0x42>
	{
		HAL_Delay(5);
 8004688:	2005      	movs	r0, #5
 800468a:	f7fb fdb9 	bl	8000200 <HAL_Delay>
		sprintf(text, "%02d.%02d.%04d\n", dateTime.dt_day, dateTime.dt_month, dateTime.dt_year);
 800468e:	4936      	ldr	r1, [pc, #216]	; (8004768 <DoCommand+0xfc>)
 8004690:	a804      	add	r0, sp, #16
 8004692:	794b      	ldrb	r3, [r1, #5]
 8004694:	790a      	ldrb	r2, [r1, #4]
 8004696:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800469a:	9100      	str	r1, [sp, #0]
 800469c:	4933      	ldr	r1, [pc, #204]	; (800476c <DoCommand+0x100>)
 800469e:	f000 fb39 	bl	8004d14 <siprintf>
		writeUSBSerial(text);
 80046a2:	a804      	add	r0, sp, #16
 80046a4:	f7ff fd2a 	bl	80040fc <writeUSBSerial>
		HAL_Delay(5);
 80046a8:	2005      	movs	r0, #5
 80046aa:	f7fb fda9 	bl	8000200 <HAL_Delay>
	}

	if((command == COMMAND_SETTIME))
 80046ae:	2c04      	cmp	r4, #4
 80046b0:	d12d      	bne.n	800470e <DoCommand+0xa2>
	{
		HAL_Delay(5);
 80046b2:	2005      	movs	r0, #5
		unsigned char hour, min, sec;
		sscanf(USBtext, "SETTIME %d:%d:%d", &hour, &min, &sec);
 80046b4:	f10d 040f 	add.w	r4, sp, #15
		HAL_Delay(5);
 80046b8:	f7fb fda2 	bl	8000200 <HAL_Delay>
		sscanf(USBtext, "SETTIME %d:%d:%d", &hour, &min, &sec);
 80046bc:	f10d 020d 	add.w	r2, sp, #13
 80046c0:	492b      	ldr	r1, [pc, #172]	; (8004770 <DoCommand+0x104>)
 80046c2:	9400      	str	r4, [sp, #0]
 80046c4:	f10d 030e 	add.w	r3, sp, #14
 80046c8:	482a      	ldr	r0, [pc, #168]	; (8004774 <DoCommand+0x108>)
 80046ca:	f000 fb47 	bl	8004d5c <siscanf>
		setCurrentTime(hour, min, sec);
 80046ce:	7822      	ldrb	r2, [r4, #0]
 80046d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80046d4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80046d8:	f7ff fd8e 	bl	80041f8 <setCurrentTime>
		writeUSBSerial(text);
		HAL_Delay(5);

		sprintf(text, ", humidity is %d.%d\n", humi/10, humi%10);
		writeUSBSerial(text);
		HAL_Delay(5);
 80046dc:	2005      	movs	r0, #5
 80046de:	f7fb fd8f 	bl	8000200 <HAL_Delay>
	}


}
 80046e2:	b044      	add	sp, #272	; 0x110
 80046e4:	bd10      	pop	{r4, pc}
		HAL_Delay(5);
 80046e6:	2005      	movs	r0, #5
 80046e8:	f7fb fd8a 	bl	8000200 <HAL_Delay>
		sprintf(text, "%02d:%02d:%04d\n", dateTime.dt_hours, dateTime.dt_minutes, dateTime.dt_seconds);
 80046ec:	491e      	ldr	r1, [pc, #120]	; (8004768 <DoCommand+0xfc>)
 80046ee:	a804      	add	r0, sp, #16
 80046f0:	784b      	ldrb	r3, [r1, #1]
 80046f2:	788a      	ldrb	r2, [r1, #2]
 80046f4:	7809      	ldrb	r1, [r1, #0]
 80046f6:	9100      	str	r1, [sp, #0]
 80046f8:	491f      	ldr	r1, [pc, #124]	; (8004778 <DoCommand+0x10c>)
 80046fa:	f000 fb0b 	bl	8004d14 <siprintf>
		writeUSBSerial(text);
 80046fe:	a804      	add	r0, sp, #16
 8004700:	f7ff fcfc 	bl	80040fc <writeUSBSerial>
		HAL_Delay(5);
 8004704:	2005      	movs	r0, #5
 8004706:	f7fb fd7b 	bl	8000200 <HAL_Delay>
	if((command == COMMAND_ALL) || (command == COMMAND_DATE))
 800470a:	2c01      	cmp	r4, #1
 800470c:	e7bb      	b.n	8004686 <DoCommand+0x1a>
	if((command == COMMAND_SETDATE))
 800470e:	2c05      	cmp	r4, #5
 8004710:	d103      	bne.n	800471a <DoCommand+0xae>
		HAL_Delay(5);
 8004712:	4620      	mov	r0, r4
 8004714:	f7fb fd74 	bl	8000200 <HAL_Delay>
 8004718:	e7e0      	b.n	80046dc <DoCommand+0x70>
	if((command == COMMAND_ALL) || (command == COMMAND_SENSOR))
 800471a:	2c01      	cmp	r4, #1
 800471c:	d121      	bne.n	8004762 <DoCommand+0xf6>
		sprintf(text, "Temperature is %d.%d", temp/10, temp%10);
 800471e:	240a      	movs	r4, #10
		HAL_Delay(5);
 8004720:	2005      	movs	r0, #5
 8004722:	f7fb fd6d 	bl	8000200 <HAL_Delay>
		sprintf(text, "Temperature is %d.%d", temp/10, temp%10);
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <DoCommand+0x110>)
 8004728:	4915      	ldr	r1, [pc, #84]	; (8004780 <DoCommand+0x114>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	a804      	add	r0, sp, #16
 800472e:	fb93 f2f4 	sdiv	r2, r3, r4
 8004732:	fb04 3312 	mls	r3, r4, r2, r3
 8004736:	f000 faed 	bl	8004d14 <siprintf>
		writeUSBSerial(text);
 800473a:	a804      	add	r0, sp, #16
 800473c:	f7ff fcde 	bl	80040fc <writeUSBSerial>
		HAL_Delay(5);
 8004740:	2005      	movs	r0, #5
 8004742:	f7fb fd5d 	bl	8000200 <HAL_Delay>
		sprintf(text, ", humidity is %d.%d\n", humi/10, humi%10);
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <DoCommand+0x118>)
 8004748:	490f      	ldr	r1, [pc, #60]	; (8004788 <DoCommand+0x11c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	a804      	add	r0, sp, #16
 800474e:	fb93 f2f4 	sdiv	r2, r3, r4
 8004752:	fb04 3312 	mls	r3, r4, r2, r3
 8004756:	f000 fadd 	bl	8004d14 <siprintf>
		writeUSBSerial(text);
 800475a:	a804      	add	r0, sp, #16
 800475c:	f7ff fcce 	bl	80040fc <writeUSBSerial>
 8004760:	e7bc      	b.n	80046dc <DoCommand+0x70>
	if((command == COMMAND_ALL) || (command == COMMAND_SENSOR))
 8004762:	2c06      	cmp	r4, #6
 8004764:	d0db      	beq.n	800471e <DoCommand+0xb2>
 8004766:	e7bc      	b.n	80046e2 <DoCommand+0x76>
 8004768:	200020ee 	.word	0x200020ee
 800476c:	08006038 	.word	0x08006038
 8004770:	08006048 	.word	0x08006048
 8004774:	20001b1c 	.word	0x20001b1c
 8004778:	08006028 	.word	0x08006028
 800477c:	20001f14 	.word	0x20001f14
 8004780:	08006059 	.word	0x08006059
 8004784:	20001ebc 	.word	0x20001ebc
 8004788:	0800606e 	.word	0x0800606e

0800478c <GetFirstWord>:


void GetFirstWord(char* dest, char* src)
{
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	460c      	mov	r4, r1
	// This function will try to get first WORD out of char*
	// Make sure both are equally long to no overflow happen
	if(dest == NULL)
 8004790:	4605      	mov	r5, r0
 8004792:	b308      	cbz	r0, 80047d8 <GetFirstWord+0x4c>
		return;

	if(src == NULL)
 8004794:	b301      	cbz	r1, 80047d8 <GetFirstWord+0x4c>
		return;

	uint8_t len = 0;

	for(uint8_t i = 0; i < strlen(src); i++)
 8004796:	4608      	mov	r0, r1
 8004798:	f7fb fce2 	bl	8000160 <strlen>
 800479c:	2100      	movs	r1, #0
	{
		if((src[i] == ' ') || (src[i] == '\n') || (src[i] == '\r'))
 800479e:	4e11      	ldr	r6, [pc, #68]	; (80047e4 <GetFirstWord+0x58>)
 80047a0:	b2ca      	uxtb	r2, r1
	for(uint8_t i = 0; i < strlen(src); i++)
 80047a2:	4290      	cmp	r0, r2
 80047a4:	d802      	bhi.n	80047ac <GetFirstWord+0x20>
		}
	}


	if(len == 0)
		len = strlen(src) + 1;
 80047a6:	3001      	adds	r0, #1
 80047a8:	b2c2      	uxtb	r2, r0
 80047aa:	e00d      	b.n	80047c8 <GetFirstWord+0x3c>
		if((src[i] == ' ') || (src[i] == '\n') || (src[i] == '\r'))
 80047ac:	5ca3      	ldrb	r3, [r4, r2]
 80047ae:	3101      	adds	r1, #1
 80047b0:	3b0a      	subs	r3, #10
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b16      	cmp	r3, #22
 80047b6:	bf9a      	itte	ls
 80047b8:	fa26 f303 	lsrls.w	r3, r6, r3
 80047bc:	43db      	mvnls	r3, r3
 80047be:	2301      	movhi	r3, #1
 80047c0:	07db      	lsls	r3, r3, #31
 80047c2:	d4ed      	bmi.n	80047a0 <GetFirstWord+0x14>
	if(len == 0)
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	d0ee      	beq.n	80047a6 <GetFirstWord+0x1a>
 80047c8:	1e51      	subs	r1, r2, #1
 80047ca:	1e63      	subs	r3, r4, #1
 80047cc:	1e68      	subs	r0, r5, #1
 80047ce:	440c      	add	r4, r1

	for(uint8_t i = 0; i < len; i++)
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	d102      	bne.n	80047da <GetFirstWord+0x4e>
	{
		dest[i] = src[i];
	}

	dest[len] = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	54ab      	strb	r3, [r5, r2]
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
		dest[i] = src[i];
 80047da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80047de:	f800 1f01 	strb.w	r1, [r0, #1]!
 80047e2:	e7f5      	b.n	80047d0 <GetFirstWord+0x44>
 80047e4:	00400009 	.word	0x00400009

080047e8 <DecodeCommand>:
{
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
 80047ec:	b0c0      	sub	sp, #256	; 0x100
	memset (command, 0, 128);
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	2100      	movs	r1, #0
 80047f2:	4668      	mov	r0, sp
 80047f4:	f000 fa85 	bl	8004d02 <memset>
	if(strlen(comString) > 127)
 80047f8:	4620      	mov	r0, r4
 80047fa:	f7fb fcb1 	bl	8000160 <strlen>
 80047fe:	287f      	cmp	r0, #127	; 0x7f
		comString[127] = 0;
 8004800:	bf88      	it	hi
 8004802:	2300      	movhi	r3, #0
	GetFirstWord(command, comString);
 8004804:	4621      	mov	r1, r4
		comString[127] = 0;
 8004806:	bf88      	it	hi
 8004808:	f884 307f 	strbhi.w	r3, [r4, #127]	; 0x7f
	GetFirstWord(command, comString);
 800480c:	4668      	mov	r0, sp
 800480e:	f7ff ffbd 	bl	800478c <GetFirstWord>
	char teststring[128] = "";
 8004812:	2100      	movs	r1, #0
 8004814:	227c      	movs	r2, #124	; 0x7c
 8004816:	a821      	add	r0, sp, #132	; 0x84
 8004818:	9120      	str	r1, [sp, #128]	; 0x80
 800481a:	f000 fa72 	bl	8004d02 <memset>
	HAL_Delay(5);
 800481e:	2005      	movs	r0, #5
 8004820:	f7fb fcee 	bl	8000200 <HAL_Delay>
	sprintf(teststring, "Command is %s\n", command);
 8004824:	491b      	ldr	r1, [pc, #108]	; (8004894 <DecodeCommand+0xac>)
 8004826:	466a      	mov	r2, sp
 8004828:	a820      	add	r0, sp, #128	; 0x80
 800482a:	f000 fa73 	bl	8004d14 <siprintf>
	writeUSBSerial(teststring);
 800482e:	a820      	add	r0, sp, #128	; 0x80
 8004830:	f7ff fc64 	bl	80040fc <writeUSBSerial>
	HAL_Delay(5);
 8004834:	2005      	movs	r0, #5
 8004836:	f7fb fce3 	bl	8000200 <HAL_Delay>
	if(!strcmp(command, "ALL"))
 800483a:	4917      	ldr	r1, [pc, #92]	; (8004898 <DecodeCommand+0xb0>)
 800483c:	4668      	mov	r0, sp
 800483e:	f7fb fc85 	bl	800014c <strcmp>
 8004842:	b1e8      	cbz	r0, 8004880 <DecodeCommand+0x98>
	if(!strcmp(command, "TIME"))
 8004844:	4915      	ldr	r1, [pc, #84]	; (800489c <DecodeCommand+0xb4>)
 8004846:	4668      	mov	r0, sp
 8004848:	f7fb fc80 	bl	800014c <strcmp>
 800484c:	b1d0      	cbz	r0, 8004884 <DecodeCommand+0x9c>
	if(!strcmp(command, "DATE"))
 800484e:	4914      	ldr	r1, [pc, #80]	; (80048a0 <DecodeCommand+0xb8>)
 8004850:	4668      	mov	r0, sp
 8004852:	f7fb fc7b 	bl	800014c <strcmp>
 8004856:	b1b8      	cbz	r0, 8004888 <DecodeCommand+0xa0>
	if(!strcmp(command, "SETTIME"))
 8004858:	4912      	ldr	r1, [pc, #72]	; (80048a4 <DecodeCommand+0xbc>)
 800485a:	4668      	mov	r0, sp
 800485c:	f7fb fc76 	bl	800014c <strcmp>
 8004860:	b1a0      	cbz	r0, 800488c <DecodeCommand+0xa4>
	if(!strcmp(command, "SETDATE"))
 8004862:	4911      	ldr	r1, [pc, #68]	; (80048a8 <DecodeCommand+0xc0>)
 8004864:	4668      	mov	r0, sp
 8004866:	f7fb fc71 	bl	800014c <strcmp>
 800486a:	b188      	cbz	r0, 8004890 <DecodeCommand+0xa8>
	if(!strcmp(command, "SENSOR"))
 800486c:	490f      	ldr	r1, [pc, #60]	; (80048ac <DecodeCommand+0xc4>)
 800486e:	4668      	mov	r0, sp
 8004870:	f7fb fc6c 	bl	800014c <strcmp>
		return(0);
 8004874:	2800      	cmp	r0, #0
 8004876:	bf0c      	ite	eq
 8004878:	2006      	moveq	r0, #6
 800487a:	2000      	movne	r0, #0
}
 800487c:	b040      	add	sp, #256	; 0x100
 800487e:	bd10      	pop	{r4, pc}
		return(COMMAND_ALL);
 8004880:	2001      	movs	r0, #1
 8004882:	e7fb      	b.n	800487c <DecodeCommand+0x94>
		return(COMMAND_TIME);
 8004884:	2002      	movs	r0, #2
 8004886:	e7f9      	b.n	800487c <DecodeCommand+0x94>
		return(COMMAND_DATE);
 8004888:	2003      	movs	r0, #3
 800488a:	e7f7      	b.n	800487c <DecodeCommand+0x94>
		return(COMMAND_SETTIME);
 800488c:	2004      	movs	r0, #4
 800488e:	e7f5      	b.n	800487c <DecodeCommand+0x94>
		return(COMMAND_SETDATE);
 8004890:	2005      	movs	r0, #5
 8004892:	e7f3      	b.n	800487c <DecodeCommand+0x94>
 8004894:	08005ffe 	.word	0x08005ffe
 8004898:	0800600d 	.word	0x0800600d
 800489c:	08006014 	.word	0x08006014
 80048a0:	0800601c 	.word	0x0800601c
 80048a4:	08006011 	.word	0x08006011
 80048a8:	08006019 	.word	0x08006019
 80048ac:	08006021 	.word	0x08006021

080048b0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80048b0:	2000      	movs	r0, #0
 80048b2:	4770      	bx	lr

080048b4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80048b4:	2000      	movs	r0, #0
 80048b6:	4770      	bx	lr

080048b8 <CDC_Init_FS>:
{
 80048b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80048ba:	4c06      	ldr	r4, [pc, #24]	; (80048d4 <CDC_Init_FS+0x1c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	4906      	ldr	r1, [pc, #24]	; (80048d8 <CDC_Init_FS+0x20>)
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7fe f9bf 	bl	8002c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80048c6:	4905      	ldr	r1, [pc, #20]	; (80048dc <CDC_Init_FS+0x24>)
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7fe f9c3 	bl	8002c54 <USBD_CDC_SetRxBuffer>
}
 80048ce:	2000      	movs	r0, #0
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	bf00      	nop
 80048d4:	200020f8 	.word	0x200020f8
 80048d8:	20002704 	.word	0x20002704
 80048dc:	2000231c 	.word	0x2000231c

080048e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	460d      	mov	r5, r1
 80048e4:	4604      	mov	r4, r0
  /* USER CODE BEGIN 6 */
	uint8_t check = 0;
	//USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80048e6:	4601      	mov	r1, r0
 80048e8:	480d      	ldr	r0, [pc, #52]	; (8004920 <CDC_Receive_FS+0x40>)
 80048ea:	f7fe f9b3 	bl	8002c54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <CDC_Receive_FS+0x40>)
 80048f0:	f7fe f9cd 	bl	8002c8e <USBD_CDC_ReceivePacket>
		// ignore new messages until then

	}
	//else
	{
		newUSBCommandReceived = 1;
 80048f4:	2201      	movs	r2, #1
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <CDC_Receive_FS+0x44>)
 80048f8:	701a      	strb	r2, [r3, #0]

		// If received data too long, copy only 255
		if(*Len >= 256)
 80048fa:	682a      	ldr	r2, [r5, #0]
 80048fc:	2aff      	cmp	r2, #255	; 0xff
 80048fe:	d90a      	bls.n	8004916 <CDC_Receive_FS+0x36>
		{
			memcpy(userRxBuf, Buf, 255);
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <CDC_Receive_FS+0x48>)
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	4621      	mov	r1, r4
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f9f0 	bl	8004cec <memcpy>
			// Set last char to 0
			userRxBuf[255] = 0;
 800490c:	2200      	movs	r2, #0
 800490e:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
	}


	return (USBD_OK);
  /* USER CODE END 6 */
}
 8004912:	2000      	movs	r0, #0
 8004914:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(userRxBuf, Buf, *Len);
 8004916:	4621      	mov	r1, r4
 8004918:	4803      	ldr	r0, [pc, #12]	; (8004928 <CDC_Receive_FS+0x48>)
 800491a:	f000 f9e7 	bl	8004cec <memcpy>
 800491e:	e7f8      	b.n	8004912 <CDC_Receive_FS+0x32>
 8004920:	200020f8 	.word	0x200020f8
 8004924:	200020ec 	.word	0x200020ec
 8004928:	20001f9c 	.word	0x20001f9c

0800492c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800492c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800492e:	4c09      	ldr	r4, [pc, #36]	; (8004954 <CDC_Transmit_FS+0x28>)
{
 8004930:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004932:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8004936:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800493a:	b943      	cbnz	r3, 800494e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800493c:	4601      	mov	r1, r0
 800493e:	4620      	mov	r0, r4
 8004940:	f7fe f980 	bl	8002c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004944:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800494a:	f7fe b989 	b.w	8002c60 <USBD_CDC_TransmitPacket>
}
 800494e:	2001      	movs	r0, #1
 8004950:	bd10      	pop	{r4, pc}
 8004952:	bf00      	nop
 8004954:	200020f8 	.word	0x200020f8

08004958 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004958:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_PCD_MspInit+0x38>)
 800495c:	6802      	ldr	r2, [r0, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d112      	bne.n	8004988 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004962:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004966:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004968:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800496a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800496e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004970:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004972:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004974:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8004976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800497e:	f7fb fc63 	bl	8000248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004982:	2014      	movs	r0, #20
 8004984:	f7fb fc94 	bl	80002b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004988:	b003      	add	sp, #12
 800498a:	f85d fb04 	ldr.w	pc, [sp], #4
 800498e:	bf00      	nop
 8004990:	40005c00 	.word	0x40005c00

08004994 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004994:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004998:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800499c:	f7fe b9bd 	b.w	8002d1a <USBD_LL_SetupStage>

080049a0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80049a0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80049a4:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 80049a8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80049ac:	f7fe b9e2 	b.w	8002d74 <USBD_LL_DataOutStage>

080049b0 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80049b0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80049b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80049ba:	f7fe ba0d 	b.w	8002dd8 <USBD_LL_DataInStage>

080049be <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80049be:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80049c2:	f7fe ba89 	b.w	8002ed8 <USBD_LL_SOF>

080049c6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80049c6:	b510      	push	{r4, lr}
 80049c8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80049ca:	2101      	movs	r1, #1
 80049cc:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80049d0:	f7fe fa70 	bl	8002eb4 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049d4:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049dc:	f7fe ba4b 	b.w	8002e76 <USBD_LL_Reset>

080049e0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80049e4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80049e8:	f7fe fa67 	bl	8002eba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80049ec:	69a3      	ldr	r3, [r4, #24]
 80049ee:	b123      	cbz	r3, 80049fa <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80049f0:	4a02      	ldr	r2, [pc, #8]	; (80049fc <HAL_PCD_SuspendCallback+0x1c>)
 80049f2:	6913      	ldr	r3, [r2, #16]
 80049f4:	f043 0306 	orr.w	r3, r3, #6
 80049f8:	6113      	str	r3, [r2, #16]
 80049fa:	bd10      	pop	{r4, pc}
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004a00:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004a04:	f7fe ba62 	b.w	8002ecc <USBD_LL_Resume>

08004a08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004a08:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	f04f 0e03 	mov.w	lr, #3
{
 8004a12:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004a14:	491d      	ldr	r1, [pc, #116]	; (8004a8c <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 8004a16:	481e      	ldr	r0, [pc, #120]	; (8004a90 <USBD_LL_Init+0x88>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8004a18:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004a1c:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004a1e:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8004a22:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004a26:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004a28:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004a2a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004a2c:	f7fc f92e 	bl	8000c8c <HAL_PCD_Init>
 8004a30:	b120      	cbz	r0, 8004a3c <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004a32:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8004a36:	4817      	ldr	r0, [pc, #92]	; (8004a94 <USBD_LL_Init+0x8c>)
 8004a38:	f7ff fa2a 	bl	8003e90 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2318      	movs	r3, #24
 8004a40:	4611      	mov	r1, r2
 8004a42:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004a46:	f7fc fcf3 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004a4a:	2358      	movs	r3, #88	; 0x58
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004a54:	f7fc fcec 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004a58:	23c0      	movs	r3, #192	; 0xc0
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2181      	movs	r1, #129	; 0x81
 8004a5e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004a62:	f7fc fce5 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004a66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004a72:	f7fc fcdd 	bl	8001430 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2182      	movs	r1, #130	; 0x82
 8004a7e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004a82:	f7fc fcd5 	bl	8001430 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8004a86:	2000      	movs	r0, #0
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40005c00 	.word	0x40005c00
 8004a90:	20002aec 	.word	0x20002aec
 8004a94:	08006087 	.word	0x08006087

08004a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004a98:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004a9a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004a9e:	f7fc f95e 	bl	8000d5e <HAL_PCD_Start>
 8004aa2:	2803      	cmp	r0, #3
 8004aa4:	bf9a      	itte	ls
 8004aa6:	4b02      	ldrls	r3, [pc, #8]	; (8004ab0 <USBD_LL_Start+0x18>)
 8004aa8:	5c18      	ldrbls	r0, [r3, r0]
 8004aaa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004aac:	bd08      	pop	{r3, pc}
 8004aae:	bf00      	nop
 8004ab0:	08006083 	.word	0x08006083

08004ab4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ab8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004abc:	4613      	mov	r3, r2
 8004abe:	4622      	mov	r2, r4
 8004ac0:	f7fc f978 	bl	8000db4 <HAL_PCD_EP_Open>
 8004ac4:	2803      	cmp	r0, #3
 8004ac6:	bf9a      	itte	ls
 8004ac8:	4b01      	ldrls	r3, [pc, #4]	; (8004ad0 <USBD_LL_OpenEP+0x1c>)
 8004aca:	5c18      	ldrbls	r0, [r3, r0]
 8004acc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004ace:	bd10      	pop	{r4, pc}
 8004ad0:	08006083 	.word	0x08006083

08004ad4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ad4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004ad6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ada:	f7fc f98e 	bl	8000dfa <HAL_PCD_EP_Close>
 8004ade:	2803      	cmp	r0, #3
 8004ae0:	bf9a      	itte	ls
 8004ae2:	4b02      	ldrls	r3, [pc, #8]	; (8004aec <USBD_LL_CloseEP+0x18>)
 8004ae4:	5c18      	ldrbls	r0, [r3, r0]
 8004ae6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004ae8:	bd08      	pop	{r3, pc}
 8004aea:	bf00      	nop
 8004aec:	08006083 	.word	0x08006083

08004af0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004af0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004af2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004af6:	f7fc fc4f 	bl	8001398 <HAL_PCD_EP_SetStall>
 8004afa:	2803      	cmp	r0, #3
 8004afc:	bf9a      	itte	ls
 8004afe:	4b02      	ldrls	r3, [pc, #8]	; (8004b08 <USBD_LL_StallEP+0x18>)
 8004b00:	5c18      	ldrbls	r0, [r3, r0]
 8004b02:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004b04:	bd08      	pop	{r3, pc}
 8004b06:	bf00      	nop
 8004b08:	08006083 	.word	0x08006083

08004b0c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004b0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b12:	f7fc fc6a 	bl	80013ea <HAL_PCD_EP_ClrStall>
 8004b16:	2803      	cmp	r0, #3
 8004b18:	bf9a      	itte	ls
 8004b1a:	4b02      	ldrls	r3, [pc, #8]	; (8004b24 <USBD_LL_ClearStallEP+0x18>)
 8004b1c:	5c18      	ldrbls	r0, [r3, r0]
 8004b1e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004b20:	bd08      	pop	{r3, pc}
 8004b22:	bf00      	nop
 8004b24:	08006083 	.word	0x08006083

08004b28 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004b28:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b2a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004b2e:	bf45      	ittet	mi
 8004b30:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004b34:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004b38:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004b3c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004b40:	bf58      	it	pl
 8004b42:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8004b46:	4770      	bx	lr

08004b48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004b48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004b4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b4e:	f7fc f91d 	bl	8000d8c <HAL_PCD_SetAddress>
 8004b52:	2803      	cmp	r0, #3
 8004b54:	bf9a      	itte	ls
 8004b56:	4b02      	ldrls	r3, [pc, #8]	; (8004b60 <USBD_LL_SetUSBAddress+0x18>)
 8004b58:	5c18      	ldrbls	r0, [r3, r0]
 8004b5a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004b5c:	bd08      	pop	{r3, pc}
 8004b5e:	bf00      	nop
 8004b60:	08006083 	.word	0x08006083

08004b64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004b64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004b66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b6a:	f7fc f986 	bl	8000e7a <HAL_PCD_EP_Transmit>
 8004b6e:	2803      	cmp	r0, #3
 8004b70:	bf9a      	itte	ls
 8004b72:	4b02      	ldrls	r3, [pc, #8]	; (8004b7c <USBD_LL_Transmit+0x18>)
 8004b74:	5c18      	ldrbls	r0, [r3, r0]
 8004b76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004b78:	bd08      	pop	{r3, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08006083 	.word	0x08006083

08004b80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004b82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004b86:	f7fc f959 	bl	8000e3c <HAL_PCD_EP_Receive>
 8004b8a:	2803      	cmp	r0, #3
 8004b8c:	bf9a      	itte	ls
 8004b8e:	4b02      	ldrls	r3, [pc, #8]	; (8004b98 <USBD_LL_PrepareReceive+0x18>)
 8004b90:	5c18      	ldrbls	r0, [r3, r0]
 8004b92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004b94:	bd08      	pop	{r3, pc}
 8004b96:	bf00      	nop
 8004b98:	08006083 	.word	0x08006083

08004b9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b9c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004b9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ba2:	f7fc f963 	bl	8000e6c <HAL_PCD_EP_GetRxCount>
}
 8004ba6:	bd08      	pop	{r3, pc}

08004ba8 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004ba8:	4800      	ldr	r0, [pc, #0]	; (8004bac <USBD_static_malloc+0x4>)
 8004baa:	4770      	bx	lr
 8004bac:	20001c34 	.word	0x20001c34

08004bb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004bb2:	4770      	bx	lr

08004bb4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004bb4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004bb6:	4801      	ldr	r0, [pc, #4]	; (8004bbc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004bb8:	800b      	strh	r3, [r1, #0]
}
 8004bba:	4770      	bx	lr
 8004bbc:	20001914 	.word	0x20001914

08004bc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004bc0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004bc2:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004bc4:	800b      	strh	r3, [r1, #0]
}
 8004bc6:	4770      	bx	lr
 8004bc8:	20001928 	.word	0x20001928

08004bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004bcc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004bce:	4c04      	ldr	r4, [pc, #16]	; (8004be0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	4804      	ldr	r0, [pc, #16]	; (8004be4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f7fe fb20 	bl	800321a <USBD_GetString>
  return USBD_StrDesc;
}
 8004bda:	4620      	mov	r0, r4
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	20002f4c 	.word	0x20002f4c
 8004be4:	080060b3 	.word	0x080060b3

08004be8 <USBD_FS_ProductStrDescriptor>:
{
 8004be8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004bea:	4c04      	ldr	r4, [pc, #16]	; (8004bfc <USBD_FS_ProductStrDescriptor+0x14>)
 8004bec:	460a      	mov	r2, r1
 8004bee:	4804      	ldr	r0, [pc, #16]	; (8004c00 <USBD_FS_ProductStrDescriptor+0x18>)
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7fe fb12 	bl	800321a <USBD_GetString>
}
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20002f4c 	.word	0x20002f4c
 8004c00:	080060c6 	.word	0x080060c6

08004c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c04:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004c06:	4c04      	ldr	r4, [pc, #16]	; (8004c18 <USBD_FS_SerialStrDescriptor+0x14>)
 8004c08:	460a      	mov	r2, r1
 8004c0a:	4804      	ldr	r0, [pc, #16]	; (8004c1c <USBD_FS_SerialStrDescriptor+0x18>)
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	f7fe fb04 	bl	800321a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004c12:	4620      	mov	r0, r4
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	bf00      	nop
 8004c18:	20002f4c 	.word	0x20002f4c
 8004c1c:	080060dc 	.word	0x080060dc

08004c20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c20:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004c22:	4c04      	ldr	r4, [pc, #16]	; (8004c34 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004c24:	460a      	mov	r2, r1
 8004c26:	4804      	ldr	r0, [pc, #16]	; (8004c38 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004c28:	4621      	mov	r1, r4
 8004c2a:	f7fe faf6 	bl	800321a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004c2e:	4620      	mov	r0, r4
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop
 8004c34:	20002f4c 	.word	0x20002f4c
 8004c38:	0800609a 	.word	0x0800609a

08004c3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004c3c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004c3e:	4c04      	ldr	r4, [pc, #16]	; (8004c50 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004c40:	460a      	mov	r2, r1
 8004c42:	4804      	ldr	r0, [pc, #16]	; (8004c54 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004c44:	4621      	mov	r1, r4
 8004c46:	f7fe fae8 	bl	800321a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	20002f4c 	.word	0x20002f4c
 8004c54:	080060a5 	.word	0x080060a5

08004c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004c58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004c5a:	e003      	b.n	8004c64 <LoopCopyDataInit>

08004c5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004c5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004c60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004c62:	3104      	adds	r1, #4

08004c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004c64:	480a      	ldr	r0, [pc, #40]	; (8004c90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004c68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004c6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004c6c:	d3f6      	bcc.n	8004c5c <CopyDataInit>
  ldr r2, =_sbss
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004c70:	e002      	b.n	8004c78 <LoopFillZerobss>

08004c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004c72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004c74:	f842 3b04 	str.w	r3, [r2], #4

08004c78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004c7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004c7c:	d3f9      	bcc.n	8004c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c7e:	f7ff fcb3 	bl	80045e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c82:	f000 f80f 	bl	8004ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c86:	f7fe fef1 	bl	8003a6c <main>
  bx lr
 8004c8a:	4770      	bx	lr
  ldr r3, =_sidata
 8004c8c:	080062ac 	.word	0x080062ac
  ldr r0, =_sdata
 8004c90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c94:	20001afc 	.word	0x20001afc
  ldr r2, =_sbss
 8004c98:	20001afc 	.word	0x20001afc
  ldr r3, = _ebss
 8004c9c:	20003150 	.word	0x20003150

08004ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ca0:	e7fe      	b.n	8004ca0 <ADC1_2_IRQHandler>
	...

08004ca4 <__libc_init_array>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	2500      	movs	r5, #0
 8004ca8:	4e0c      	ldr	r6, [pc, #48]	; (8004cdc <__libc_init_array+0x38>)
 8004caa:	4c0d      	ldr	r4, [pc, #52]	; (8004ce0 <__libc_init_array+0x3c>)
 8004cac:	1ba4      	subs	r4, r4, r6
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	42a5      	cmp	r5, r4
 8004cb2:	d109      	bne.n	8004cc8 <__libc_init_array+0x24>
 8004cb4:	f001 f952 	bl	8005f5c <_init>
 8004cb8:	2500      	movs	r5, #0
 8004cba:	4e0a      	ldr	r6, [pc, #40]	; (8004ce4 <__libc_init_array+0x40>)
 8004cbc:	4c0a      	ldr	r4, [pc, #40]	; (8004ce8 <__libc_init_array+0x44>)
 8004cbe:	1ba4      	subs	r4, r4, r6
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	42a5      	cmp	r5, r4
 8004cc4:	d105      	bne.n	8004cd2 <__libc_init_array+0x2e>
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ccc:	4798      	blx	r3
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7ee      	b.n	8004cb0 <__libc_init_array+0xc>
 8004cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd6:	4798      	blx	r3
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7f2      	b.n	8004cc2 <__libc_init_array+0x1e>
 8004cdc:	080062a4 	.word	0x080062a4
 8004ce0:	080062a4 	.word	0x080062a4
 8004ce4:	080062a4 	.word	0x080062a4
 8004ce8:	080062a8 	.word	0x080062a8

08004cec <memcpy>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	1e43      	subs	r3, r0, #1
 8004cf0:	440a      	add	r2, r1
 8004cf2:	4291      	cmp	r1, r2
 8004cf4:	d100      	bne.n	8004cf8 <memcpy+0xc>
 8004cf6:	bd10      	pop	{r4, pc}
 8004cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d00:	e7f7      	b.n	8004cf2 <memcpy+0x6>

08004d02 <memset>:
 8004d02:	4603      	mov	r3, r0
 8004d04:	4402      	add	r2, r0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d100      	bne.n	8004d0c <memset+0xa>
 8004d0a:	4770      	bx	lr
 8004d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d10:	e7f9      	b.n	8004d06 <memset+0x4>
	...

08004d14 <siprintf>:
 8004d14:	b40e      	push	{r1, r2, r3}
 8004d16:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004d1a:	b500      	push	{lr}
 8004d1c:	b09c      	sub	sp, #112	; 0x70
 8004d1e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004d22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d26:	9104      	str	r1, [sp, #16]
 8004d28:	9107      	str	r1, [sp, #28]
 8004d2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d30:	9002      	str	r0, [sp, #8]
 8004d32:	9006      	str	r0, [sp, #24]
 8004d34:	4808      	ldr	r0, [pc, #32]	; (8004d58 <siprintf+0x44>)
 8004d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004d3e:	6800      	ldr	r0, [r0, #0]
 8004d40:	a902      	add	r1, sp, #8
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	f000 f89a 	bl	8004e7c <_svfiprintf_r>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	9b02      	ldr	r3, [sp, #8]
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	b01c      	add	sp, #112	; 0x70
 8004d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d54:	b003      	add	sp, #12
 8004d56:	4770      	bx	lr
 8004d58:	2000192c 	.word	0x2000192c

08004d5c <siscanf>:
 8004d5c:	b40e      	push	{r1, r2, r3}
 8004d5e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004d62:	b530      	push	{r4, r5, lr}
 8004d64:	b09c      	sub	sp, #112	; 0x70
 8004d66:	ac1f      	add	r4, sp, #124	; 0x7c
 8004d68:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	f7fb f9f4 	bl	8000160 <strlen>
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <siscanf+0x4c>)
 8004d7a:	9003      	str	r0, [sp, #12]
 8004d7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7e:	2300      	movs	r3, #0
 8004d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d82:	9314      	str	r3, [sp, #80]	; 0x50
 8004d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d88:	9007      	str	r0, [sp, #28]
 8004d8a:	4808      	ldr	r0, [pc, #32]	; (8004dac <siscanf+0x50>)
 8004d8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4623      	mov	r3, r4
 8004d94:	a902      	add	r1, sp, #8
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9401      	str	r4, [sp, #4]
 8004d9a:	f000 f9bd 	bl	8005118 <__ssvfiscanf_r>
 8004d9e:	b01c      	add	sp, #112	; 0x70
 8004da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	08004db1 	.word	0x08004db1
 8004dac:	2000192c 	.word	0x2000192c

08004db0 <__seofread>:
 8004db0:	2000      	movs	r0, #0
 8004db2:	4770      	bx	lr

08004db4 <strcpy>:
 8004db4:	4603      	mov	r3, r0
 8004db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dba:	f803 2b01 	strb.w	r2, [r3], #1
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d1f9      	bne.n	8004db6 <strcpy+0x2>
 8004dc2:	4770      	bx	lr

08004dc4 <__ssputs_r>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	688e      	ldr	r6, [r1, #8]
 8004dca:	4682      	mov	sl, r0
 8004dcc:	429e      	cmp	r6, r3
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4691      	mov	r9, r2
 8004dd2:	4698      	mov	r8, r3
 8004dd4:	d835      	bhi.n	8004e42 <__ssputs_r+0x7e>
 8004dd6:	898a      	ldrh	r2, [r1, #12]
 8004dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ddc:	d031      	beq.n	8004e42 <__ssputs_r+0x7e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	6825      	ldr	r5, [r4, #0]
 8004de2:	6909      	ldr	r1, [r1, #16]
 8004de4:	1a6f      	subs	r7, r5, r1
 8004de6:	6965      	ldr	r5, [r4, #20]
 8004de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dec:	fb95 f5f3 	sdiv	r5, r5, r3
 8004df0:	f108 0301 	add.w	r3, r8, #1
 8004df4:	443b      	add	r3, r7
 8004df6:	429d      	cmp	r5, r3
 8004df8:	bf38      	it	cc
 8004dfa:	461d      	movcc	r5, r3
 8004dfc:	0553      	lsls	r3, r2, #21
 8004dfe:	d531      	bpl.n	8004e64 <__ssputs_r+0xa0>
 8004e00:	4629      	mov	r1, r5
 8004e02:	f000 fff1 	bl	8005de8 <_malloc_r>
 8004e06:	4606      	mov	r6, r0
 8004e08:	b950      	cbnz	r0, 8004e20 <__ssputs_r+0x5c>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	f8ca 3000 	str.w	r3, [sl]
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	463a      	mov	r2, r7
 8004e22:	6921      	ldr	r1, [r4, #16]
 8004e24:	f7ff ff62 	bl	8004cec <memcpy>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	6126      	str	r6, [r4, #16]
 8004e36:	443e      	add	r6, r7
 8004e38:	6026      	str	r6, [r4, #0]
 8004e3a:	4646      	mov	r6, r8
 8004e3c:	6165      	str	r5, [r4, #20]
 8004e3e:	1bed      	subs	r5, r5, r7
 8004e40:	60a5      	str	r5, [r4, #8]
 8004e42:	4546      	cmp	r6, r8
 8004e44:	bf28      	it	cs
 8004e46:	4646      	movcs	r6, r8
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	f000 ff65 	bl	8005d1c <memmove>
 8004e52:	68a3      	ldr	r3, [r4, #8]
 8004e54:	2000      	movs	r0, #0
 8004e56:	1b9b      	subs	r3, r3, r6
 8004e58:	60a3      	str	r3, [r4, #8]
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	441e      	add	r6, r3
 8004e5e:	6026      	str	r6, [r4, #0]
 8004e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e64:	462a      	mov	r2, r5
 8004e66:	f001 f81d 	bl	8005ea4 <_realloc_r>
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d1e1      	bne.n	8004e34 <__ssputs_r+0x70>
 8004e70:	6921      	ldr	r1, [r4, #16]
 8004e72:	4650      	mov	r0, sl
 8004e74:	f000 ff6c 	bl	8005d50 <_free_r>
 8004e78:	e7c7      	b.n	8004e0a <__ssputs_r+0x46>
	...

08004e7c <_svfiprintf_r>:
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	b09d      	sub	sp, #116	; 0x74
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	4680      	mov	r8, r0
 8004e88:	061c      	lsls	r4, r3, #24
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	d50f      	bpl.n	8004eb0 <_svfiprintf_r+0x34>
 8004e90:	690b      	ldr	r3, [r1, #16]
 8004e92:	b96b      	cbnz	r3, 8004eb0 <_svfiprintf_r+0x34>
 8004e94:	2140      	movs	r1, #64	; 0x40
 8004e96:	f000 ffa7 	bl	8005de8 <_malloc_r>
 8004e9a:	6028      	str	r0, [r5, #0]
 8004e9c:	6128      	str	r0, [r5, #16]
 8004e9e:	b928      	cbnz	r0, 8004eac <_svfiprintf_r+0x30>
 8004ea0:	230c      	movs	r3, #12
 8004ea2:	f8c8 3000 	str.w	r3, [r8]
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eaa:	e0c4      	b.n	8005036 <_svfiprintf_r+0x1ba>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	616b      	str	r3, [r5, #20]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eba:	2330      	movs	r3, #48	; 0x30
 8004ebc:	f04f 0b01 	mov.w	fp, #1
 8004ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ec4:	4637      	mov	r7, r6
 8004ec6:	463c      	mov	r4, r7
 8004ec8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d13c      	bne.n	8004f4a <_svfiprintf_r+0xce>
 8004ed0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ed4:	d00b      	beq.n	8004eee <_svfiprintf_r+0x72>
 8004ed6:	4653      	mov	r3, sl
 8004ed8:	4632      	mov	r2, r6
 8004eda:	4629      	mov	r1, r5
 8004edc:	4640      	mov	r0, r8
 8004ede:	f7ff ff71 	bl	8004dc4 <__ssputs_r>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f000 80a2 	beq.w	800502c <_svfiprintf_r+0x1b0>
 8004ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eea:	4453      	add	r3, sl
 8004eec:	9309      	str	r3, [sp, #36]	; 0x24
 8004eee:	783b      	ldrb	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 809b 	beq.w	800502c <_svfiprintf_r+0x1b0>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8004efc:	9304      	str	r3, [sp, #16]
 8004efe:	9307      	str	r3, [sp, #28]
 8004f00:	9205      	str	r2, [sp, #20]
 8004f02:	9306      	str	r3, [sp, #24]
 8004f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f08:	931a      	str	r3, [sp, #104]	; 0x68
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	7821      	ldrb	r1, [r4, #0]
 8004f0e:	4850      	ldr	r0, [pc, #320]	; (8005050 <_svfiprintf_r+0x1d4>)
 8004f10:	f000 fef6 	bl	8005d00 <memchr>
 8004f14:	1c67      	adds	r7, r4, #1
 8004f16:	9b04      	ldr	r3, [sp, #16]
 8004f18:	b9d8      	cbnz	r0, 8004f52 <_svfiprintf_r+0xd6>
 8004f1a:	06d9      	lsls	r1, r3, #27
 8004f1c:	bf44      	itt	mi
 8004f1e:	2220      	movmi	r2, #32
 8004f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f24:	071a      	lsls	r2, r3, #28
 8004f26:	bf44      	itt	mi
 8004f28:	222b      	movmi	r2, #43	; 0x2b
 8004f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f2e:	7822      	ldrb	r2, [r4, #0]
 8004f30:	2a2a      	cmp	r2, #42	; 0x2a
 8004f32:	d016      	beq.n	8004f62 <_svfiprintf_r+0xe6>
 8004f34:	2100      	movs	r1, #0
 8004f36:	200a      	movs	r0, #10
 8004f38:	9a07      	ldr	r2, [sp, #28]
 8004f3a:	4627      	mov	r7, r4
 8004f3c:	783b      	ldrb	r3, [r7, #0]
 8004f3e:	3401      	adds	r4, #1
 8004f40:	3b30      	subs	r3, #48	; 0x30
 8004f42:	2b09      	cmp	r3, #9
 8004f44:	d950      	bls.n	8004fe8 <_svfiprintf_r+0x16c>
 8004f46:	b1c9      	cbz	r1, 8004f7c <_svfiprintf_r+0x100>
 8004f48:	e011      	b.n	8004f6e <_svfiprintf_r+0xf2>
 8004f4a:	2b25      	cmp	r3, #37	; 0x25
 8004f4c:	d0c0      	beq.n	8004ed0 <_svfiprintf_r+0x54>
 8004f4e:	4627      	mov	r7, r4
 8004f50:	e7b9      	b.n	8004ec6 <_svfiprintf_r+0x4a>
 8004f52:	4a3f      	ldr	r2, [pc, #252]	; (8005050 <_svfiprintf_r+0x1d4>)
 8004f54:	463c      	mov	r4, r7
 8004f56:	1a80      	subs	r0, r0, r2
 8004f58:	fa0b f000 	lsl.w	r0, fp, r0
 8004f5c:	4318      	orrs	r0, r3
 8004f5e:	9004      	str	r0, [sp, #16]
 8004f60:	e7d3      	b.n	8004f0a <_svfiprintf_r+0x8e>
 8004f62:	9a03      	ldr	r2, [sp, #12]
 8004f64:	1d11      	adds	r1, r2, #4
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	9103      	str	r1, [sp, #12]
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	db01      	blt.n	8004f72 <_svfiprintf_r+0xf6>
 8004f6e:	9207      	str	r2, [sp, #28]
 8004f70:	e004      	b.n	8004f7c <_svfiprintf_r+0x100>
 8004f72:	4252      	negs	r2, r2
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	9207      	str	r2, [sp, #28]
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	783b      	ldrb	r3, [r7, #0]
 8004f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f80:	d10d      	bne.n	8004f9e <_svfiprintf_r+0x122>
 8004f82:	787b      	ldrb	r3, [r7, #1]
 8004f84:	1c79      	adds	r1, r7, #1
 8004f86:	2b2a      	cmp	r3, #42	; 0x2a
 8004f88:	d132      	bne.n	8004ff0 <_svfiprintf_r+0x174>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	3702      	adds	r7, #2
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	9203      	str	r2, [sp, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfb8      	it	lt
 8004f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f9c:	9305      	str	r3, [sp, #20]
 8004f9e:	4c2d      	ldr	r4, [pc, #180]	; (8005054 <_svfiprintf_r+0x1d8>)
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	7839      	ldrb	r1, [r7, #0]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 feab 	bl	8005d00 <memchr>
 8004faa:	b138      	cbz	r0, 8004fbc <_svfiprintf_r+0x140>
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	1b00      	subs	r0, r0, r4
 8004fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8004fb4:	9b04      	ldr	r3, [sp, #16]
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	4303      	orrs	r3, r0
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	7839      	ldrb	r1, [r7, #0]
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	4825      	ldr	r0, [pc, #148]	; (8005058 <_svfiprintf_r+0x1dc>)
 8004fc2:	1c7e      	adds	r6, r7, #1
 8004fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc8:	f000 fe9a 	bl	8005d00 <memchr>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d035      	beq.n	800503c <_svfiprintf_r+0x1c0>
 8004fd0:	4b22      	ldr	r3, [pc, #136]	; (800505c <_svfiprintf_r+0x1e0>)
 8004fd2:	b9fb      	cbnz	r3, 8005014 <_svfiprintf_r+0x198>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	3308      	adds	r3, #8
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe2:	444b      	add	r3, r9
 8004fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe6:	e76d      	b.n	8004ec4 <_svfiprintf_r+0x48>
 8004fe8:	fb00 3202 	mla	r2, r0, r2, r3
 8004fec:	2101      	movs	r1, #1
 8004fee:	e7a4      	b.n	8004f3a <_svfiprintf_r+0xbe>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	240a      	movs	r4, #10
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	9305      	str	r3, [sp, #20]
 8004ff8:	460f      	mov	r7, r1
 8004ffa:	783a      	ldrb	r2, [r7, #0]
 8004ffc:	3101      	adds	r1, #1
 8004ffe:	3a30      	subs	r2, #48	; 0x30
 8005000:	2a09      	cmp	r2, #9
 8005002:	d903      	bls.n	800500c <_svfiprintf_r+0x190>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ca      	beq.n	8004f9e <_svfiprintf_r+0x122>
 8005008:	9005      	str	r0, [sp, #20]
 800500a:	e7c8      	b.n	8004f9e <_svfiprintf_r+0x122>
 800500c:	fb04 2000 	mla	r0, r4, r0, r2
 8005010:	2301      	movs	r3, #1
 8005012:	e7f1      	b.n	8004ff8 <_svfiprintf_r+0x17c>
 8005014:	ab03      	add	r3, sp, #12
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	462a      	mov	r2, r5
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <_svfiprintf_r+0x1e4>)
 800501c:	a904      	add	r1, sp, #16
 800501e:	4640      	mov	r0, r8
 8005020:	f3af 8000 	nop.w
 8005024:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005028:	4681      	mov	r9, r0
 800502a:	d1d9      	bne.n	8004fe0 <_svfiprintf_r+0x164>
 800502c:	89ab      	ldrh	r3, [r5, #12]
 800502e:	065b      	lsls	r3, r3, #25
 8005030:	f53f af39 	bmi.w	8004ea6 <_svfiprintf_r+0x2a>
 8005034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005036:	b01d      	add	sp, #116	; 0x74
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	462a      	mov	r2, r5
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <_svfiprintf_r+0x1e4>)
 8005044:	a904      	add	r1, sp, #16
 8005046:	4640      	mov	r0, r8
 8005048:	f000 fa32 	bl	80054b0 <_printf_i>
 800504c:	e7ea      	b.n	8005024 <_svfiprintf_r+0x1a8>
 800504e:	bf00      	nop
 8005050:	080060e9 	.word	0x080060e9
 8005054:	080060ef 	.word	0x080060ef
 8005058:	080060f3 	.word	0x080060f3
 800505c:	00000000 	.word	0x00000000
 8005060:	08004dc5 	.word	0x08004dc5

08005064 <_sungetc_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	1c4b      	adds	r3, r1, #1
 8005068:	4614      	mov	r4, r2
 800506a:	d103      	bne.n	8005074 <_sungetc_r+0x10>
 800506c:	f04f 35ff 	mov.w	r5, #4294967295
 8005070:	4628      	mov	r0, r5
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	8993      	ldrh	r3, [r2, #12]
 8005076:	b2cd      	uxtb	r5, r1
 8005078:	f023 0320 	bic.w	r3, r3, #32
 800507c:	8193      	strh	r3, [r2, #12]
 800507e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005080:	6852      	ldr	r2, [r2, #4]
 8005082:	b18b      	cbz	r3, 80050a8 <_sungetc_r+0x44>
 8005084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005086:	429a      	cmp	r2, r3
 8005088:	da08      	bge.n	800509c <_sungetc_r+0x38>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	e7e9      	b.n	8005070 <_sungetc_r+0xc>
 800509c:	4621      	mov	r1, r4
 800509e:	f000 fdd3 	bl	8005c48 <__submore>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d0f1      	beq.n	800508a <_sungetc_r+0x26>
 80050a6:	e7e1      	b.n	800506c <_sungetc_r+0x8>
 80050a8:	6921      	ldr	r1, [r4, #16]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	b151      	cbz	r1, 80050c4 <_sungetc_r+0x60>
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d208      	bcs.n	80050c4 <_sungetc_r+0x60>
 80050b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80050b6:	428d      	cmp	r5, r1
 80050b8:	d104      	bne.n	80050c4 <_sungetc_r+0x60>
 80050ba:	3b01      	subs	r3, #1
 80050bc:	3201      	adds	r2, #1
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	6062      	str	r2, [r4, #4]
 80050c2:	e7d5      	b.n	8005070 <_sungetc_r+0xc>
 80050c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80050c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ca:	6363      	str	r3, [r4, #52]	; 0x34
 80050cc:	2303      	movs	r3, #3
 80050ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80050d0:	4623      	mov	r3, r4
 80050d2:	6422      	str	r2, [r4, #64]	; 0x40
 80050d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	2301      	movs	r3, #1
 80050dc:	e7dc      	b.n	8005098 <_sungetc_r+0x34>

080050de <__ssrefill_r>:
 80050de:	b510      	push	{r4, lr}
 80050e0:	460c      	mov	r4, r1
 80050e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80050e4:	b169      	cbz	r1, 8005102 <__ssrefill_r+0x24>
 80050e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d001      	beq.n	80050f2 <__ssrefill_r+0x14>
 80050ee:	f000 fe2f 	bl	8005d50 <_free_r>
 80050f2:	2000      	movs	r0, #0
 80050f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050f6:	6360      	str	r0, [r4, #52]	; 0x34
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	b113      	cbz	r3, 8005102 <__ssrefill_r+0x24>
 80050fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd10      	pop	{r4, pc}
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f043 0320 	orr.w	r3, r3, #32
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	bd10      	pop	{r4, pc}

08005118 <__ssvfiscanf_r>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	2300      	movs	r3, #0
 8005124:	4606      	mov	r6, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4692      	mov	sl, r2
 800512a:	270a      	movs	r7, #10
 800512c:	9346      	str	r3, [sp, #280]	; 0x118
 800512e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005130:	4b9f      	ldr	r3, [pc, #636]	; (80053b0 <__ssvfiscanf_r+0x298>)
 8005132:	f10d 080c 	add.w	r8, sp, #12
 8005136:	93a2      	str	r3, [sp, #648]	; 0x288
 8005138:	4b9e      	ldr	r3, [pc, #632]	; (80053b4 <__ssvfiscanf_r+0x29c>)
 800513a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80053b8 <__ssvfiscanf_r+0x2a0>
 800513e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8005142:	93a3      	str	r3, [sp, #652]	; 0x28c
 8005144:	f89a 3000 	ldrb.w	r3, [sl]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 812f 	beq.w	80053ac <__ssvfiscanf_r+0x294>
 800514e:	f000 fdb7 	bl	8005cc0 <__locale_ctype_ptr>
 8005152:	f89a b000 	ldrb.w	fp, [sl]
 8005156:	4458      	add	r0, fp
 8005158:	7843      	ldrb	r3, [r0, #1]
 800515a:	f013 0308 	ands.w	r3, r3, #8
 800515e:	d143      	bne.n	80051e8 <__ssvfiscanf_r+0xd0>
 8005160:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005164:	f10a 0501 	add.w	r5, sl, #1
 8005168:	f040 8099 	bne.w	800529e <__ssvfiscanf_r+0x186>
 800516c:	9345      	str	r3, [sp, #276]	; 0x114
 800516e:	9343      	str	r3, [sp, #268]	; 0x10c
 8005170:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005174:	2b2a      	cmp	r3, #42	; 0x2a
 8005176:	d103      	bne.n	8005180 <__ssvfiscanf_r+0x68>
 8005178:	2310      	movs	r3, #16
 800517a:	f10a 0502 	add.w	r5, sl, #2
 800517e:	9343      	str	r3, [sp, #268]	; 0x10c
 8005180:	7829      	ldrb	r1, [r5, #0]
 8005182:	46aa      	mov	sl, r5
 8005184:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005188:	2a09      	cmp	r2, #9
 800518a:	f105 0501 	add.w	r5, r5, #1
 800518e:	d941      	bls.n	8005214 <__ssvfiscanf_r+0xfc>
 8005190:	2203      	movs	r2, #3
 8005192:	4889      	ldr	r0, [pc, #548]	; (80053b8 <__ssvfiscanf_r+0x2a0>)
 8005194:	f000 fdb4 	bl	8005d00 <memchr>
 8005198:	b138      	cbz	r0, 80051aa <__ssvfiscanf_r+0x92>
 800519a:	eba0 0309 	sub.w	r3, r0, r9
 800519e:	2001      	movs	r0, #1
 80051a0:	46aa      	mov	sl, r5
 80051a2:	4098      	lsls	r0, r3
 80051a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80051a6:	4318      	orrs	r0, r3
 80051a8:	9043      	str	r0, [sp, #268]	; 0x10c
 80051aa:	f89a 3000 	ldrb.w	r3, [sl]
 80051ae:	f10a 0501 	add.w	r5, sl, #1
 80051b2:	2b67      	cmp	r3, #103	; 0x67
 80051b4:	d84a      	bhi.n	800524c <__ssvfiscanf_r+0x134>
 80051b6:	2b65      	cmp	r3, #101	; 0x65
 80051b8:	f080 80b7 	bcs.w	800532a <__ssvfiscanf_r+0x212>
 80051bc:	2b47      	cmp	r3, #71	; 0x47
 80051be:	d82f      	bhi.n	8005220 <__ssvfiscanf_r+0x108>
 80051c0:	2b45      	cmp	r3, #69	; 0x45
 80051c2:	f080 80b2 	bcs.w	800532a <__ssvfiscanf_r+0x212>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 8082 	beq.w	80052d0 <__ssvfiscanf_r+0x1b8>
 80051cc:	2b25      	cmp	r3, #37	; 0x25
 80051ce:	d066      	beq.n	800529e <__ssvfiscanf_r+0x186>
 80051d0:	2303      	movs	r3, #3
 80051d2:	9744      	str	r7, [sp, #272]	; 0x110
 80051d4:	9349      	str	r3, [sp, #292]	; 0x124
 80051d6:	e045      	b.n	8005264 <__ssvfiscanf_r+0x14c>
 80051d8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80051da:	3301      	adds	r3, #1
 80051dc:	3101      	adds	r1, #1
 80051de:	9147      	str	r1, [sp, #284]	; 0x11c
 80051e0:	6861      	ldr	r1, [r4, #4]
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	3901      	subs	r1, #1
 80051e6:	6061      	str	r1, [r4, #4]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	dd0b      	ble.n	8005206 <__ssvfiscanf_r+0xee>
 80051ee:	f000 fd67 	bl	8005cc0 <__locale_ctype_ptr>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	7819      	ldrb	r1, [r3, #0]
 80051f6:	4408      	add	r0, r1
 80051f8:	7841      	ldrb	r1, [r0, #1]
 80051fa:	070d      	lsls	r5, r1, #28
 80051fc:	d4ec      	bmi.n	80051d8 <__ssvfiscanf_r+0xc0>
 80051fe:	f10a 0501 	add.w	r5, sl, #1
 8005202:	46aa      	mov	sl, r5
 8005204:	e79e      	b.n	8005144 <__ssvfiscanf_r+0x2c>
 8005206:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005208:	4621      	mov	r1, r4
 800520a:	4630      	mov	r0, r6
 800520c:	4798      	blx	r3
 800520e:	2800      	cmp	r0, #0
 8005210:	d0ed      	beq.n	80051ee <__ssvfiscanf_r+0xd6>
 8005212:	e7f4      	b.n	80051fe <__ssvfiscanf_r+0xe6>
 8005214:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005216:	fb07 1303 	mla	r3, r7, r3, r1
 800521a:	3b30      	subs	r3, #48	; 0x30
 800521c:	9345      	str	r3, [sp, #276]	; 0x114
 800521e:	e7af      	b.n	8005180 <__ssvfiscanf_r+0x68>
 8005220:	2b5b      	cmp	r3, #91	; 0x5b
 8005222:	d061      	beq.n	80052e8 <__ssvfiscanf_r+0x1d0>
 8005224:	d80c      	bhi.n	8005240 <__ssvfiscanf_r+0x128>
 8005226:	2b58      	cmp	r3, #88	; 0x58
 8005228:	d1d2      	bne.n	80051d0 <__ssvfiscanf_r+0xb8>
 800522a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	9243      	str	r2, [sp, #268]	; 0x10c
 8005232:	2210      	movs	r2, #16
 8005234:	9244      	str	r2, [sp, #272]	; 0x110
 8005236:	2b6f      	cmp	r3, #111	; 0x6f
 8005238:	bfb4      	ite	lt
 800523a:	2303      	movlt	r3, #3
 800523c:	2304      	movge	r3, #4
 800523e:	e010      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 8005240:	2b63      	cmp	r3, #99	; 0x63
 8005242:	d05c      	beq.n	80052fe <__ssvfiscanf_r+0x1e6>
 8005244:	2b64      	cmp	r3, #100	; 0x64
 8005246:	d1c3      	bne.n	80051d0 <__ssvfiscanf_r+0xb8>
 8005248:	9744      	str	r7, [sp, #272]	; 0x110
 800524a:	e7f4      	b.n	8005236 <__ssvfiscanf_r+0x11e>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d042      	beq.n	80052d6 <__ssvfiscanf_r+0x1be>
 8005250:	d81d      	bhi.n	800528e <__ssvfiscanf_r+0x176>
 8005252:	2b6e      	cmp	r3, #110	; 0x6e
 8005254:	d059      	beq.n	800530a <__ssvfiscanf_r+0x1f2>
 8005256:	d843      	bhi.n	80052e0 <__ssvfiscanf_r+0x1c8>
 8005258:	2b69      	cmp	r3, #105	; 0x69
 800525a:	d1b9      	bne.n	80051d0 <__ssvfiscanf_r+0xb8>
 800525c:	2300      	movs	r3, #0
 800525e:	9344      	str	r3, [sp, #272]	; 0x110
 8005260:	2303      	movs	r3, #3
 8005262:	9349      	str	r3, [sp, #292]	; 0x124
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	dd61      	ble.n	800532e <__ssvfiscanf_r+0x216>
 800526a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800526c:	0659      	lsls	r1, r3, #25
 800526e:	d56f      	bpl.n	8005350 <__ssvfiscanf_r+0x238>
 8005270:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8005272:	2b02      	cmp	r3, #2
 8005274:	dc7c      	bgt.n	8005370 <__ssvfiscanf_r+0x258>
 8005276:	ab01      	add	r3, sp, #4
 8005278:	4622      	mov	r2, r4
 800527a:	a943      	add	r1, sp, #268	; 0x10c
 800527c:	4630      	mov	r0, r6
 800527e:	f000 fa37 	bl	80056f0 <_scanf_chars>
 8005282:	2801      	cmp	r0, #1
 8005284:	f000 8092 	beq.w	80053ac <__ssvfiscanf_r+0x294>
 8005288:	2802      	cmp	r0, #2
 800528a:	d1ba      	bne.n	8005202 <__ssvfiscanf_r+0xea>
 800528c:	e01d      	b.n	80052ca <__ssvfiscanf_r+0x1b2>
 800528e:	2b75      	cmp	r3, #117	; 0x75
 8005290:	d0da      	beq.n	8005248 <__ssvfiscanf_r+0x130>
 8005292:	2b78      	cmp	r3, #120	; 0x78
 8005294:	d0c9      	beq.n	800522a <__ssvfiscanf_r+0x112>
 8005296:	2b73      	cmp	r3, #115	; 0x73
 8005298:	d19a      	bne.n	80051d0 <__ssvfiscanf_r+0xb8>
 800529a:	2302      	movs	r3, #2
 800529c:	e7e1      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dd0c      	ble.n	80052be <__ssvfiscanf_r+0x1a6>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	4593      	cmp	fp, r2
 80052aa:	d17f      	bne.n	80053ac <__ssvfiscanf_r+0x294>
 80052ac:	3301      	adds	r3, #1
 80052ae:	6862      	ldr	r2, [r4, #4]
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80052b4:	3a01      	subs	r2, #1
 80052b6:	3301      	adds	r3, #1
 80052b8:	6062      	str	r2, [r4, #4]
 80052ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80052bc:	e7a1      	b.n	8005202 <__ssvfiscanf_r+0xea>
 80052be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80052c0:	4621      	mov	r1, r4
 80052c2:	4630      	mov	r0, r6
 80052c4:	4798      	blx	r3
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d0ec      	beq.n	80052a4 <__ssvfiscanf_r+0x18c>
 80052ca:	9846      	ldr	r0, [sp, #280]	; 0x118
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d163      	bne.n	8005398 <__ssvfiscanf_r+0x280>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	e066      	b.n	80053a4 <__ssvfiscanf_r+0x28c>
 80052d6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80052d8:	f042 0220 	orr.w	r2, r2, #32
 80052dc:	9243      	str	r2, [sp, #268]	; 0x10c
 80052de:	e7a4      	b.n	800522a <__ssvfiscanf_r+0x112>
 80052e0:	2308      	movs	r3, #8
 80052e2:	9344      	str	r3, [sp, #272]	; 0x110
 80052e4:	2304      	movs	r3, #4
 80052e6:	e7bc      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 80052e8:	4629      	mov	r1, r5
 80052ea:	4640      	mov	r0, r8
 80052ec:	f000 fb5a 	bl	80059a4 <__sccl>
 80052f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80052f2:	4605      	mov	r5, r0
 80052f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80052fa:	2301      	movs	r3, #1
 80052fc:	e7b1      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 80052fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005304:	9343      	str	r3, [sp, #268]	; 0x10c
 8005306:	2300      	movs	r3, #0
 8005308:	e7ab      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 800530a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800530c:	06d0      	lsls	r0, r2, #27
 800530e:	f53f af78 	bmi.w	8005202 <__ssvfiscanf_r+0xea>
 8005312:	f012 0f01 	tst.w	r2, #1
 8005316:	9a01      	ldr	r2, [sp, #4]
 8005318:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800531a:	f102 0104 	add.w	r1, r2, #4
 800531e:	9101      	str	r1, [sp, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	bf14      	ite	ne
 8005324:	8013      	strhne	r3, [r2, #0]
 8005326:	6013      	streq	r3, [r2, #0]
 8005328:	e76b      	b.n	8005202 <__ssvfiscanf_r+0xea>
 800532a:	2305      	movs	r3, #5
 800532c:	e799      	b.n	8005262 <__ssvfiscanf_r+0x14a>
 800532e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005330:	4621      	mov	r1, r4
 8005332:	4630      	mov	r0, r6
 8005334:	4798      	blx	r3
 8005336:	2800      	cmp	r0, #0
 8005338:	d097      	beq.n	800526a <__ssvfiscanf_r+0x152>
 800533a:	e7c6      	b.n	80052ca <__ssvfiscanf_r+0x1b2>
 800533c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800533e:	3201      	adds	r2, #1
 8005340:	9247      	str	r2, [sp, #284]	; 0x11c
 8005342:	6862      	ldr	r2, [r4, #4]
 8005344:	3a01      	subs	r2, #1
 8005346:	2a00      	cmp	r2, #0
 8005348:	6062      	str	r2, [r4, #4]
 800534a:	dd0a      	ble.n	8005362 <__ssvfiscanf_r+0x24a>
 800534c:	3301      	adds	r3, #1
 800534e:	6023      	str	r3, [r4, #0]
 8005350:	f000 fcb6 	bl	8005cc0 <__locale_ctype_ptr>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	4410      	add	r0, r2
 800535a:	7842      	ldrb	r2, [r0, #1]
 800535c:	0712      	lsls	r2, r2, #28
 800535e:	d4ed      	bmi.n	800533c <__ssvfiscanf_r+0x224>
 8005360:	e786      	b.n	8005270 <__ssvfiscanf_r+0x158>
 8005362:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005364:	4621      	mov	r1, r4
 8005366:	4630      	mov	r0, r6
 8005368:	4798      	blx	r3
 800536a:	2800      	cmp	r0, #0
 800536c:	d0f0      	beq.n	8005350 <__ssvfiscanf_r+0x238>
 800536e:	e7ac      	b.n	80052ca <__ssvfiscanf_r+0x1b2>
 8005370:	2b04      	cmp	r3, #4
 8005372:	dc06      	bgt.n	8005382 <__ssvfiscanf_r+0x26a>
 8005374:	ab01      	add	r3, sp, #4
 8005376:	4622      	mov	r2, r4
 8005378:	a943      	add	r1, sp, #268	; 0x10c
 800537a:	4630      	mov	r0, r6
 800537c:	f000 fa1c 	bl	80057b8 <_scanf_i>
 8005380:	e77f      	b.n	8005282 <__ssvfiscanf_r+0x16a>
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <__ssvfiscanf_r+0x2a4>)
 8005384:	2b00      	cmp	r3, #0
 8005386:	f43f af3c 	beq.w	8005202 <__ssvfiscanf_r+0xea>
 800538a:	ab01      	add	r3, sp, #4
 800538c:	4622      	mov	r2, r4
 800538e:	a943      	add	r1, sp, #268	; 0x10c
 8005390:	4630      	mov	r0, r6
 8005392:	f3af 8000 	nop.w
 8005396:	e774      	b.n	8005282 <__ssvfiscanf_r+0x16a>
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800539e:	bf18      	it	ne
 80053a0:	f04f 30ff 	movne.w	r0, #4294967295
 80053a4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	9846      	ldr	r0, [sp, #280]	; 0x118
 80053ae:	e7f9      	b.n	80053a4 <__ssvfiscanf_r+0x28c>
 80053b0:	08005065 	.word	0x08005065
 80053b4:	080050df 	.word	0x080050df
 80053b8:	080060ef 	.word	0x080060ef
 80053bc:	00000000 	.word	0x00000000

080053c0 <_printf_common>:
 80053c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c4:	4691      	mov	r9, r2
 80053c6:	461f      	mov	r7, r3
 80053c8:	688a      	ldr	r2, [r1, #8]
 80053ca:	690b      	ldr	r3, [r1, #16]
 80053cc:	4606      	mov	r6, r0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	bfb8      	it	lt
 80053d2:	4613      	movlt	r3, r2
 80053d4:	f8c9 3000 	str.w	r3, [r9]
 80053d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053dc:	460c      	mov	r4, r1
 80053de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053e2:	b112      	cbz	r2, 80053ea <_printf_common+0x2a>
 80053e4:	3301      	adds	r3, #1
 80053e6:	f8c9 3000 	str.w	r3, [r9]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0699      	lsls	r1, r3, #26
 80053ee:	bf42      	ittt	mi
 80053f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053f4:	3302      	addmi	r3, #2
 80053f6:	f8c9 3000 	strmi.w	r3, [r9]
 80053fa:	6825      	ldr	r5, [r4, #0]
 80053fc:	f015 0506 	ands.w	r5, r5, #6
 8005400:	d107      	bne.n	8005412 <_printf_common+0x52>
 8005402:	f104 0a19 	add.w	sl, r4, #25
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	f8d9 2000 	ldr.w	r2, [r9]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	429d      	cmp	r5, r3
 8005410:	db2a      	blt.n	8005468 <_printf_common+0xa8>
 8005412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	3300      	adds	r3, #0
 800541a:	bf18      	it	ne
 800541c:	2301      	movne	r3, #1
 800541e:	0692      	lsls	r2, r2, #26
 8005420:	d42f      	bmi.n	8005482 <_printf_common+0xc2>
 8005422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005426:	4639      	mov	r1, r7
 8005428:	4630      	mov	r0, r6
 800542a:	47c0      	blx	r8
 800542c:	3001      	adds	r0, #1
 800542e:	d022      	beq.n	8005476 <_printf_common+0xb6>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	68e5      	ldr	r5, [r4, #12]
 8005434:	f003 0306 	and.w	r3, r3, #6
 8005438:	2b04      	cmp	r3, #4
 800543a:	bf18      	it	ne
 800543c:	2500      	movne	r5, #0
 800543e:	f8d9 2000 	ldr.w	r2, [r9]
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	bf08      	it	eq
 8005448:	1aad      	subeq	r5, r5, r2
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	6922      	ldr	r2, [r4, #16]
 800544e:	bf08      	it	eq
 8005450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005454:	4293      	cmp	r3, r2
 8005456:	bfc4      	itt	gt
 8005458:	1a9b      	subgt	r3, r3, r2
 800545a:	18ed      	addgt	r5, r5, r3
 800545c:	341a      	adds	r4, #26
 800545e:	454d      	cmp	r5, r9
 8005460:	d11b      	bne.n	800549a <_printf_common+0xda>
 8005462:	2000      	movs	r0, #0
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	2301      	movs	r3, #1
 800546a:	4652      	mov	r2, sl
 800546c:	4639      	mov	r1, r7
 800546e:	4630      	mov	r0, r6
 8005470:	47c0      	blx	r8
 8005472:	3001      	adds	r0, #1
 8005474:	d103      	bne.n	800547e <_printf_common+0xbe>
 8005476:	f04f 30ff 	mov.w	r0, #4294967295
 800547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547e:	3501      	adds	r5, #1
 8005480:	e7c1      	b.n	8005406 <_printf_common+0x46>
 8005482:	2030      	movs	r0, #48	; 0x30
 8005484:	18e1      	adds	r1, r4, r3
 8005486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005490:	4422      	add	r2, r4
 8005492:	3302      	adds	r3, #2
 8005494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005498:	e7c3      	b.n	8005422 <_printf_common+0x62>
 800549a:	2301      	movs	r3, #1
 800549c:	4622      	mov	r2, r4
 800549e:	4639      	mov	r1, r7
 80054a0:	4630      	mov	r0, r6
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d0e6      	beq.n	8005476 <_printf_common+0xb6>
 80054a8:	f109 0901 	add.w	r9, r9, #1
 80054ac:	e7d7      	b.n	800545e <_printf_common+0x9e>
	...

080054b0 <_printf_i>:
 80054b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054b4:	4617      	mov	r7, r2
 80054b6:	7e0a      	ldrb	r2, [r1, #24]
 80054b8:	b085      	sub	sp, #20
 80054ba:	2a6e      	cmp	r2, #110	; 0x6e
 80054bc:	4698      	mov	r8, r3
 80054be:	4606      	mov	r6, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80054c8:	f000 80bc 	beq.w	8005644 <_printf_i+0x194>
 80054cc:	d81a      	bhi.n	8005504 <_printf_i+0x54>
 80054ce:	2a63      	cmp	r2, #99	; 0x63
 80054d0:	d02e      	beq.n	8005530 <_printf_i+0x80>
 80054d2:	d80a      	bhi.n	80054ea <_printf_i+0x3a>
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	f000 80c8 	beq.w	800566a <_printf_i+0x1ba>
 80054da:	2a58      	cmp	r2, #88	; 0x58
 80054dc:	f000 808a 	beq.w	80055f4 <_printf_i+0x144>
 80054e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80054e8:	e02a      	b.n	8005540 <_printf_i+0x90>
 80054ea:	2a64      	cmp	r2, #100	; 0x64
 80054ec:	d001      	beq.n	80054f2 <_printf_i+0x42>
 80054ee:	2a69      	cmp	r2, #105	; 0x69
 80054f0:	d1f6      	bne.n	80054e0 <_printf_i+0x30>
 80054f2:	6821      	ldr	r1, [r4, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054fa:	d023      	beq.n	8005544 <_printf_i+0x94>
 80054fc:	1d11      	adds	r1, r2, #4
 80054fe:	6019      	str	r1, [r3, #0]
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	e027      	b.n	8005554 <_printf_i+0xa4>
 8005504:	2a73      	cmp	r2, #115	; 0x73
 8005506:	f000 80b4 	beq.w	8005672 <_printf_i+0x1c2>
 800550a:	d808      	bhi.n	800551e <_printf_i+0x6e>
 800550c:	2a6f      	cmp	r2, #111	; 0x6f
 800550e:	d02a      	beq.n	8005566 <_printf_i+0xb6>
 8005510:	2a70      	cmp	r2, #112	; 0x70
 8005512:	d1e5      	bne.n	80054e0 <_printf_i+0x30>
 8005514:	680a      	ldr	r2, [r1, #0]
 8005516:	f042 0220 	orr.w	r2, r2, #32
 800551a:	600a      	str	r2, [r1, #0]
 800551c:	e003      	b.n	8005526 <_printf_i+0x76>
 800551e:	2a75      	cmp	r2, #117	; 0x75
 8005520:	d021      	beq.n	8005566 <_printf_i+0xb6>
 8005522:	2a78      	cmp	r2, #120	; 0x78
 8005524:	d1dc      	bne.n	80054e0 <_printf_i+0x30>
 8005526:	2278      	movs	r2, #120	; 0x78
 8005528:	496f      	ldr	r1, [pc, #444]	; (80056e8 <_printf_i+0x238>)
 800552a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800552e:	e064      	b.n	80055fa <_printf_i+0x14a>
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005536:	1d11      	adds	r1, r2, #4
 8005538:	6019      	str	r1, [r3, #0]
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005540:	2301      	movs	r3, #1
 8005542:	e0a3      	b.n	800568c <_printf_i+0x1dc>
 8005544:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005548:	f102 0104 	add.w	r1, r2, #4
 800554c:	6019      	str	r1, [r3, #0]
 800554e:	d0d7      	beq.n	8005500 <_printf_i+0x50>
 8005550:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005554:	2b00      	cmp	r3, #0
 8005556:	da03      	bge.n	8005560 <_printf_i+0xb0>
 8005558:	222d      	movs	r2, #45	; 0x2d
 800555a:	425b      	negs	r3, r3
 800555c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005560:	4962      	ldr	r1, [pc, #392]	; (80056ec <_printf_i+0x23c>)
 8005562:	220a      	movs	r2, #10
 8005564:	e017      	b.n	8005596 <_printf_i+0xe6>
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800556e:	d003      	beq.n	8005578 <_printf_i+0xc8>
 8005570:	1d08      	adds	r0, r1, #4
 8005572:	6018      	str	r0, [r3, #0]
 8005574:	680b      	ldr	r3, [r1, #0]
 8005576:	e006      	b.n	8005586 <_printf_i+0xd6>
 8005578:	f010 0f40 	tst.w	r0, #64	; 0x40
 800557c:	f101 0004 	add.w	r0, r1, #4
 8005580:	6018      	str	r0, [r3, #0]
 8005582:	d0f7      	beq.n	8005574 <_printf_i+0xc4>
 8005584:	880b      	ldrh	r3, [r1, #0]
 8005586:	2a6f      	cmp	r2, #111	; 0x6f
 8005588:	bf14      	ite	ne
 800558a:	220a      	movne	r2, #10
 800558c:	2208      	moveq	r2, #8
 800558e:	4957      	ldr	r1, [pc, #348]	; (80056ec <_printf_i+0x23c>)
 8005590:	2000      	movs	r0, #0
 8005592:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005596:	6865      	ldr	r5, [r4, #4]
 8005598:	2d00      	cmp	r5, #0
 800559a:	60a5      	str	r5, [r4, #8]
 800559c:	f2c0 809c 	blt.w	80056d8 <_printf_i+0x228>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	f020 0004 	bic.w	r0, r0, #4
 80055a6:	6020      	str	r0, [r4, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d13f      	bne.n	800562c <_printf_i+0x17c>
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	f040 8095 	bne.w	80056dc <_printf_i+0x22c>
 80055b2:	4675      	mov	r5, lr
 80055b4:	2a08      	cmp	r2, #8
 80055b6:	d10b      	bne.n	80055d0 <_printf_i+0x120>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07da      	lsls	r2, r3, #31
 80055bc:	d508      	bpl.n	80055d0 <_printf_i+0x120>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bfde      	ittt	le
 80055c6:	2330      	movle	r3, #48	; 0x30
 80055c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d0:	ebae 0305 	sub.w	r3, lr, r5
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	f8cd 8000 	str.w	r8, [sp]
 80055da:	463b      	mov	r3, r7
 80055dc:	aa03      	add	r2, sp, #12
 80055de:	4621      	mov	r1, r4
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7ff feed 	bl	80053c0 <_printf_common>
 80055e6:	3001      	adds	r0, #1
 80055e8:	d155      	bne.n	8005696 <_printf_i+0x1e6>
 80055ea:	f04f 30ff 	mov.w	r0, #4294967295
 80055ee:	b005      	add	sp, #20
 80055f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055f4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80055f8:	493c      	ldr	r1, [pc, #240]	; (80056ec <_printf_i+0x23c>)
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005602:	f100 0504 	add.w	r5, r0, #4
 8005606:	601d      	str	r5, [r3, #0]
 8005608:	d001      	beq.n	800560e <_printf_i+0x15e>
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	e002      	b.n	8005614 <_printf_i+0x164>
 800560e:	0655      	lsls	r5, r2, #25
 8005610:	d5fb      	bpl.n	800560a <_printf_i+0x15a>
 8005612:	8803      	ldrh	r3, [r0, #0]
 8005614:	07d0      	lsls	r0, r2, #31
 8005616:	bf44      	itt	mi
 8005618:	f042 0220 	orrmi.w	r2, r2, #32
 800561c:	6022      	strmi	r2, [r4, #0]
 800561e:	b91b      	cbnz	r3, 8005628 <_printf_i+0x178>
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	f022 0220 	bic.w	r2, r2, #32
 8005626:	6022      	str	r2, [r4, #0]
 8005628:	2210      	movs	r2, #16
 800562a:	e7b1      	b.n	8005590 <_printf_i+0xe0>
 800562c:	4675      	mov	r5, lr
 800562e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005632:	fb02 3310 	mls	r3, r2, r0, r3
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800563c:	4603      	mov	r3, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d1f5      	bne.n	800562e <_printf_i+0x17e>
 8005642:	e7b7      	b.n	80055b4 <_printf_i+0x104>
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f010 0f80 	tst.w	r0, #128	; 0x80
 800564c:	6949      	ldr	r1, [r1, #20]
 800564e:	d004      	beq.n	800565a <_printf_i+0x1aa>
 8005650:	1d10      	adds	r0, r2, #4
 8005652:	6018      	str	r0, [r3, #0]
 8005654:	6813      	ldr	r3, [r2, #0]
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	e007      	b.n	800566a <_printf_i+0x1ba>
 800565a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800565e:	f102 0004 	add.w	r0, r2, #4
 8005662:	6018      	str	r0, [r3, #0]
 8005664:	6813      	ldr	r3, [r2, #0]
 8005666:	d0f6      	beq.n	8005656 <_printf_i+0x1a6>
 8005668:	8019      	strh	r1, [r3, #0]
 800566a:	2300      	movs	r3, #0
 800566c:	4675      	mov	r5, lr
 800566e:	6123      	str	r3, [r4, #16]
 8005670:	e7b1      	b.n	80055d6 <_printf_i+0x126>
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	1d11      	adds	r1, r2, #4
 8005676:	6019      	str	r1, [r3, #0]
 8005678:	6815      	ldr	r5, [r2, #0]
 800567a:	2100      	movs	r1, #0
 800567c:	6862      	ldr	r2, [r4, #4]
 800567e:	4628      	mov	r0, r5
 8005680:	f000 fb3e 	bl	8005d00 <memchr>
 8005684:	b108      	cbz	r0, 800568a <_printf_i+0x1da>
 8005686:	1b40      	subs	r0, r0, r5
 8005688:	6060      	str	r0, [r4, #4]
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	2300      	movs	r3, #0
 8005690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005694:	e79f      	b.n	80055d6 <_printf_i+0x126>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	462a      	mov	r2, r5
 800569a:	4639      	mov	r1, r7
 800569c:	4630      	mov	r0, r6
 800569e:	47c0      	blx	r8
 80056a0:	3001      	adds	r0, #1
 80056a2:	d0a2      	beq.n	80055ea <_printf_i+0x13a>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	079b      	lsls	r3, r3, #30
 80056a8:	d507      	bpl.n	80056ba <_printf_i+0x20a>
 80056aa:	2500      	movs	r5, #0
 80056ac:	f104 0919 	add.w	r9, r4, #25
 80056b0:	68e3      	ldr	r3, [r4, #12]
 80056b2:	9a03      	ldr	r2, [sp, #12]
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	429d      	cmp	r5, r3
 80056b8:	db05      	blt.n	80056c6 <_printf_i+0x216>
 80056ba:	68e0      	ldr	r0, [r4, #12]
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	4298      	cmp	r0, r3
 80056c0:	bfb8      	it	lt
 80056c2:	4618      	movlt	r0, r3
 80056c4:	e793      	b.n	80055ee <_printf_i+0x13e>
 80056c6:	2301      	movs	r3, #1
 80056c8:	464a      	mov	r2, r9
 80056ca:	4639      	mov	r1, r7
 80056cc:	4630      	mov	r0, r6
 80056ce:	47c0      	blx	r8
 80056d0:	3001      	adds	r0, #1
 80056d2:	d08a      	beq.n	80055ea <_printf_i+0x13a>
 80056d4:	3501      	adds	r5, #1
 80056d6:	e7eb      	b.n	80056b0 <_printf_i+0x200>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1a7      	bne.n	800562c <_printf_i+0x17c>
 80056dc:	780b      	ldrb	r3, [r1, #0]
 80056de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e6:	e765      	b.n	80055b4 <_printf_i+0x104>
 80056e8:	0800610b 	.word	0x0800610b
 80056ec:	080060fa 	.word	0x080060fa

080056f0 <_scanf_chars>:
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f4:	4615      	mov	r5, r2
 80056f6:	688a      	ldr	r2, [r1, #8]
 80056f8:	4680      	mov	r8, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	b932      	cbnz	r2, 800570c <_scanf_chars+0x1c>
 80056fe:	698a      	ldr	r2, [r1, #24]
 8005700:	2a00      	cmp	r2, #0
 8005702:	bf0c      	ite	eq
 8005704:	2201      	moveq	r2, #1
 8005706:	f04f 32ff 	movne.w	r2, #4294967295
 800570a:	608a      	str	r2, [r1, #8]
 800570c:	2600      	movs	r6, #0
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	06d1      	lsls	r1, r2, #27
 8005712:	bf5f      	itttt	pl
 8005714:	681a      	ldrpl	r2, [r3, #0]
 8005716:	1d11      	addpl	r1, r2, #4
 8005718:	6019      	strpl	r1, [r3, #0]
 800571a:	6817      	ldrpl	r7, [r2, #0]
 800571c:	69a3      	ldr	r3, [r4, #24]
 800571e:	b1db      	cbz	r3, 8005758 <_scanf_chars+0x68>
 8005720:	2b01      	cmp	r3, #1
 8005722:	d107      	bne.n	8005734 <_scanf_chars+0x44>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	6962      	ldr	r2, [r4, #20]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	b9a3      	cbnz	r3, 8005758 <_scanf_chars+0x68>
 800572e:	2e00      	cmp	r6, #0
 8005730:	d131      	bne.n	8005796 <_scanf_chars+0xa6>
 8005732:	e006      	b.n	8005742 <_scanf_chars+0x52>
 8005734:	2b02      	cmp	r3, #2
 8005736:	d007      	beq.n	8005748 <_scanf_chars+0x58>
 8005738:	2e00      	cmp	r6, #0
 800573a:	d12c      	bne.n	8005796 <_scanf_chars+0xa6>
 800573c:	69a3      	ldr	r3, [r4, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d129      	bne.n	8005796 <_scanf_chars+0xa6>
 8005742:	2001      	movs	r0, #1
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	f000 faba 	bl	8005cc0 <__locale_ctype_ptr>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4418      	add	r0, r3
 8005752:	7843      	ldrb	r3, [r0, #1]
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	d4ef      	bmi.n	8005738 <_scanf_chars+0x48>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	3601      	adds	r6, #1
 800575c:	06da      	lsls	r2, r3, #27
 800575e:	bf5e      	ittt	pl
 8005760:	682b      	ldrpl	r3, [r5, #0]
 8005762:	781b      	ldrbpl	r3, [r3, #0]
 8005764:	703b      	strbpl	r3, [r7, #0]
 8005766:	682a      	ldr	r2, [r5, #0]
 8005768:	686b      	ldr	r3, [r5, #4]
 800576a:	f102 0201 	add.w	r2, r2, #1
 800576e:	602a      	str	r2, [r5, #0]
 8005770:	68a2      	ldr	r2, [r4, #8]
 8005772:	f103 33ff 	add.w	r3, r3, #4294967295
 8005776:	f102 32ff 	add.w	r2, r2, #4294967295
 800577a:	606b      	str	r3, [r5, #4]
 800577c:	bf58      	it	pl
 800577e:	3701      	addpl	r7, #1
 8005780:	60a2      	str	r2, [r4, #8]
 8005782:	b142      	cbz	r2, 8005796 <_scanf_chars+0xa6>
 8005784:	2b00      	cmp	r3, #0
 8005786:	dcc9      	bgt.n	800571c <_scanf_chars+0x2c>
 8005788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800578c:	4629      	mov	r1, r5
 800578e:	4640      	mov	r0, r8
 8005790:	4798      	blx	r3
 8005792:	2800      	cmp	r0, #0
 8005794:	d0c2      	beq.n	800571c <_scanf_chars+0x2c>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	f013 0310 	ands.w	r3, r3, #16
 800579c:	d105      	bne.n	80057aa <_scanf_chars+0xba>
 800579e:	68e2      	ldr	r2, [r4, #12]
 80057a0:	3201      	adds	r2, #1
 80057a2:	60e2      	str	r2, [r4, #12]
 80057a4:	69a2      	ldr	r2, [r4, #24]
 80057a6:	b102      	cbz	r2, 80057aa <_scanf_chars+0xba>
 80057a8:	703b      	strb	r3, [r7, #0]
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	2000      	movs	r0, #0
 80057ae:	441e      	add	r6, r3
 80057b0:	6126      	str	r6, [r4, #16]
 80057b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080057b8 <_scanf_i>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	460c      	mov	r4, r1
 80057be:	469a      	mov	sl, r3
 80057c0:	4b74      	ldr	r3, [pc, #464]	; (8005994 <_scanf_i+0x1dc>)
 80057c2:	b087      	sub	sp, #28
 80057c4:	4683      	mov	fp, r0
 80057c6:	4616      	mov	r6, r2
 80057c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057cc:	ab03      	add	r3, sp, #12
 80057ce:	68a7      	ldr	r7, [r4, #8]
 80057d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057d4:	4b70      	ldr	r3, [pc, #448]	; (8005998 <_scanf_i+0x1e0>)
 80057d6:	69a1      	ldr	r1, [r4, #24]
 80057d8:	4a70      	ldr	r2, [pc, #448]	; (800599c <_scanf_i+0x1e4>)
 80057da:	f104 091c 	add.w	r9, r4, #28
 80057de:	2903      	cmp	r1, #3
 80057e0:	bf18      	it	ne
 80057e2:	461a      	movne	r2, r3
 80057e4:	1e7b      	subs	r3, r7, #1
 80057e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80057ea:	bf84      	itt	hi
 80057ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80057f0:	60a3      	strhi	r3, [r4, #8]
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	bf88      	it	hi
 80057f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80057fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	bf98      	it	ls
 8005802:	2700      	movls	r7, #0
 8005804:	464b      	mov	r3, r9
 8005806:	f04f 0800 	mov.w	r8, #0
 800580a:	9200      	str	r2, [sp, #0]
 800580c:	bf88      	it	hi
 800580e:	197f      	addhi	r7, r7, r5
 8005810:	6831      	ldr	r1, [r6, #0]
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	ab03      	add	r3, sp, #12
 8005816:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800581a:	2202      	movs	r2, #2
 800581c:	7809      	ldrb	r1, [r1, #0]
 800581e:	f000 fa6f 	bl	8005d00 <memchr>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	b328      	cbz	r0, 8005872 <_scanf_i+0xba>
 8005826:	f1b8 0f01 	cmp.w	r8, #1
 800582a:	d156      	bne.n	80058da <_scanf_i+0x122>
 800582c:	6862      	ldr	r2, [r4, #4]
 800582e:	b92a      	cbnz	r2, 800583c <_scanf_i+0x84>
 8005830:	2208      	movs	r2, #8
 8005832:	6062      	str	r2, [r4, #4]
 8005834:	6822      	ldr	r2, [r4, #0]
 8005836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583a:	6022      	str	r2, [r4, #0]
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	68a2      	ldr	r2, [r4, #8]
 8005846:	1e51      	subs	r1, r2, #1
 8005848:	60a1      	str	r1, [r4, #8]
 800584a:	b192      	cbz	r2, 8005872 <_scanf_i+0xba>
 800584c:	6832      	ldr	r2, [r6, #0]
 800584e:	1c5d      	adds	r5, r3, #1
 8005850:	1c51      	adds	r1, r2, #1
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	6873      	ldr	r3, [r6, #4]
 800585a:	3b01      	subs	r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	6073      	str	r3, [r6, #4]
 8005860:	dc06      	bgt.n	8005870 <_scanf_i+0xb8>
 8005862:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005866:	4631      	mov	r1, r6
 8005868:	4658      	mov	r0, fp
 800586a:	4798      	blx	r3
 800586c:	2800      	cmp	r0, #0
 800586e:	d177      	bne.n	8005960 <_scanf_i+0x1a8>
 8005870:	462b      	mov	r3, r5
 8005872:	f108 0801 	add.w	r8, r8, #1
 8005876:	f1b8 0f03 	cmp.w	r8, #3
 800587a:	d1c9      	bne.n	8005810 <_scanf_i+0x58>
 800587c:	6862      	ldr	r2, [r4, #4]
 800587e:	b90a      	cbnz	r2, 8005884 <_scanf_i+0xcc>
 8005880:	220a      	movs	r2, #10
 8005882:	6062      	str	r2, [r4, #4]
 8005884:	6862      	ldr	r2, [r4, #4]
 8005886:	4946      	ldr	r1, [pc, #280]	; (80059a0 <_scanf_i+0x1e8>)
 8005888:	6960      	ldr	r0, [r4, #20]
 800588a:	1a89      	subs	r1, r1, r2
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f000 f889 	bl	80059a4 <__sccl>
 8005892:	9b01      	ldr	r3, [sp, #4]
 8005894:	f04f 0800 	mov.w	r8, #0
 8005898:	461d      	mov	r5, r3
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d039      	beq.n	8005914 <_scanf_i+0x15c>
 80058a0:	6831      	ldr	r1, [r6, #0]
 80058a2:	6960      	ldr	r0, [r4, #20]
 80058a4:	780a      	ldrb	r2, [r1, #0]
 80058a6:	5c80      	ldrb	r0, [r0, r2]
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d033      	beq.n	8005914 <_scanf_i+0x15c>
 80058ac:	2a30      	cmp	r2, #48	; 0x30
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	d121      	bne.n	80058f6 <_scanf_i+0x13e>
 80058b2:	0510      	lsls	r0, r2, #20
 80058b4:	d51f      	bpl.n	80058f6 <_scanf_i+0x13e>
 80058b6:	f108 0801 	add.w	r8, r8, #1
 80058ba:	b117      	cbz	r7, 80058c2 <_scanf_i+0x10a>
 80058bc:	3301      	adds	r3, #1
 80058be:	3f01      	subs	r7, #1
 80058c0:	60a3      	str	r3, [r4, #8]
 80058c2:	6873      	ldr	r3, [r6, #4]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	6073      	str	r3, [r6, #4]
 80058ca:	dd1c      	ble.n	8005906 <_scanf_i+0x14e>
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	60a3      	str	r3, [r4, #8]
 80058d8:	e7df      	b.n	800589a <_scanf_i+0xe2>
 80058da:	f1b8 0f02 	cmp.w	r8, #2
 80058de:	d1b1      	bne.n	8005844 <_scanf_i+0x8c>
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80058e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80058ea:	d1c2      	bne.n	8005872 <_scanf_i+0xba>
 80058ec:	2110      	movs	r1, #16
 80058ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f2:	6061      	str	r1, [r4, #4]
 80058f4:	e7a5      	b.n	8005842 <_scanf_i+0x8a>
 80058f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80058fa:	6022      	str	r2, [r4, #0]
 80058fc:	780b      	ldrb	r3, [r1, #0]
 80058fe:	3501      	adds	r5, #1
 8005900:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005904:	e7dd      	b.n	80058c2 <_scanf_i+0x10a>
 8005906:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800590a:	4631      	mov	r1, r6
 800590c:	4658      	mov	r0, fp
 800590e:	4798      	blx	r3
 8005910:	2800      	cmp	r0, #0
 8005912:	d0de      	beq.n	80058d2 <_scanf_i+0x11a>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	05d9      	lsls	r1, r3, #23
 8005918:	d50c      	bpl.n	8005934 <_scanf_i+0x17c>
 800591a:	454d      	cmp	r5, r9
 800591c:	d908      	bls.n	8005930 <_scanf_i+0x178>
 800591e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005922:	1e6f      	subs	r7, r5, #1
 8005924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005928:	4632      	mov	r2, r6
 800592a:	4658      	mov	r0, fp
 800592c:	4798      	blx	r3
 800592e:	463d      	mov	r5, r7
 8005930:	454d      	cmp	r5, r9
 8005932:	d02c      	beq.n	800598e <_scanf_i+0x1d6>
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	f012 0210 	ands.w	r2, r2, #16
 800593a:	d11e      	bne.n	800597a <_scanf_i+0x1c2>
 800593c:	702a      	strb	r2, [r5, #0]
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	4649      	mov	r1, r9
 8005942:	4658      	mov	r0, fp
 8005944:	9e00      	ldr	r6, [sp, #0]
 8005946:	47b0      	blx	r6
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	f8da 3000 	ldr.w	r3, [sl]
 800594e:	f012 0f20 	tst.w	r2, #32
 8005952:	d008      	beq.n	8005966 <_scanf_i+0x1ae>
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	f8ca 2000 	str.w	r2, [sl]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6018      	str	r0, [r3, #0]
 800595e:	e009      	b.n	8005974 <_scanf_i+0x1bc>
 8005960:	f04f 0800 	mov.w	r8, #0
 8005964:	e7d6      	b.n	8005914 <_scanf_i+0x15c>
 8005966:	07d2      	lsls	r2, r2, #31
 8005968:	d5f4      	bpl.n	8005954 <_scanf_i+0x19c>
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	f8ca 2000 	str.w	r2, [sl]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	8018      	strh	r0, [r3, #0]
 8005974:	68e3      	ldr	r3, [r4, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60e3      	str	r3, [r4, #12]
 800597a:	2000      	movs	r0, #0
 800597c:	eba5 0509 	sub.w	r5, r5, r9
 8005980:	44a8      	add	r8, r5
 8005982:	6925      	ldr	r5, [r4, #16]
 8005984:	4445      	add	r5, r8
 8005986:	6125      	str	r5, [r4, #16]
 8005988:	b007      	add	sp, #28
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598e:	2001      	movs	r0, #1
 8005990:	e7fa      	b.n	8005988 <_scanf_i+0x1d0>
 8005992:	bf00      	nop
 8005994:	08005f84 	.word	0x08005f84
 8005998:	08005c25 	.word	0x08005c25
 800599c:	08005b05 	.word	0x08005b05
 80059a0:	0800612c 	.word	0x0800612c

080059a4 <__sccl>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	780b      	ldrb	r3, [r1, #0]
 80059a8:	1e44      	subs	r4, r0, #1
 80059aa:	2b5e      	cmp	r3, #94	; 0x5e
 80059ac:	bf13      	iteet	ne
 80059ae:	1c4a      	addne	r2, r1, #1
 80059b0:	1c8a      	addeq	r2, r1, #2
 80059b2:	784b      	ldrbeq	r3, [r1, #1]
 80059b4:	2100      	movne	r1, #0
 80059b6:	bf08      	it	eq
 80059b8:	2101      	moveq	r1, #1
 80059ba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80059be:	f804 1f01 	strb.w	r1, [r4, #1]!
 80059c2:	42a5      	cmp	r5, r4
 80059c4:	d1fb      	bne.n	80059be <__sccl+0x1a>
 80059c6:	b913      	cbnz	r3, 80059ce <__sccl+0x2a>
 80059c8:	3a01      	subs	r2, #1
 80059ca:	4610      	mov	r0, r2
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	f081 0401 	eor.w	r4, r1, #1
 80059d2:	4611      	mov	r1, r2
 80059d4:	54c4      	strb	r4, [r0, r3]
 80059d6:	780d      	ldrb	r5, [r1, #0]
 80059d8:	1c4a      	adds	r2, r1, #1
 80059da:	2d2d      	cmp	r5, #45	; 0x2d
 80059dc:	d006      	beq.n	80059ec <__sccl+0x48>
 80059de:	2d5d      	cmp	r5, #93	; 0x5d
 80059e0:	d0f3      	beq.n	80059ca <__sccl+0x26>
 80059e2:	b90d      	cbnz	r5, 80059e8 <__sccl+0x44>
 80059e4:	460a      	mov	r2, r1
 80059e6:	e7f0      	b.n	80059ca <__sccl+0x26>
 80059e8:	462b      	mov	r3, r5
 80059ea:	e7f2      	b.n	80059d2 <__sccl+0x2e>
 80059ec:	784e      	ldrb	r6, [r1, #1]
 80059ee:	2e5d      	cmp	r6, #93	; 0x5d
 80059f0:	d0fa      	beq.n	80059e8 <__sccl+0x44>
 80059f2:	42b3      	cmp	r3, r6
 80059f4:	dcf8      	bgt.n	80059e8 <__sccl+0x44>
 80059f6:	3102      	adds	r1, #2
 80059f8:	3301      	adds	r3, #1
 80059fa:	429e      	cmp	r6, r3
 80059fc:	54c4      	strb	r4, [r0, r3]
 80059fe:	dcfb      	bgt.n	80059f8 <__sccl+0x54>
 8005a00:	e7e9      	b.n	80059d6 <__sccl+0x32>

08005a02 <_strtol_l.isra.0>:
 8005a02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	4680      	mov	r8, r0
 8005a08:	4689      	mov	r9, r1
 8005a0a:	4692      	mov	sl, r2
 8005a0c:	461f      	mov	r7, r3
 8005a0e:	468b      	mov	fp, r1
 8005a10:	465d      	mov	r5, fp
 8005a12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a18:	f000 f94f 	bl	8005cba <__locale_ctype_ptr_l>
 8005a1c:	4420      	add	r0, r4
 8005a1e:	7846      	ldrb	r6, [r0, #1]
 8005a20:	f016 0608 	ands.w	r6, r6, #8
 8005a24:	d10b      	bne.n	8005a3e <_strtol_l.isra.0+0x3c>
 8005a26:	2c2d      	cmp	r4, #45	; 0x2d
 8005a28:	d10b      	bne.n	8005a42 <_strtol_l.isra.0+0x40>
 8005a2a:	2601      	movs	r6, #1
 8005a2c:	782c      	ldrb	r4, [r5, #0]
 8005a2e:	f10b 0502 	add.w	r5, fp, #2
 8005a32:	b167      	cbz	r7, 8005a4e <_strtol_l.isra.0+0x4c>
 8005a34:	2f10      	cmp	r7, #16
 8005a36:	d114      	bne.n	8005a62 <_strtol_l.isra.0+0x60>
 8005a38:	2c30      	cmp	r4, #48	; 0x30
 8005a3a:	d00a      	beq.n	8005a52 <_strtol_l.isra.0+0x50>
 8005a3c:	e011      	b.n	8005a62 <_strtol_l.isra.0+0x60>
 8005a3e:	46ab      	mov	fp, r5
 8005a40:	e7e6      	b.n	8005a10 <_strtol_l.isra.0+0xe>
 8005a42:	2c2b      	cmp	r4, #43	; 0x2b
 8005a44:	bf04      	itt	eq
 8005a46:	782c      	ldrbeq	r4, [r5, #0]
 8005a48:	f10b 0502 	addeq.w	r5, fp, #2
 8005a4c:	e7f1      	b.n	8005a32 <_strtol_l.isra.0+0x30>
 8005a4e:	2c30      	cmp	r4, #48	; 0x30
 8005a50:	d127      	bne.n	8005aa2 <_strtol_l.isra.0+0xa0>
 8005a52:	782b      	ldrb	r3, [r5, #0]
 8005a54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a58:	2b58      	cmp	r3, #88	; 0x58
 8005a5a:	d14b      	bne.n	8005af4 <_strtol_l.isra.0+0xf2>
 8005a5c:	2710      	movs	r7, #16
 8005a5e:	786c      	ldrb	r4, [r5, #1]
 8005a60:	3502      	adds	r5, #2
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	bf0c      	ite	eq
 8005a66:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005a6a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005a6e:	2200      	movs	r2, #0
 8005a70:	fbb1 fef7 	udiv	lr, r1, r7
 8005a74:	4610      	mov	r0, r2
 8005a76:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005a7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d811      	bhi.n	8005aa6 <_strtol_l.isra.0+0xa4>
 8005a82:	461c      	mov	r4, r3
 8005a84:	42a7      	cmp	r7, r4
 8005a86:	dd1d      	ble.n	8005ac4 <_strtol_l.isra.0+0xc2>
 8005a88:	1c53      	adds	r3, r2, #1
 8005a8a:	d007      	beq.n	8005a9c <_strtol_l.isra.0+0x9a>
 8005a8c:	4586      	cmp	lr, r0
 8005a8e:	d316      	bcc.n	8005abe <_strtol_l.isra.0+0xbc>
 8005a90:	d101      	bne.n	8005a96 <_strtol_l.isra.0+0x94>
 8005a92:	45a4      	cmp	ip, r4
 8005a94:	db13      	blt.n	8005abe <_strtol_l.isra.0+0xbc>
 8005a96:	2201      	movs	r2, #1
 8005a98:	fb00 4007 	mla	r0, r0, r7, r4
 8005a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aa0:	e7eb      	b.n	8005a7a <_strtol_l.isra.0+0x78>
 8005aa2:	270a      	movs	r7, #10
 8005aa4:	e7dd      	b.n	8005a62 <_strtol_l.isra.0+0x60>
 8005aa6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005aaa:	2b19      	cmp	r3, #25
 8005aac:	d801      	bhi.n	8005ab2 <_strtol_l.isra.0+0xb0>
 8005aae:	3c37      	subs	r4, #55	; 0x37
 8005ab0:	e7e8      	b.n	8005a84 <_strtol_l.isra.0+0x82>
 8005ab2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ab6:	2b19      	cmp	r3, #25
 8005ab8:	d804      	bhi.n	8005ac4 <_strtol_l.isra.0+0xc2>
 8005aba:	3c57      	subs	r4, #87	; 0x57
 8005abc:	e7e2      	b.n	8005a84 <_strtol_l.isra.0+0x82>
 8005abe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac2:	e7eb      	b.n	8005a9c <_strtol_l.isra.0+0x9a>
 8005ac4:	1c53      	adds	r3, r2, #1
 8005ac6:	d108      	bne.n	8005ada <_strtol_l.isra.0+0xd8>
 8005ac8:	2322      	movs	r3, #34	; 0x22
 8005aca:	4608      	mov	r0, r1
 8005acc:	f8c8 3000 	str.w	r3, [r8]
 8005ad0:	f1ba 0f00 	cmp.w	sl, #0
 8005ad4:	d107      	bne.n	8005ae6 <_strtol_l.isra.0+0xe4>
 8005ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ada:	b106      	cbz	r6, 8005ade <_strtol_l.isra.0+0xdc>
 8005adc:	4240      	negs	r0, r0
 8005ade:	f1ba 0f00 	cmp.w	sl, #0
 8005ae2:	d00c      	beq.n	8005afe <_strtol_l.isra.0+0xfc>
 8005ae4:	b122      	cbz	r2, 8005af0 <_strtol_l.isra.0+0xee>
 8005ae6:	3d01      	subs	r5, #1
 8005ae8:	f8ca 5000 	str.w	r5, [sl]
 8005aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	464d      	mov	r5, r9
 8005af2:	e7f9      	b.n	8005ae8 <_strtol_l.isra.0+0xe6>
 8005af4:	2430      	movs	r4, #48	; 0x30
 8005af6:	2f00      	cmp	r7, #0
 8005af8:	d1b3      	bne.n	8005a62 <_strtol_l.isra.0+0x60>
 8005afa:	2708      	movs	r7, #8
 8005afc:	e7b1      	b.n	8005a62 <_strtol_l.isra.0+0x60>
 8005afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005b04 <_strtol_r>:
 8005b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b06:	4c06      	ldr	r4, [pc, #24]	; (8005b20 <_strtol_r+0x1c>)
 8005b08:	4d06      	ldr	r5, [pc, #24]	; (8005b24 <_strtol_r+0x20>)
 8005b0a:	6824      	ldr	r4, [r4, #0]
 8005b0c:	6a24      	ldr	r4, [r4, #32]
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	bf08      	it	eq
 8005b12:	462c      	moveq	r4, r5
 8005b14:	9400      	str	r4, [sp, #0]
 8005b16:	f7ff ff74 	bl	8005a02 <_strtol_l.isra.0>
 8005b1a:	b003      	add	sp, #12
 8005b1c:	bd30      	pop	{r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000192c 	.word	0x2000192c
 8005b24:	20001990 	.word	0x20001990

08005b28 <_strtoul_l.isra.0>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	4689      	mov	r9, r1
 8005b30:	4692      	mov	sl, r2
 8005b32:	461e      	mov	r6, r3
 8005b34:	460f      	mov	r7, r1
 8005b36:	463d      	mov	r5, r7
 8005b38:	9808      	ldr	r0, [sp, #32]
 8005b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b3e:	f000 f8bc 	bl	8005cba <__locale_ctype_ptr_l>
 8005b42:	4420      	add	r0, r4
 8005b44:	7843      	ldrb	r3, [r0, #1]
 8005b46:	f013 0308 	ands.w	r3, r3, #8
 8005b4a:	d10a      	bne.n	8005b62 <_strtoul_l.isra.0+0x3a>
 8005b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8005b4e:	d10a      	bne.n	8005b66 <_strtoul_l.isra.0+0x3e>
 8005b50:	2301      	movs	r3, #1
 8005b52:	782c      	ldrb	r4, [r5, #0]
 8005b54:	1cbd      	adds	r5, r7, #2
 8005b56:	b15e      	cbz	r6, 8005b70 <_strtoul_l.isra.0+0x48>
 8005b58:	2e10      	cmp	r6, #16
 8005b5a:	d113      	bne.n	8005b84 <_strtoul_l.isra.0+0x5c>
 8005b5c:	2c30      	cmp	r4, #48	; 0x30
 8005b5e:	d009      	beq.n	8005b74 <_strtoul_l.isra.0+0x4c>
 8005b60:	e010      	b.n	8005b84 <_strtoul_l.isra.0+0x5c>
 8005b62:	462f      	mov	r7, r5
 8005b64:	e7e7      	b.n	8005b36 <_strtoul_l.isra.0+0xe>
 8005b66:	2c2b      	cmp	r4, #43	; 0x2b
 8005b68:	bf04      	itt	eq
 8005b6a:	782c      	ldrbeq	r4, [r5, #0]
 8005b6c:	1cbd      	addeq	r5, r7, #2
 8005b6e:	e7f2      	b.n	8005b56 <_strtoul_l.isra.0+0x2e>
 8005b70:	2c30      	cmp	r4, #48	; 0x30
 8005b72:	d125      	bne.n	8005bc0 <_strtoul_l.isra.0+0x98>
 8005b74:	782a      	ldrb	r2, [r5, #0]
 8005b76:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005b7a:	2a58      	cmp	r2, #88	; 0x58
 8005b7c:	d14a      	bne.n	8005c14 <_strtoul_l.isra.0+0xec>
 8005b7e:	2610      	movs	r6, #16
 8005b80:	786c      	ldrb	r4, [r5, #1]
 8005b82:	3502      	adds	r5, #2
 8005b84:	f04f 31ff 	mov.w	r1, #4294967295
 8005b88:	fbb1 f1f6 	udiv	r1, r1, r6
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	fb06 fe01 	mul.w	lr, r6, r1
 8005b92:	4638      	mov	r0, r7
 8005b94:	ea6f 0e0e 	mvn.w	lr, lr
 8005b98:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8005b9c:	2a09      	cmp	r2, #9
 8005b9e:	d811      	bhi.n	8005bc4 <_strtoul_l.isra.0+0x9c>
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	42a6      	cmp	r6, r4
 8005ba4:	dd1d      	ble.n	8005be2 <_strtoul_l.isra.0+0xba>
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	db18      	blt.n	8005bdc <_strtoul_l.isra.0+0xb4>
 8005baa:	4281      	cmp	r1, r0
 8005bac:	d316      	bcc.n	8005bdc <_strtoul_l.isra.0+0xb4>
 8005bae:	d101      	bne.n	8005bb4 <_strtoul_l.isra.0+0x8c>
 8005bb0:	45a6      	cmp	lr, r4
 8005bb2:	db13      	blt.n	8005bdc <_strtoul_l.isra.0+0xb4>
 8005bb4:	2701      	movs	r7, #1
 8005bb6:	fb00 4006 	mla	r0, r0, r6, r4
 8005bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bbe:	e7eb      	b.n	8005b98 <_strtoul_l.isra.0+0x70>
 8005bc0:	260a      	movs	r6, #10
 8005bc2:	e7df      	b.n	8005b84 <_strtoul_l.isra.0+0x5c>
 8005bc4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8005bc8:	2a19      	cmp	r2, #25
 8005bca:	d801      	bhi.n	8005bd0 <_strtoul_l.isra.0+0xa8>
 8005bcc:	3c37      	subs	r4, #55	; 0x37
 8005bce:	e7e8      	b.n	8005ba2 <_strtoul_l.isra.0+0x7a>
 8005bd0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8005bd4:	2a19      	cmp	r2, #25
 8005bd6:	d804      	bhi.n	8005be2 <_strtoul_l.isra.0+0xba>
 8005bd8:	3c57      	subs	r4, #87	; 0x57
 8005bda:	e7e2      	b.n	8005ba2 <_strtoul_l.isra.0+0x7a>
 8005bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8005be0:	e7eb      	b.n	8005bba <_strtoul_l.isra.0+0x92>
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	da09      	bge.n	8005bfa <_strtoul_l.isra.0+0xd2>
 8005be6:	2322      	movs	r3, #34	; 0x22
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	f8c8 3000 	str.w	r3, [r8]
 8005bf0:	f1ba 0f00 	cmp.w	sl, #0
 8005bf4:	d107      	bne.n	8005c06 <_strtoul_l.isra.0+0xde>
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	b103      	cbz	r3, 8005bfe <_strtoul_l.isra.0+0xd6>
 8005bfc:	4240      	negs	r0, r0
 8005bfe:	f1ba 0f00 	cmp.w	sl, #0
 8005c02:	d00c      	beq.n	8005c1e <_strtoul_l.isra.0+0xf6>
 8005c04:	b127      	cbz	r7, 8005c10 <_strtoul_l.isra.0+0xe8>
 8005c06:	3d01      	subs	r5, #1
 8005c08:	f8ca 5000 	str.w	r5, [sl]
 8005c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c10:	464d      	mov	r5, r9
 8005c12:	e7f9      	b.n	8005c08 <_strtoul_l.isra.0+0xe0>
 8005c14:	2430      	movs	r4, #48	; 0x30
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	d1b4      	bne.n	8005b84 <_strtoul_l.isra.0+0x5c>
 8005c1a:	2608      	movs	r6, #8
 8005c1c:	e7b2      	b.n	8005b84 <_strtoul_l.isra.0+0x5c>
 8005c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005c24 <_strtoul_r>:
 8005c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c26:	4c06      	ldr	r4, [pc, #24]	; (8005c40 <_strtoul_r+0x1c>)
 8005c28:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_strtoul_r+0x20>)
 8005c2a:	6824      	ldr	r4, [r4, #0]
 8005c2c:	6a24      	ldr	r4, [r4, #32]
 8005c2e:	2c00      	cmp	r4, #0
 8005c30:	bf08      	it	eq
 8005c32:	462c      	moveq	r4, r5
 8005c34:	9400      	str	r4, [sp, #0]
 8005c36:	f7ff ff77 	bl	8005b28 <_strtoul_l.isra.0>
 8005c3a:	b003      	add	sp, #12
 8005c3c:	bd30      	pop	{r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	2000192c 	.word	0x2000192c
 8005c44:	20001990 	.word	0x20001990

08005c48 <__submore>:
 8005c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d11c      	bne.n	8005c92 <__submore+0x4a>
 8005c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c5c:	f000 f8c4 	bl	8005de8 <_malloc_r>
 8005c60:	b918      	cbnz	r0, 8005c6a <__submore+0x22>
 8005c62:	f04f 30ff 	mov.w	r0, #4294967295
 8005c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005c70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005c74:	6360      	str	r0, [r4, #52]	; 0x34
 8005c76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005c7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005c82:	7043      	strb	r3, [r0, #1]
 8005c84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c88:	7003      	strb	r3, [r0, #0]
 8005c8a:	6020      	str	r0, [r4, #0]
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c92:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005c94:	0077      	lsls	r7, r6, #1
 8005c96:	463a      	mov	r2, r7
 8005c98:	f000 f904 	bl	8005ea4 <_realloc_r>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0df      	beq.n	8005c62 <__submore+0x1a>
 8005ca2:	eb00 0806 	add.w	r8, r0, r6
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4640      	mov	r0, r8
 8005cac:	f7ff f81e 	bl	8004cec <memcpy>
 8005cb0:	f8c4 8000 	str.w	r8, [r4]
 8005cb4:	6365      	str	r5, [r4, #52]	; 0x34
 8005cb6:	63a7      	str	r7, [r4, #56]	; 0x38
 8005cb8:	e7e8      	b.n	8005c8c <__submore+0x44>

08005cba <__locale_ctype_ptr_l>:
 8005cba:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005cbe:	4770      	bx	lr

08005cc0 <__locale_ctype_ptr>:
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <__locale_ctype_ptr+0x14>)
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <__locale_ctype_ptr+0x18>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bf08      	it	eq
 8005ccc:	4613      	moveq	r3, r2
 8005cce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005cd2:	4770      	bx	lr
 8005cd4:	2000192c 	.word	0x2000192c
 8005cd8:	20001990 	.word	0x20001990

08005cdc <__ascii_mbtowc>:
 8005cdc:	b082      	sub	sp, #8
 8005cde:	b901      	cbnz	r1, 8005ce2 <__ascii_mbtowc+0x6>
 8005ce0:	a901      	add	r1, sp, #4
 8005ce2:	b142      	cbz	r2, 8005cf6 <__ascii_mbtowc+0x1a>
 8005ce4:	b14b      	cbz	r3, 8005cfa <__ascii_mbtowc+0x1e>
 8005ce6:	7813      	ldrb	r3, [r2, #0]
 8005ce8:	600b      	str	r3, [r1, #0]
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	1c10      	adds	r0, r2, #0
 8005cee:	bf18      	it	ne
 8005cf0:	2001      	movne	r0, #1
 8005cf2:	b002      	add	sp, #8
 8005cf4:	4770      	bx	lr
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	e7fb      	b.n	8005cf2 <__ascii_mbtowc+0x16>
 8005cfa:	f06f 0001 	mvn.w	r0, #1
 8005cfe:	e7f8      	b.n	8005cf2 <__ascii_mbtowc+0x16>

08005d00 <memchr>:
 8005d00:	b510      	push	{r4, lr}
 8005d02:	b2c9      	uxtb	r1, r1
 8005d04:	4402      	add	r2, r0
 8005d06:	4290      	cmp	r0, r2
 8005d08:	4603      	mov	r3, r0
 8005d0a:	d101      	bne.n	8005d10 <memchr+0x10>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	bd10      	pop	{r4, pc}
 8005d10:	781c      	ldrb	r4, [r3, #0]
 8005d12:	3001      	adds	r0, #1
 8005d14:	428c      	cmp	r4, r1
 8005d16:	d1f6      	bne.n	8005d06 <memchr+0x6>
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <memmove>:
 8005d1c:	4288      	cmp	r0, r1
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	eb01 0302 	add.w	r3, r1, r2
 8005d24:	d803      	bhi.n	8005d2e <memmove+0x12>
 8005d26:	1e42      	subs	r2, r0, #1
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d10c      	bne.n	8005d46 <memmove+0x2a>
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	d2f9      	bcs.n	8005d26 <memmove+0xa>
 8005d32:	1881      	adds	r1, r0, r2
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	42d3      	cmn	r3, r2
 8005d38:	d100      	bne.n	8005d3c <memmove+0x20>
 8005d3a:	bd10      	pop	{r4, pc}
 8005d3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d44:	e7f7      	b.n	8005d36 <memmove+0x1a>
 8005d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d4e:	e7eb      	b.n	8005d28 <memmove+0xc>

08005d50 <_free_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4605      	mov	r5, r0
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d043      	beq.n	8005de0 <_free_r+0x90>
 8005d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5c:	1f0c      	subs	r4, r1, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	18e4      	addlt	r4, r4, r3
 8005d64:	f000 f8e1 	bl	8005f2a <__malloc_lock>
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <_free_r+0x94>)
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	b933      	cbnz	r3, 8005d7e <_free_r+0x2e>
 8005d70:	6063      	str	r3, [r4, #4]
 8005d72:	6014      	str	r4, [r2, #0]
 8005d74:	4628      	mov	r0, r5
 8005d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d7a:	f000 b8d7 	b.w	8005f2c <__malloc_unlock>
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	d90b      	bls.n	8005d9a <_free_r+0x4a>
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	1862      	adds	r2, r4, r1
 8005d86:	4293      	cmp	r3, r2
 8005d88:	bf01      	itttt	eq
 8005d8a:	681a      	ldreq	r2, [r3, #0]
 8005d8c:	685b      	ldreq	r3, [r3, #4]
 8005d8e:	1852      	addeq	r2, r2, r1
 8005d90:	6022      	streq	r2, [r4, #0]
 8005d92:	6063      	str	r3, [r4, #4]
 8005d94:	6004      	str	r4, [r0, #0]
 8005d96:	e7ed      	b.n	8005d74 <_free_r+0x24>
 8005d98:	4613      	mov	r3, r2
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	b10a      	cbz	r2, 8005da2 <_free_r+0x52>
 8005d9e:	42a2      	cmp	r2, r4
 8005da0:	d9fa      	bls.n	8005d98 <_free_r+0x48>
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	1858      	adds	r0, r3, r1
 8005da6:	42a0      	cmp	r0, r4
 8005da8:	d10b      	bne.n	8005dc2 <_free_r+0x72>
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	4401      	add	r1, r0
 8005dae:	1858      	adds	r0, r3, r1
 8005db0:	4282      	cmp	r2, r0
 8005db2:	6019      	str	r1, [r3, #0]
 8005db4:	d1de      	bne.n	8005d74 <_free_r+0x24>
 8005db6:	6810      	ldr	r0, [r2, #0]
 8005db8:	6852      	ldr	r2, [r2, #4]
 8005dba:	4401      	add	r1, r0
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
 8005dc0:	e7d8      	b.n	8005d74 <_free_r+0x24>
 8005dc2:	d902      	bls.n	8005dca <_free_r+0x7a>
 8005dc4:	230c      	movs	r3, #12
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	e7d4      	b.n	8005d74 <_free_r+0x24>
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	1821      	adds	r1, r4, r0
 8005dce:	428a      	cmp	r2, r1
 8005dd0:	bf01      	itttt	eq
 8005dd2:	6811      	ldreq	r1, [r2, #0]
 8005dd4:	6852      	ldreq	r2, [r2, #4]
 8005dd6:	1809      	addeq	r1, r1, r0
 8005dd8:	6021      	streq	r1, [r4, #0]
 8005dda:	6062      	str	r2, [r4, #4]
 8005ddc:	605c      	str	r4, [r3, #4]
 8005dde:	e7c9      	b.n	8005d74 <_free_r+0x24>
 8005de0:	bd38      	pop	{r3, r4, r5, pc}
 8005de2:	bf00      	nop
 8005de4:	20001e54 	.word	0x20001e54

08005de8 <_malloc_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	1ccd      	adds	r5, r1, #3
 8005dec:	f025 0503 	bic.w	r5, r5, #3
 8005df0:	3508      	adds	r5, #8
 8005df2:	2d0c      	cmp	r5, #12
 8005df4:	bf38      	it	cc
 8005df6:	250c      	movcc	r5, #12
 8005df8:	2d00      	cmp	r5, #0
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	db01      	blt.n	8005e02 <_malloc_r+0x1a>
 8005dfe:	42a9      	cmp	r1, r5
 8005e00:	d903      	bls.n	8005e0a <_malloc_r+0x22>
 8005e02:	230c      	movs	r3, #12
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	2000      	movs	r0, #0
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	f000 f88e 	bl	8005f2a <__malloc_lock>
 8005e0e:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <_malloc_r+0xb4>)
 8005e10:	6814      	ldr	r4, [r2, #0]
 8005e12:	4621      	mov	r1, r4
 8005e14:	b991      	cbnz	r1, 8005e3c <_malloc_r+0x54>
 8005e16:	4c22      	ldr	r4, [pc, #136]	; (8005ea0 <_malloc_r+0xb8>)
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	b91b      	cbnz	r3, 8005e24 <_malloc_r+0x3c>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f867 	bl	8005ef0 <_sbrk_r>
 8005e22:	6020      	str	r0, [r4, #0]
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f862 	bl	8005ef0 <_sbrk_r>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d126      	bne.n	8005e7e <_malloc_r+0x96>
 8005e30:	230c      	movs	r3, #12
 8005e32:	4630      	mov	r0, r6
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	f000 f879 	bl	8005f2c <__malloc_unlock>
 8005e3a:	e7e4      	b.n	8005e06 <_malloc_r+0x1e>
 8005e3c:	680b      	ldr	r3, [r1, #0]
 8005e3e:	1b5b      	subs	r3, r3, r5
 8005e40:	d41a      	bmi.n	8005e78 <_malloc_r+0x90>
 8005e42:	2b0b      	cmp	r3, #11
 8005e44:	d90f      	bls.n	8005e66 <_malloc_r+0x7e>
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	18cc      	adds	r4, r1, r3
 8005e4a:	50cd      	str	r5, [r1, r3]
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f86d 	bl	8005f2c <__malloc_unlock>
 8005e52:	f104 000b 	add.w	r0, r4, #11
 8005e56:	1d23      	adds	r3, r4, #4
 8005e58:	f020 0007 	bic.w	r0, r0, #7
 8005e5c:	1ac3      	subs	r3, r0, r3
 8005e5e:	d01b      	beq.n	8005e98 <_malloc_r+0xb0>
 8005e60:	425a      	negs	r2, r3
 8005e62:	50e2      	str	r2, [r4, r3]
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	428c      	cmp	r4, r1
 8005e68:	bf0b      	itete	eq
 8005e6a:	6863      	ldreq	r3, [r4, #4]
 8005e6c:	684b      	ldrne	r3, [r1, #4]
 8005e6e:	6013      	streq	r3, [r2, #0]
 8005e70:	6063      	strne	r3, [r4, #4]
 8005e72:	bf18      	it	ne
 8005e74:	460c      	movne	r4, r1
 8005e76:	e7e9      	b.n	8005e4c <_malloc_r+0x64>
 8005e78:	460c      	mov	r4, r1
 8005e7a:	6849      	ldr	r1, [r1, #4]
 8005e7c:	e7ca      	b.n	8005e14 <_malloc_r+0x2c>
 8005e7e:	1cc4      	adds	r4, r0, #3
 8005e80:	f024 0403 	bic.w	r4, r4, #3
 8005e84:	42a0      	cmp	r0, r4
 8005e86:	d005      	beq.n	8005e94 <_malloc_r+0xac>
 8005e88:	1a21      	subs	r1, r4, r0
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f000 f830 	bl	8005ef0 <_sbrk_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d0cd      	beq.n	8005e30 <_malloc_r+0x48>
 8005e94:	6025      	str	r5, [r4, #0]
 8005e96:	e7d9      	b.n	8005e4c <_malloc_r+0x64>
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20001e54 	.word	0x20001e54
 8005ea0:	20001e58 	.word	0x20001e58

08005ea4 <_realloc_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	460e      	mov	r6, r1
 8005eac:	b921      	cbnz	r1, 8005eb8 <_realloc_r+0x14>
 8005eae:	4611      	mov	r1, r2
 8005eb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005eb4:	f7ff bf98 	b.w	8005de8 <_malloc_r>
 8005eb8:	b922      	cbnz	r2, 8005ec4 <_realloc_r+0x20>
 8005eba:	f7ff ff49 	bl	8005d50 <_free_r>
 8005ebe:	4625      	mov	r5, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec4:	f000 f833 	bl	8005f2e <_malloc_usable_size_r>
 8005ec8:	4284      	cmp	r4, r0
 8005eca:	d90f      	bls.n	8005eec <_realloc_r+0x48>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ff8a 	bl	8005de8 <_malloc_r>
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0f2      	beq.n	8005ec0 <_realloc_r+0x1c>
 8005eda:	4631      	mov	r1, r6
 8005edc:	4622      	mov	r2, r4
 8005ede:	f7fe ff05 	bl	8004cec <memcpy>
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff ff33 	bl	8005d50 <_free_r>
 8005eea:	e7e9      	b.n	8005ec0 <_realloc_r+0x1c>
 8005eec:	4635      	mov	r5, r6
 8005eee:	e7e7      	b.n	8005ec0 <_realloc_r+0x1c>

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4c05      	ldr	r4, [pc, #20]	; (8005f0c <_sbrk_r+0x1c>)
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	f000 f820 	bl	8005f40 <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	2000314c 	.word	0x2000314c

08005f10 <__ascii_wctomb>:
 8005f10:	b149      	cbz	r1, 8005f26 <__ascii_wctomb+0x16>
 8005f12:	2aff      	cmp	r2, #255	; 0xff
 8005f14:	bf8b      	itete	hi
 8005f16:	238a      	movhi	r3, #138	; 0x8a
 8005f18:	700a      	strbls	r2, [r1, #0]
 8005f1a:	6003      	strhi	r3, [r0, #0]
 8005f1c:	2001      	movls	r0, #1
 8005f1e:	bf88      	it	hi
 8005f20:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f24:	4770      	bx	lr
 8005f26:	4608      	mov	r0, r1
 8005f28:	4770      	bx	lr

08005f2a <__malloc_lock>:
 8005f2a:	4770      	bx	lr

08005f2c <__malloc_unlock>:
 8005f2c:	4770      	bx	lr

08005f2e <_malloc_usable_size_r>:
 8005f2e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005f32:	2800      	cmp	r0, #0
 8005f34:	f1a0 0004 	sub.w	r0, r0, #4
 8005f38:	bfbc      	itt	lt
 8005f3a:	580b      	ldrlt	r3, [r1, r0]
 8005f3c:	18c0      	addlt	r0, r0, r3
 8005f3e:	4770      	bx	lr

08005f40 <_sbrk>:
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <_sbrk+0x14>)
 8005f42:	4602      	mov	r2, r0
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	b909      	cbnz	r1, 8005f4c <_sbrk+0xc>
 8005f48:	4903      	ldr	r1, [pc, #12]	; (8005f58 <_sbrk+0x18>)
 8005f4a:	6019      	str	r1, [r3, #0]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	4402      	add	r2, r0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	4770      	bx	lr
 8005f54:	20001e5c 	.word	0x20001e5c
 8005f58:	20003150 	.word	0x20003150

08005f5c <_init>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr

08005f68 <_fini>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr
